
d:/WindyCity_IOT/Labs/Lab6/target/3.0.0/argon/Lab6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00003e50  000d4020  000d4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000d7e70  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000068  2003e544  000d7e74  0001e544  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000244  2003e5b0  2003e5b0  0002e5b0  2**3
                  ALLOC
  6 .module_info_suffix 00000028  000d7edc  000d7edc  00027edc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d7f04  000d7f04  00027f04  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   001c4a66  00000000  00000000  00027f08  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000198c8  00000000  00000000  001ec96e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0003a805  00000000  00000000  00206236  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002c38  00000000  00000000  00240a3b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00009178  00000000  00000000  00243673  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0003e2dc  00000000  00000000  0024c7eb  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0004533e  00000000  00000000  0028aac7  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0012795c  00000000  00000000  002cfe05  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  000080d8  00000000  00000000  003f7764  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4020:	4809      	ldr	r0, [pc, #36]	; (d4048 <module_user_pre_init+0x28>)
   d4022:	490a      	ldr	r1, [pc, #40]	; (d404c <module_user_pre_init+0x2c>)
   d4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   d4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4028:	d005      	beq.n	d4036 <module_user_pre_init+0x16>
   d402a:	4a09      	ldr	r2, [pc, #36]	; (d4050 <module_user_pre_init+0x30>)
   d402c:	4282      	cmp	r2, r0
   d402e:	d002      	beq.n	d4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d4030:	1a12      	subs	r2, r2, r0
   d4032:	f003 f849 	bl	d70c8 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4036:	4807      	ldr	r0, [pc, #28]	; (d4054 <module_user_pre_init+0x34>)
   d4038:	4a07      	ldr	r2, [pc, #28]	; (d4058 <module_user_pre_init+0x38>)
   d403a:	2100      	movs	r1, #0
   d403c:	1a12      	subs	r2, r2, r0
   d403e:	f003 f851 	bl	d70e4 <memset>
    return &link_global_data_start;
}
   d4042:	4801      	ldr	r0, [pc, #4]	; (d4048 <module_user_pre_init+0x28>)
   d4044:	bd08      	pop	{r3, pc}
   d4046:	bf00      	nop
   d4048:	2003e544 	.word	0x2003e544
   d404c:	000d7e74 	.word	0x000d7e74
   d4050:	2003e5ac 	.word	0x2003e5ac
   d4054:	2003e5b0 	.word	0x2003e5b0
   d4058:	2003e7f4 	.word	0x2003e7f4

000d405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d405e:	4e07      	ldr	r6, [pc, #28]	; (d407c <module_user_init+0x20>)
   d4060:	4c07      	ldr	r4, [pc, #28]	; (d4080 <module_user_init+0x24>)
    module_user_init_hook();
   d4062:	f001 ffa5 	bl	d5fb0 <module_user_init_hook>
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	1ba4      	subs	r4, r4, r6
   d4068:	08a4      	lsrs	r4, r4, #2
   d406a:	2500      	movs	r5, #0
   d406c:	42a5      	cmp	r5, r4
   d406e:	d100      	bne.n	d4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   d4072:	f856 3b04 	ldr.w	r3, [r6], #4
   d4076:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4078:	3501      	adds	r5, #1
   d407a:	e7f7      	b.n	d406c <module_user_init+0x10>
   d407c:	000d7e4c 	.word	0x000d7e4c
   d4080:	000d7e70 	.word	0x000d7e70

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 b826 	b.w	d40d4 <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 f845 	bl	d4118 <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   d4092:	f001 bf4f 	b.w	d5f34 <_post_loop>

000d4096 <_Znaj>:
   d4096:	f001 bc4b 	b.w	d5930 <malloc>

000d409a <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
   d409a:	f001 bc51 	b.w	d5940 <free>
	...

000d40a0 <__cxa_pure_virtual>:
char* strerror(int errnum) {
    return (char*)"";
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   d40a0:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   d40a2:	4a03      	ldr	r2, [pc, #12]	; (d40b0 <__cxa_pure_virtual+0x10>)
   d40a4:	2100      	movs	r1, #0
   d40a6:	200c      	movs	r0, #12
   d40a8:	f001 fba6 	bl	d57f8 <panic_>
  while (1);
   d40ac:	e7fe      	b.n	d40ac <__cxa_pure_virtual+0xc>
   d40ae:	bf00      	nop
   d40b0:	000d5579 	.word	0x000d5579

000d40b4 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40b4:	7800      	ldrb	r0, [r0, #0]
   d40b6:	fab0 f080 	clz	r0, r0
   d40ba:	0940      	lsrs	r0, r0, #5
   d40bc:	4770      	bx	lr

000d40be <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40be:	2301      	movs	r3, #1
   d40c0:	7003      	strb	r3, [r0, #0]
   d40c2:	4770      	bx	lr

000d40c4 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d40c4:	b510      	push	{r4, lr}
   d40c6:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d40c8:	6800      	ldr	r0, [r0, #0]
   d40ca:	b108      	cbz	r0, d40d0 <_ZN11SystemClassD1Ev+0xc>
            free(wakeupSource_);
   d40cc:	f001 fc38 	bl	d5940 <free>
class SystemClass {
   d40d0:	4620      	mov	r0, r4
   d40d2:	bd10      	pop	{r4, pc}

000d40d4 <setup>:
double voltage;
double temperature;
  

// setup() runs once, when the device is first turned on.
void setup() {
   d40d4:	b510      	push	{r4, lr}
  // Put initialization like pinMode and begin functions here.
  pinMode(A4, INPUT);
  

  // init display values
  display.setup();
   d40d6:	4c0e      	ldr	r4, [pc, #56]	; (d4110 <setup+0x3c>)
  pinMode(A4, INPUT);
   d40d8:	2100      	movs	r1, #0
   d40da:	200f      	movs	r0, #15
   d40dc:	f002 fa94 	bl	d6608 <pinMode>
  display.setup();
   d40e0:	4620      	mov	r0, r4
   d40e2:	f000 fd39 	bl	d4b58 <_ZN16OledWingAdafruit5setupEv>
  display.clearDisplay();
   d40e6:	4620      	mov	r0, r4
   d40e8:	f000 fef8 	bl	d4edc <_ZN16Adafruit_SSD130612clearDisplayEv>
  display.setTextSize(1);
   d40ec:	4620      	mov	r0, r4
   d40ee:	2101      	movs	r1, #1
   d40f0:	f000 fce3 	bl	d4aba <_ZN12Adafruit_GFX11setTextSizeEh>
    @param   c   16-bit 5-6-5 Color to draw text with
    @note    For 'transparent' background, background and foreground
             are set to same color rather than using a separate flag.
  */
  /**********************************************************************/
  void setTextColor(uint16_t c) { textcolor = textbgcolor = c; }
   d40f4:	2200      	movs	r2, #0
   d40f6:	f04f 1301 	mov.w	r3, #65537	; 0x10001
  display.setTextColor(WHITE);
  display.setCursor(0,0);
  display.println("Hello, world!");
   d40fa:	4620      	mov	r0, r4
   d40fc:	4905      	ldr	r1, [pc, #20]	; (d4114 <setup+0x40>)
   d40fe:	e9c4 2304 	strd	r2, r3, [r4, #16]
   d4102:	f001 fda0 	bl	d5c46 <_ZN5Print7printlnEPKc>
  display.display();
   d4106:	4620      	mov	r0, r4
}
   d4108:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  display.display();
   d410c:	f001 b952 	b.w	d53b4 <_ZN16Adafruit_SSD13067displayEv>
   d4110:	2003e5c0 	.word	0x2003e5c0
   d4114:	000d7160 	.word	0x000d7160

000d4118 <loop>:

// loop() runs over and over again, as quickly as it can execute.
void loop() {
   d4118:	b538      	push	{r3, r4, r5, lr}
  // read temp
  reading = analogRead(A4);
   d411a:	200f      	movs	r0, #15
   d411c:	f002 fab1 	bl	d6682 <analogRead>
   d4120:	4b35      	ldr	r3, [pc, #212]	; (d41f8 <loop+0xe0>)
   d4122:	8018      	strh	r0, [r3, #0]
  voltage = (reading * 3.3) / 4095.0;
   d4124:	b280      	uxth	r0, r0
   d4126:	f002 fc5f 	bl	d69e8 <__aeabi_i2d>
   d412a:	a32f      	add	r3, pc, #188	; (adr r3, d41e8 <loop+0xd0>)
   d412c:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4130:	f002 fcc4 	bl	d6abc <__aeabi_dmul>
   d4134:	a32e      	add	r3, pc, #184	; (adr r3, d41f0 <loop+0xd8>)
   d4136:	e9d3 2300 	ldrd	r2, r3, [r3]
   d413a:	f002 fde9 	bl	d6d10 <__aeabi_ddiv>
   d413e:	4b2f      	ldr	r3, [pc, #188]	; (d41fc <loop+0xe4>)
   d4140:	4604      	mov	r4, r0
   d4142:	460d      	mov	r5, r1
   d4144:	e9c3 4500 	strd	r4, r5, [r3]
  temperature = (voltage - 0.5) * 100;
   d4148:	2200      	movs	r2, #0
   d414a:	4b2d      	ldr	r3, [pc, #180]	; (d4200 <loop+0xe8>)

  // print temp
  display.clearDisplay();
   d414c:	4c2d      	ldr	r4, [pc, #180]	; (d4204 <loop+0xec>)
  temperature = (voltage - 0.5) * 100;
   d414e:	4d2e      	ldr	r5, [pc, #184]	; (d4208 <loop+0xf0>)
   d4150:	f002 fafc 	bl	d674c <__aeabi_dsub>
   d4154:	4b2d      	ldr	r3, [pc, #180]	; (d420c <loop+0xf4>)
   d4156:	2200      	movs	r2, #0
   d4158:	f002 fcb0 	bl	d6abc <__aeabi_dmul>
   d415c:	e9c5 0100 	strd	r0, r1, [r5]
  display.clearDisplay();
   d4160:	4620      	mov	r0, r4
   d4162:	f000 febb 	bl	d4edc <_ZN16Adafruit_SSD130612clearDisplayEv>
  display.setTextSize(1);
   d4166:	4620      	mov	r0, r4
   d4168:	2101      	movs	r1, #1
   d416a:	f000 fca6 	bl	d4aba <_ZN12Adafruit_GFX11setTextSizeEh>
   d416e:	2200      	movs	r2, #0
   d4170:	f04f 1301 	mov.w	r3, #65537	; 0x10001
   d4174:	e9c4 2304 	strd	r2, r3, [r4, #16]
  display.setTextColor(WHITE);
  display.setCursor(0,0);
  display.print("Celsius: ");
   d4178:	4925      	ldr	r1, [pc, #148]	; (d4210 <loop+0xf8>)
   d417a:	4620      	mov	r0, r4
   d417c:	f001 fd50 	bl	d5c20 <_ZN5Print5printEPKc>
  display.print(temperature);
   d4180:	ed95 0b00 	vldr	d0, [r5]
   d4184:	2102      	movs	r1, #2
   d4186:	4620      	mov	r0, r4
   d4188:	f001 fe4e 	bl	d5e28 <_ZN5Print5printEdi>
  display.println(" C");
   d418c:	4921      	ldr	r1, [pc, #132]	; (d4214 <loop+0xfc>)
   d418e:	4620      	mov	r0, r4
   d4190:	f001 fd59 	bl	d5c46 <_ZN5Print7printlnEPKc>
  display.println();
   d4194:	4620      	mov	r0, r4
   d4196:	f001 fd4a 	bl	d5c2e <_ZN5Print7printlnEv>
  display.print("Fahrenheit: ");
   d419a:	491f      	ldr	r1, [pc, #124]	; (d4218 <loop+0x100>)
   d419c:	4620      	mov	r0, r4
   d419e:	f001 fd3f 	bl	d5c20 <_ZN5Print5printEPKc>
  display.print((temperature*9/5)+32);
   d41a2:	e9d5 0100 	ldrd	r0, r1, [r5]
   d41a6:	4b1d      	ldr	r3, [pc, #116]	; (d421c <loop+0x104>)
   d41a8:	2200      	movs	r2, #0
   d41aa:	f002 fc87 	bl	d6abc <__aeabi_dmul>
   d41ae:	4b1c      	ldr	r3, [pc, #112]	; (d4220 <loop+0x108>)
   d41b0:	2200      	movs	r2, #0
   d41b2:	f002 fdad 	bl	d6d10 <__aeabi_ddiv>
   d41b6:	4b1b      	ldr	r3, [pc, #108]	; (d4224 <loop+0x10c>)
   d41b8:	2200      	movs	r2, #0
   d41ba:	f002 fac9 	bl	d6750 <__adddf3>
   d41be:	ec41 0b10 	vmov	d0, r0, r1
   d41c2:	2102      	movs	r1, #2
   d41c4:	4620      	mov	r0, r4
   d41c6:	f001 fe2f 	bl	d5e28 <_ZN5Print5printEdi>
  display.println(" F ");
   d41ca:	4917      	ldr	r1, [pc, #92]	; (d4228 <loop+0x110>)
   d41cc:	4620      	mov	r0, r4
   d41ce:	f001 fd3a 	bl	d5c46 <_ZN5Print7printlnEPKc>
  display.display();
   d41d2:	4620      	mov	r0, r4
   d41d4:	f001 f8ee 	bl	d53b4 <_ZN16Adafruit_SSD13067displayEv>

  delay(300);
   d41d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  delay(300);
   d41dc:	f44f 7096 	mov.w	r0, #300	; 0x12c
   d41e0:	f001 be6e 	b.w	d5ec0 <delay>
   d41e4:	f3af 8000 	nop.w
   d41e8:	66666666 	.word	0x66666666
   d41ec:	400a6666 	.word	0x400a6666
   d41f0:	00000000 	.word	0x00000000
   d41f4:	40affe00 	.word	0x40affe00
   d41f8:	2003e630 	.word	0x2003e630
   d41fc:	2003e640 	.word	0x2003e640
   d4200:	3fe00000 	.word	0x3fe00000
   d4204:	2003e5c0 	.word	0x2003e5c0
   d4208:	2003e638 	.word	0x2003e638
   d420c:	40590000 	.word	0x40590000
   d4210:	000d716e 	.word	0x000d716e
   d4214:	000d7178 	.word	0x000d7178
   d4218:	000d717b 	.word	0x000d717b
   d421c:	40220000 	.word	0x40220000
   d4220:	40140000 	.word	0x40140000
   d4224:	40400000 	.word	0x40400000
   d4228:	000d7188 	.word	0x000d7188

000d422c <_GLOBAL__sub_I_SystemMode>:
   d422c:	b538      	push	{r3, r4, r5, lr}
              error_(SYSTEM_ERROR_NONE) {
   d422e:	4c0f      	ldr	r4, [pc, #60]	; (d426c <_GLOBAL__sub_I_SystemMode+0x40>)
    SleepResult() {}
   d4230:	4b0f      	ldr	r3, [pc, #60]	; (d4270 <_GLOBAL__sub_I_SystemMode+0x44>)
   d4232:	60a3      	str	r3, [r4, #8]
              error_(SYSTEM_ERROR_NONE) {
   d4234:	2500      	movs	r5, #0
   d4236:	6025      	str	r5, [r4, #0]
   d4238:	80a5      	strh	r5, [r4, #4]
    SleepResult() {}
   d423a:	71a5      	strb	r5, [r4, #6]
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d423c:	2003      	movs	r0, #3
   d423e:	f001 fae3 	bl	d5808 <set_system_mode>
SYSTEM_MODE(MANUAL);
   d4242:	4a0c      	ldr	r2, [pc, #48]	; (d4274 <_GLOBAL__sub_I_SystemMode+0x48>)
   d4244:	490c      	ldr	r1, [pc, #48]	; (d4278 <_GLOBAL__sub_I_SystemMode+0x4c>)
   d4246:	4620      	mov	r0, r4
OledWingAdafruit display;
   d4248:	4c0c      	ldr	r4, [pc, #48]	; (d427c <_GLOBAL__sub_I_SystemMode+0x50>)
SYSTEM_MODE(MANUAL);
   d424a:	f002 fa71 	bl	d6730 <__aeabi_atexit>
SYSTEM_THREAD(ENABLED);
   d424e:	4629      	mov	r1, r5
   d4250:	2001      	movs	r0, #1
   d4252:	f001 fae9 	bl	d5828 <system_thread_set_state>
OledWingAdafruit display;
   d4256:	2107      	movs	r1, #7
   d4258:	4620      	mov	r0, r4
   d425a:	f000 fc4f 	bl	d4afc <_ZN16OledWingAdafruitC1Ei>
   d425e:	4620      	mov	r0, r4
   d4260:	4a04      	ldr	r2, [pc, #16]	; (d4274 <_GLOBAL__sub_I_SystemMode+0x48>)
   d4262:	4907      	ldr	r1, [pc, #28]	; (d4280 <_GLOBAL__sub_I_SystemMode+0x54>)
   d4264:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
OledWingAdafruit display;
   d4268:	f002 ba62 	b.w	d6730 <__aeabi_atexit>
   d426c:	2003e5b4 	.word	0x2003e5b4
   d4270:	ffff0000 	.word	0xffff0000
   d4274:	2003e5b0 	.word	0x2003e5b0
   d4278:	000d40c5 	.word	0x000d40c5
   d427c:	2003e5c0 	.word	0x2003e5c0
   d4280:	000d4ac9 	.word	0x000d4ac9

000d4284 <_ZN8particle11SPISettingsD1Ev>:
  SPISettings()
  {
  }

  virtual ~SPISettings() {
  }
   d4284:	4770      	bx	lr

000d4286 <_ZN8particle11SPISettingsD0Ev>:
  virtual ~SPISettings() {
   d4286:	b510      	push	{r4, lr}
  }
   d4288:	2110      	movs	r1, #16
  virtual ~SPISettings() {
   d428a:	4604      	mov	r4, r0
  }
   d428c:	f002 fa55 	bl	d673a <_ZdlPvj>
   d4290:	4620      	mov	r0, r4
   d4292:	bd10      	pop	{r4, pc}

000d4294 <_ZN5Print6printfEPKcz>:
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   d4294:	b40e      	push	{r1, r2, r3}
   d4296:	b503      	push	{r0, r1, lr}
   d4298:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
   d429a:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   d429c:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   d42a0:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   d42a2:	f001 fdc4 	bl	d5e2e <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   d42a6:	b002      	add	sp, #8
   d42a8:	f85d eb04 	ldr.w	lr, [sp], #4
   d42ac:	b003      	add	sp, #12
   d42ae:	4770      	bx	lr

000d42b0 <_ZNK8particle11SPISettings7printToER5Print>:
  bool operator!=(const SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   d42b0:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d42b2:	4604      	mov	r4, r0
   d42b4:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   d42b6:	7922      	ldrb	r2, [r4, #4]
   d42b8:	68a3      	ldr	r3, [r4, #8]
   d42ba:	b132      	cbz	r2, d42ca <_ZNK8particle11SPISettings7printToER5Print+0x1a>
   d42bc:	b9a3      	cbnz	r3, d42e8 <_ZNK8particle11SPISettings7printToER5Print+0x38>
      return p.print("<SPISettings default>");
   d42be:	490b      	ldr	r1, [pc, #44]	; (d42ec <_ZNK8particle11SPISettings7printToER5Print+0x3c>)
    else
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
          bitOrder_ == MSBFIRST ? "MSB" : "LSB", (unsigned int)dataMode_);
  }
   d42c0:	b002      	add	sp, #8
   d42c2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return p.print("<SPISettings default>");
   d42c6:	f001 bcab 	b.w	d5c20 <_ZN5Print5printEPKc>
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   d42ca:	4a09      	ldr	r2, [pc, #36]	; (d42f0 <_ZNK8particle11SPISettings7printToER5Print+0x40>)
   d42cc:	7b26      	ldrb	r6, [r4, #12]
   d42ce:	4d09      	ldr	r5, [pc, #36]	; (d42f4 <_ZNK8particle11SPISettings7printToER5Print+0x44>)
   d42d0:	4909      	ldr	r1, [pc, #36]	; (d42f8 <_ZNK8particle11SPISettings7printToER5Print+0x48>)
   d42d2:	7b64      	ldrb	r4, [r4, #13]
   d42d4:	2e01      	cmp	r6, #1
   d42d6:	bf18      	it	ne
   d42d8:	4629      	movne	r1, r5
   d42da:	e9cd 1400 	strd	r1, r4, [sp]
   d42de:	4907      	ldr	r1, [pc, #28]	; (d42fc <_ZNK8particle11SPISettings7printToER5Print+0x4c>)
   d42e0:	f7ff ffd8 	bl	d4294 <_ZN5Print6printfEPKcz>
  }
   d42e4:	b002      	add	sp, #8
   d42e6:	bd70      	pop	{r4, r5, r6, pc}
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   d42e8:	4a05      	ldr	r2, [pc, #20]	; (d4300 <_ZNK8particle11SPISettings7printToER5Print+0x50>)
   d42ea:	e7ef      	b.n	d42cc <_ZNK8particle11SPISettings7printToER5Print+0x1c>
   d42ec:	000d719d 	.word	0x000d719d
   d42f0:	000d7177 	.word	0x000d7177
   d42f4:	000d7199 	.word	0x000d7199
   d42f8:	000d7195 	.word	0x000d7195
   d42fc:	000d71b3 	.word	0x000d71b3
   d4300:	000d718c 	.word	0x000d718c

000d4304 <_ZN12Adafruit_GFX9writeLineEsssst>:
    @param    y1  End point y coordinate
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::writeLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
        uint16_t color) {
   d4304:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d4308:	b085      	sub	sp, #20
   d430a:	461f      	mov	r7, r3
   d430c:	f9bd 8038 	ldrsh.w	r8, [sp, #56]	; 0x38
   d4310:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
#if defined(ESP8266)
    yield();
#endif
    int16_t steep = abs(y1 - y0) > abs(x1 - x0);
   d4314:	eba8 0902 	sub.w	r9, r8, r2
   d4318:	eba7 0a01 	sub.w	sl, r7, r1
   d431c:	f1b9 0f00 	cmp.w	r9, #0
   d4320:	bfb8      	it	lt
   d4322:	f1c9 0900 	rsblt	r9, r9, #0
   d4326:	f1ba 0f00 	cmp.w	sl, #0
   d432a:	bfb8      	it	lt
   d432c:	f1ca 0a00 	rsblt	sl, sl, #0
    if (steep) {
   d4330:	45d1      	cmp	r9, sl
        uint16_t color) {
   d4332:	4683      	mov	fp, r0
   d4334:	460c      	mov	r4, r1
   d4336:	4615      	mov	r5, r2
    if (steep) {
   d4338:	dd04      	ble.n	d4344 <_ZN12Adafruit_GFX9writeLineEsssst+0x40>
   d433a:	463a      	mov	r2, r7
        _swap_int16_t(x0, y0);
   d433c:	462c      	mov	r4, r5
        _swap_int16_t(x1, y1);
   d433e:	4647      	mov	r7, r8
        _swap_int16_t(x0, y0);
   d4340:	460d      	mov	r5, r1
        _swap_int16_t(x1, y1);
   d4342:	4690      	mov	r8, r2
    }

    if (x0 > x1) {
   d4344:	42bc      	cmp	r4, r7
   d4346:	dd05      	ble.n	d4354 <_ZN12Adafruit_GFX9writeLineEsssst+0x50>
   d4348:	462a      	mov	r2, r5
        _swap_int16_t(x0, x1);
        _swap_int16_t(y0, y1);
   d434a:	4645      	mov	r5, r8
   d434c:	4690      	mov	r8, r2
    if (x0 > x1) {
   d434e:	4622      	mov	r2, r4
   d4350:	463c      	mov	r4, r7
   d4352:	4617      	mov	r7, r2
    }

    int16_t dx, dy;
    dx = x1 - x0;
   d4354:	1b3e      	subs	r6, r7, r4
   d4356:	b2b2      	uxth	r2, r6
   d4358:	9200      	str	r2, [sp, #0]
    dy = abs(y1 - y0);
   d435a:	eba8 0205 	sub.w	r2, r8, r5
   d435e:	2a00      	cmp	r2, #0
   d4360:	bfb8      	it	lt
   d4362:	4252      	neglt	r2, r2
   d4364:	9201      	str	r2, [sp, #4]

    int16_t err = dx / 2;
   d4366:	f3c6 32c0 	ubfx	r2, r6, #15, #1
   d436a:	fa02 f686 	sxtah	r6, r2, r6
    int16_t ystep;

    if (y0 < y1) {
        ystep = 1;
    } else {
        ystep = -1;
   d436e:	4545      	cmp	r5, r8
   d4370:	bfb4      	ite	lt
   d4372:	2201      	movlt	r2, #1
   d4374:	f04f 32ff 	movge.w	r2, #4294967295
    int16_t err = dx / 2;
   d4378:	1076      	asrs	r6, r6, #1
        ystep = -1;
   d437a:	9202      	str	r2, [sp, #8]
    }

    for (; x0<=x1; x0++) {
   d437c:	42bc      	cmp	r4, r7
   d437e:	dc1c      	bgt.n	d43ba <_ZN12Adafruit_GFX9writeLineEsssst+0xb6>
        if (steep) {
   d4380:	f8db 2000 	ldr.w	r2, [fp]
            writePixel(y0, x0, color);
   d4384:	9303      	str	r3, [sp, #12]
        if (steep) {
   d4386:	45d1      	cmp	r9, sl
            writePixel(y0, x0, color);
   d4388:	f8d2 8018 	ldr.w	r8, [r2, #24]
   d438c:	bfc7      	ittee	gt
   d438e:	4629      	movgt	r1, r5
   d4390:	4622      	movgt	r2, r4
        } else {
            writePixel(x0, y0, color);
   d4392:	462a      	movle	r2, r5
   d4394:	4621      	movle	r1, r4
   d4396:	4658      	mov	r0, fp
   d4398:	47c0      	blx	r8
        }
        err -= dy;
   d439a:	9a01      	ldr	r2, [sp, #4]
            writePixel(x0, y0, color);
   d439c:	9b03      	ldr	r3, [sp, #12]
        err -= dy;
   d439e:	1ab6      	subs	r6, r6, r2
   d43a0:	b2b1      	uxth	r1, r6
   d43a2:	b236      	sxth	r6, r6
        if (err < 0) {
   d43a4:	2e00      	cmp	r6, #0
   d43a6:	da05      	bge.n	d43b4 <_ZN12Adafruit_GFX9writeLineEsssst+0xb0>
            y0 += ystep;
   d43a8:	9a02      	ldr	r2, [sp, #8]
   d43aa:	4415      	add	r5, r2
            err += dx;
   d43ac:	9a00      	ldr	r2, [sp, #0]
   d43ae:	1856      	adds	r6, r2, r1
            y0 += ystep;
   d43b0:	b22d      	sxth	r5, r5
            err += dx;
   d43b2:	b236      	sxth	r6, r6
    for (; x0<=x1; x0++) {
   d43b4:	3401      	adds	r4, #1
   d43b6:	b224      	sxth	r4, r4
   d43b8:	e7e0      	b.n	d437c <_ZN12Adafruit_GFX9writeLineEsssst+0x78>
        }
    }
}
   d43ba:	b005      	add	sp, #20
   d43bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d43c0 <_ZN12Adafruit_GFX10startWriteEv>:
/*!
   @brief    Start a display-writing routine, overwrite in subclasses.
*/
/**************************************************************************/
void Adafruit_GFX::startWrite(){
}
   d43c0:	4770      	bx	lr

000d43c2 <_ZN12Adafruit_GFX10writePixelEsst>:
    @param   x   x coordinate
    @param   y   y coordinate
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writePixel(int16_t x, int16_t y, uint16_t color){
   d43c2:	b410      	push	{r4}
    drawPixel(x, y, color);
   d43c4:	6804      	ldr	r4, [r0, #0]
   d43c6:	6924      	ldr	r4, [r4, #16]
   d43c8:	46a4      	mov	ip, r4
}
   d43ca:	f85d 4b04 	ldr.w	r4, [sp], #4
    drawPixel(x, y, color);
   d43ce:	4760      	bx	ip

000d43d0 <_ZN12Adafruit_GFX14writeFastVLineEssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFastVLine(int16_t x, int16_t y,
        int16_t h, uint16_t color) {
   d43d0:	b430      	push	{r4, r5}
    // Overwrite in subclasses if startWrite is defined!
    // Can be just writeLine(x, y, x, y+h-1, color);
    // or writeFillRect(x, y, 1, h, color);
    drawFastVLine(x, y, h, color);
   d43d2:	6804      	ldr	r4, [r0, #0]
        int16_t h, uint16_t color) {
   d43d4:	f8bd 5008 	ldrh.w	r5, [sp, #8]
    drawFastVLine(x, y, h, color);
   d43d8:	9502      	str	r5, [sp, #8]
   d43da:	6ba4      	ldr	r4, [r4, #56]	; 0x38
   d43dc:	46a4      	mov	ip, r4
}
   d43de:	bc30      	pop	{r4, r5}
    drawFastVLine(x, y, h, color);
   d43e0:	4760      	bx	ip

000d43e2 <_ZN12Adafruit_GFX14writeFastHLineEssst>:
    @param    w   Width in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFastHLine(int16_t x, int16_t y,
        int16_t w, uint16_t color) {
   d43e2:	b430      	push	{r4, r5}
    // Overwrite in subclasses if startWrite is defined!
    // Example: writeLine(x, y, x+w-1, y, color);
    // or writeFillRect(x, y, w, 1, color);
    drawFastHLine(x, y, w, color);
   d43e4:	6804      	ldr	r4, [r0, #0]
        int16_t w, uint16_t color) {
   d43e6:	f8bd 5008 	ldrh.w	r5, [sp, #8]
    drawFastHLine(x, y, w, color);
   d43ea:	9502      	str	r5, [sp, #8]
   d43ec:	6be4      	ldr	r4, [r4, #60]	; 0x3c
   d43ee:	46a4      	mov	ip, r4
}
   d43f0:	bc30      	pop	{r4, r5}
    drawFastHLine(x, y, w, color);
   d43f2:	4760      	bx	ip

000d43f4 <_ZN12Adafruit_GFX13writeFillRectEsssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFillRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   d43f4:	b470      	push	{r4, r5, r6}
   d43f6:	f9bd 500c 	ldrsh.w	r5, [sp, #12]
   d43fa:	f8bd 6010 	ldrh.w	r6, [sp, #16]
    // Overwrite in subclasses if desired!
    fillRect(x,y,w,h,color);
   d43fe:	6804      	ldr	r4, [r0, #0]
   d4400:	e9cd 5603 	strd	r5, r6, [sp, #12]
   d4404:	6c24      	ldr	r4, [r4, #64]	; 0x40
   d4406:	46a4      	mov	ip, r4
}
   d4408:	bc70      	pop	{r4, r5, r6}
    fillRect(x,y,w,h,color);
   d440a:	4760      	bx	ip

000d440c <_ZN12Adafruit_GFX13drawFastVLineEssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::drawFastVLine(int16_t x, int16_t y,
        int16_t h, uint16_t color) {
   d440c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d4410:	461c      	mov	r4, r3
    startWrite();
   d4412:	6803      	ldr	r3, [r0, #0]
        int16_t h, uint16_t color) {
   d4414:	f8bd 8020 	ldrh.w	r8, [sp, #32]
    startWrite();
   d4418:	695b      	ldr	r3, [r3, #20]
        int16_t h, uint16_t color) {
   d441a:	4605      	mov	r5, r0
   d441c:	4616      	mov	r6, r2
    writeLine(x, y, x, y+h-1, color);
   d441e:	3c01      	subs	r4, #1
   d4420:	4434      	add	r4, r6
        int16_t h, uint16_t color) {
   d4422:	460f      	mov	r7, r1
    writeLine(x, y, x, y+h-1, color);
   d4424:	b224      	sxth	r4, r4
    startWrite();
   d4426:	4798      	blx	r3
    writeLine(x, y, x, y+h-1, color);
   d4428:	682b      	ldr	r3, [r5, #0]
   d442a:	f8cd 8004 	str.w	r8, [sp, #4]
   d442e:	9400      	str	r4, [sp, #0]
   d4430:	6a9c      	ldr	r4, [r3, #40]	; 0x28
   d4432:	4628      	mov	r0, r5
   d4434:	463b      	mov	r3, r7
   d4436:	4632      	mov	r2, r6
   d4438:	4639      	mov	r1, r7
   d443a:	47a0      	blx	r4
    endWrite();
   d443c:	682b      	ldr	r3, [r5, #0]
   d443e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4440:	4628      	mov	r0, r5
}
   d4442:	b002      	add	sp, #8
   d4444:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    endWrite();
   d4448:	4718      	bx	r3

000d444a <_ZN12Adafruit_GFX13drawFastHLineEssst>:
    @param    w   Width in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::drawFastHLine(int16_t x, int16_t y,
        int16_t w, uint16_t color) {
   d444a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d444e:	461d      	mov	r5, r3
    startWrite();
   d4450:	6803      	ldr	r3, [r0, #0]
        int16_t w, uint16_t color) {
   d4452:	f8bd 8020 	ldrh.w	r8, [sp, #32]
    startWrite();
   d4456:	695b      	ldr	r3, [r3, #20]
        int16_t w, uint16_t color) {
   d4458:	4604      	mov	r4, r0
   d445a:	4617      	mov	r7, r2
   d445c:	460e      	mov	r6, r1
    startWrite();
   d445e:	4798      	blx	r3
    writeLine(x, y, x+w-1, y, color);
   d4460:	e9cd 7800 	strd	r7, r8, [sp]
   d4464:	6822      	ldr	r2, [r4, #0]
   d4466:	1e6b      	subs	r3, r5, #1
   d4468:	4433      	add	r3, r6
   d446a:	6a95      	ldr	r5, [r2, #40]	; 0x28
   d446c:	4620      	mov	r0, r4
   d446e:	b21b      	sxth	r3, r3
   d4470:	463a      	mov	r2, r7
   d4472:	4631      	mov	r1, r6
   d4474:	47a8      	blx	r5
    endWrite();
   d4476:	6823      	ldr	r3, [r4, #0]
   d4478:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d447a:	4620      	mov	r0, r4
}
   d447c:	b002      	add	sp, #8
   d447e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    endWrite();
   d4482:	4718      	bx	r3

000d4484 <_ZN12Adafruit_GFX8fillRectEsssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   d4484:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   d4488:	461e      	mov	r6, r3
    startWrite();
   d448a:	6803      	ldr	r3, [r0, #0]
        uint16_t color) {
   d448c:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
    startWrite();
   d4490:	695b      	ldr	r3, [r3, #20]
        uint16_t color) {
   d4492:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
   d4496:	460c      	mov	r4, r1
   d4498:	4605      	mov	r5, r0
   d449a:	4617      	mov	r7, r2
    startWrite();
   d449c:	4798      	blx	r3
    for (int16_t i=x; i<x+w; i++) {
   d449e:	4426      	add	r6, r4
   d44a0:	42b4      	cmp	r4, r6
   d44a2:	682b      	ldr	r3, [r5, #0]
   d44a4:	da0b      	bge.n	d44be <_ZN12Adafruit_GFX8fillRectEsssst+0x3a>
        writeFastVLine(i, y, h, color);
   d44a6:	f8cd 8000 	str.w	r8, [sp]
   d44aa:	f8d3 a020 	ldr.w	sl, [r3, #32]
   d44ae:	4621      	mov	r1, r4
   d44b0:	464b      	mov	r3, r9
   d44b2:	463a      	mov	r2, r7
   d44b4:	4628      	mov	r0, r5
   d44b6:	3401      	adds	r4, #1
   d44b8:	47d0      	blx	sl
    for (int16_t i=x; i<x+w; i++) {
   d44ba:	b224      	sxth	r4, r4
   d44bc:	e7f0      	b.n	d44a0 <_ZN12Adafruit_GFX8fillRectEsssst+0x1c>
    }
    endWrite();
   d44be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d44c0:	4628      	mov	r0, r5
}
   d44c2:	b002      	add	sp, #8
   d44c4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    endWrite();
   d44c8:	4718      	bx	r3

000d44ca <_ZN12Adafruit_GFX10fillScreenEt>:
/*!
   @brief    Fill the screen completely with one color. Update in subclasses if desired!
    @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillScreen(uint16_t color) {
   d44ca:	b513      	push	{r0, r1, r4, lr}
    fillRect(0, 0, _width, _height, color);
   d44cc:	6802      	ldr	r2, [r0, #0]
   d44ce:	9101      	str	r1, [sp, #4]
   d44d0:	f9b0 100e 	ldrsh.w	r1, [r0, #14]
   d44d4:	9100      	str	r1, [sp, #0]
   d44d6:	6c14      	ldr	r4, [r2, #64]	; 0x40
   d44d8:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   d44dc:	2200      	movs	r2, #0
   d44de:	4611      	mov	r1, r2
   d44e0:	47a0      	blx	r4
}
   d44e2:	b002      	add	sp, #8
   d44e4:	bd10      	pop	{r4, pc}

000d44e6 <_ZN12Adafruit_GFX8drawRectEsssst>:
    @param    h   Height in pixels
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::drawRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   d44e6:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   d44ea:	461d      	mov	r5, r3
    startWrite();
   d44ec:	6803      	ldr	r3, [r0, #0]
        uint16_t color) {
   d44ee:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
    startWrite();
   d44f2:	695b      	ldr	r3, [r3, #20]
        uint16_t color) {
   d44f4:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
   d44f8:	4604      	mov	r4, r0
   d44fa:	460f      	mov	r7, r1
   d44fc:	4616      	mov	r6, r2
    startWrite();
   d44fe:	4798      	blx	r3
    writeFastHLine(x, y, w, color);
   d4500:	6823      	ldr	r3, [r4, #0]
   d4502:	f8cd 8000 	str.w	r8, [sp]
   d4506:	f8d3 a024 	ldr.w	sl, [r3, #36]	; 0x24
   d450a:	4632      	mov	r2, r6
   d450c:	462b      	mov	r3, r5
   d450e:	4639      	mov	r1, r7
   d4510:	4620      	mov	r0, r4
   d4512:	47d0      	blx	sl
    writeFastHLine(x, y+h-1, w, color);
   d4514:	6823      	ldr	r3, [r4, #0]
   d4516:	f8cd 8000 	str.w	r8, [sp]
   d451a:	f109 32ff 	add.w	r2, r9, #4294967295
   d451e:	4432      	add	r2, r6
   d4520:	f8d3 a024 	ldr.w	sl, [r3, #36]	; 0x24
   d4524:	4639      	mov	r1, r7
   d4526:	462b      	mov	r3, r5
   d4528:	4620      	mov	r0, r4
   d452a:	b212      	sxth	r2, r2
   d452c:	47d0      	blx	sl
    writeFastVLine(x, y, h, color);
   d452e:	6823      	ldr	r3, [r4, #0]
   d4530:	f8cd 8000 	str.w	r8, [sp]
   d4534:	f8d3 a020 	ldr.w	sl, [r3, #32]
   d4538:	4632      	mov	r2, r6
   d453a:	464b      	mov	r3, r9
   d453c:	4639      	mov	r1, r7
   d453e:	4620      	mov	r0, r4
   d4540:	47d0      	blx	sl
    writeFastVLine(x+w-1, y, h, color);
   d4542:	1e6b      	subs	r3, r5, #1
   d4544:	19d9      	adds	r1, r3, r7
   d4546:	6823      	ldr	r3, [r4, #0]
   d4548:	f8cd 8000 	str.w	r8, [sp]
   d454c:	6a1d      	ldr	r5, [r3, #32]
   d454e:	4620      	mov	r0, r4
   d4550:	464b      	mov	r3, r9
   d4552:	4632      	mov	r2, r6
   d4554:	b209      	sxth	r1, r1
   d4556:	47a8      	blx	r5
    endWrite();
   d4558:	6823      	ldr	r3, [r4, #0]
   d455a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d455c:	4620      	mov	r0, r4
}
   d455e:	b002      	add	sp, #8
   d4560:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    endWrite();
   d4564:	4718      	bx	r3

000d4566 <_ZN12Adafruit_GFX13invertDisplayEb>:
    @param   i  True if you want to invert, false to make 'normal'
*/
/**************************************************************************/
void Adafruit_GFX::invertDisplay(boolean i) {
    // Do nothing, must be subclassed if supported by hardware
}
   d4566:	4770      	bx	lr

000d4568 <_ZN12Adafruit_GFX8drawLineEsssst>:
        uint16_t color) {
   d4568:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    if(x0 == x1){
   d456c:	4299      	cmp	r1, r3
        uint16_t color) {
   d456e:	4616      	mov	r6, r2
   d4570:	f9bd 7028 	ldrsh.w	r7, [sp, #40]	; 0x28
   d4574:	f8bd 902c 	ldrh.w	r9, [sp, #44]	; 0x2c
   d4578:	6802      	ldr	r2, [r0, #0]
   d457a:	4680      	mov	r8, r0
   d457c:	460d      	mov	r5, r1
   d457e:	461c      	mov	r4, r3
    if(x0 == x1){
   d4580:	d113      	bne.n	d45aa <_ZN12Adafruit_GFX8drawLineEsssst+0x42>
        if(y0 > y1) _swap_int16_t(y0, y1);
   d4582:	42be      	cmp	r6, r7
   d4584:	bfc8      	it	gt
   d4586:	4633      	movgt	r3, r6
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
   d4588:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
        if(y0 > y1) _swap_int16_t(y0, y1);
   d458c:	bfc4      	itt	gt
   d458e:	463e      	movgt	r6, r7
   d4590:	461f      	movgt	r7, r3
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
   d4592:	1c7b      	adds	r3, r7, #1
   d4594:	6b94      	ldr	r4, [r2, #56]	; 0x38
   d4596:	1b9b      	subs	r3, r3, r6
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
   d4598:	b21b      	sxth	r3, r3
   d459a:	4632      	mov	r2, r6
   d459c:	4629      	mov	r1, r5
   d459e:	4640      	mov	r0, r8
   d45a0:	46a4      	mov	ip, r4
}
   d45a2:	b003      	add	sp, #12
   d45a4:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
   d45a8:	4760      	bx	ip
    } else if(y0 == y1){
   d45aa:	42be      	cmp	r6, r7
   d45ac:	d10a      	bne.n	d45c4 <_ZN12Adafruit_GFX8drawLineEsssst+0x5c>
        if(x0 > x1) _swap_int16_t(x0, x1);
   d45ae:	4299      	cmp	r1, r3
   d45b0:	bfc2      	ittt	gt
   d45b2:	460b      	movgt	r3, r1
   d45b4:	4625      	movgt	r5, r4
   d45b6:	461c      	movgt	r4, r3
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
   d45b8:	1c63      	adds	r3, r4, #1
   d45ba:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
   d45be:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   d45c0:	1b5b      	subs	r3, r3, r5
   d45c2:	e7e9      	b.n	d4598 <_ZN12Adafruit_GFX8drawLineEsssst+0x30>
        startWrite();
   d45c4:	6953      	ldr	r3, [r2, #20]
   d45c6:	4798      	blx	r3
        writeLine(x0, y0, x1, y1, color);
   d45c8:	e9cd 7900 	strd	r7, r9, [sp]
   d45cc:	f8d8 3000 	ldr.w	r3, [r8]
   d45d0:	4640      	mov	r0, r8
   d45d2:	6a9f      	ldr	r7, [r3, #40]	; 0x28
   d45d4:	4632      	mov	r2, r6
   d45d6:	4623      	mov	r3, r4
   d45d8:	4629      	mov	r1, r5
   d45da:	47b8      	blx	r7
        endWrite();
   d45dc:	f8d8 3000 	ldr.w	r3, [r8]
   d45e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d45e2:	4640      	mov	r0, r8
}
   d45e4:	b003      	add	sp, #12
   d45e6:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        endWrite();
   d45ea:	4718      	bx	r3

000d45ec <_ZN12Adafruit_GFX11setRotationEh>:
    rotation = (x & 3);
   d45ec:	f001 0303 	and.w	r3, r1, #3
   d45f0:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
   d45f4:	7683      	strb	r3, [r0, #26]
    switch(rotation) {
   d45f6:	07c9      	lsls	r1, r1, #31
            _width  = WIDTH;
   d45f8:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
   d45fc:	bf59      	ittee	pl
   d45fe:	8183      	strhpl	r3, [r0, #12]
            _height = HEIGHT;
   d4600:	81c2      	strhpl	r2, [r0, #14]
            _width  = HEIGHT;
   d4602:	8182      	strhmi	r2, [r0, #12]
            _height = WIDTH;
   d4604:	81c3      	strhmi	r3, [r0, #14]
}
   d4606:	4770      	bx	lr

000d4608 <_ZN12Adafruit_GFXC1Ess>:
Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h):
   d4608:	b530      	push	{r4, r5, lr}
WIDTH(w), HEIGHT(h)
   d460a:	8142      	strh	r2, [r0, #10]
    _height   = HEIGHT;
   d460c:	81c2      	strh	r2, [r0, #14]
    textsize_x = textsize_y  = 1;
   d460e:	4a07      	ldr	r2, [pc, #28]	; (d462c <_ZN12Adafruit_GFXC1Ess+0x24>)
WIDTH(w), HEIGHT(h)
   d4610:	4d07      	ldr	r5, [pc, #28]	; (d4630 <_ZN12Adafruit_GFXC1Ess+0x28>)
   d4612:	8101      	strh	r1, [r0, #8]
    Print() : write_error(0) {}
   d4614:	2400      	movs	r4, #0
    _width    = WIDTH;
   d4616:	8181      	strh	r1, [r0, #12]
    textsize_x = textsize_y  = 1;
   d4618:	f04f 31ff 	mov.w	r1, #4294967295
   d461c:	e9c0 1205 	strd	r1, r2, [r0, #20]
   d4620:	6044      	str	r4, [r0, #4]
WIDTH(w), HEIGHT(h)
   d4622:	6005      	str	r5, [r0, #0]
    cursor_y  = cursor_x    = 0;
   d4624:	6104      	str	r4, [r0, #16]
    _cp437    = false;
   d4626:	7704      	strb	r4, [r0, #28]
    gfxFont   = NULL;
   d4628:	6204      	str	r4, [r0, #32]
}
   d462a:	bd30      	pop	{r4, r5, pc}
   d462c:	01000101 	.word	0x01000101
   d4630:	000d76d8 	.word	0x000d76d8

000d4634 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>:
  const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color) {
   d4634:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d4638:	b089      	sub	sp, #36	; 0x24
   d463a:	e9cd 1202 	strd	r1, r2, [sp, #8]
    startWrite();
   d463e:	6802      	ldr	r2, [r0, #0]
  const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color) {
   d4640:	f9bd 8048 	ldrsh.w	r8, [sp, #72]	; 0x48
   d4644:	9304      	str	r3, [sp, #16]
   d4646:	f9bd 304c 	ldrsh.w	r3, [sp, #76]	; 0x4c
    startWrite();
   d464a:	6952      	ldr	r2, [r2, #20]
  const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color) {
   d464c:	9305      	str	r3, [sp, #20]
   d464e:	f8bd a050 	ldrh.w	sl, [sp, #80]	; 0x50
   d4652:	4604      	mov	r4, r0
    startWrite();
   d4654:	4790      	blx	r2
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
   d4656:	f118 0207 	adds.w	r2, r8, #7
    startWrite();
   d465a:	f04f 0600 	mov.w	r6, #0
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
   d465e:	bf48      	it	mi
   d4660:	f108 020e 	addmi.w	r2, r8, #14
   d4664:	ea4f 0be2 	mov.w	fp, r2, asr #3
    startWrite();
   d4668:	9601      	str	r6, [sp, #4]
    uint8_t byte = 0;
   d466a:	4635      	mov	r5, r6
   d466c:	9b03      	ldr	r3, [sp, #12]
   d466e:	9a01      	ldr	r2, [sp, #4]
    for(int16_t j=0; j<h; j++, y++) {
   d4670:	f9bd 1004 	ldrsh.w	r1, [sp, #4]
   d4674:	189a      	adds	r2, r3, r2
   d4676:	9b05      	ldr	r3, [sp, #20]
   d4678:	428b      	cmp	r3, r1
   d467a:	b212      	sxth	r2, r2
   d467c:	dd27      	ble.n	d46ce <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x9a>
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   d467e:	9b04      	ldr	r3, [sp, #16]
   d4680:	4433      	add	r3, r6
    for(int16_t j=0; j<h; j++, y++) {
   d4682:	f04f 0900 	mov.w	r9, #0
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   d4686:	9306      	str	r3, [sp, #24]
   d4688:	fa0f f089 	sxth.w	r0, r9
        for(int16_t i=0; i<w; i++) {
   d468c:	4580      	cmp	r8, r0
   d468e:	fa1f f189 	uxth.w	r1, r9
   d4692:	dd17      	ble.n	d46c4 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x90>
            if(i & 7) byte <<= 1;
   d4694:	074f      	lsls	r7, r1, #29
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   d4696:	bf05      	ittet	eq
   d4698:	9b06      	ldreq	r3, [sp, #24]
   d469a:	10c0      	asreq	r0, r0, #3
            if(i & 7) byte <<= 1;
   d469c:	006d      	lslne	r5, r5, #1
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   d469e:	5c1d      	ldrbeq	r5, [r3, r0]
            if(i & 7) byte <<= 1;
   d46a0:	bf18      	it	ne
   d46a2:	b2ed      	uxtbne	r5, r5
            if(byte & 0x80) writePixel(x+i, y, color);
   d46a4:	062b      	lsls	r3, r5, #24
   d46a6:	d50a      	bpl.n	d46be <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x8a>
   d46a8:	9b02      	ldr	r3, [sp, #8]
   d46aa:	6820      	ldr	r0, [r4, #0]
   d46ac:	9207      	str	r2, [sp, #28]
   d46ae:	4419      	add	r1, r3
   d46b0:	6983      	ldr	r3, [r0, #24]
   d46b2:	b209      	sxth	r1, r1
   d46b4:	461f      	mov	r7, r3
   d46b6:	4620      	mov	r0, r4
   d46b8:	4653      	mov	r3, sl
   d46ba:	47b8      	blx	r7
   d46bc:	9a07      	ldr	r2, [sp, #28]
        for(int16_t i=0; i<w; i++) {
   d46be:	f109 0901 	add.w	r9, r9, #1
   d46c2:	e7e1      	b.n	d4688 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x54>
    for(int16_t j=0; j<h; j++, y++) {
   d46c4:	9b01      	ldr	r3, [sp, #4]
   d46c6:	3301      	adds	r3, #1
   d46c8:	9301      	str	r3, [sp, #4]
   d46ca:	445e      	add	r6, fp
   d46cc:	e7ce      	b.n	d466c <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x38>
    endWrite();
   d46ce:	6823      	ldr	r3, [r4, #0]
   d46d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d46d2:	4620      	mov	r0, r4
}
   d46d4:	b009      	add	sp, #36	; 0x24
   d46d6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    endWrite();
   d46da:	4718      	bx	r3

000d46dc <_ZN12Adafruit_GFX8drawCharEsshtthh>:
  uint16_t color, uint16_t bg, uint8_t size_x, uint8_t size_y) {
   d46dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d46e0:	ed2d 8b02 	vpush	{d8}
   d46e4:	b091      	sub	sp, #68	; 0x44
   d46e6:	4616      	mov	r6, r2
    if(!gfxFont) { // 'Classic' built-in font
   d46e8:	6a02      	ldr	r2, [r0, #32]
  uint16_t color, uint16_t bg, uint8_t size_x, uint8_t size_y) {
   d46ea:	f8bd 8074 	ldrh.w	r8, [sp, #116]	; 0x74
   d46ee:	f89d 5078 	ldrb.w	r5, [sp, #120]	; 0x78
   d46f2:	f89d 407c 	ldrb.w	r4, [sp, #124]	; 0x7c
   d46f6:	9103      	str	r1, [sp, #12]
   d46f8:	461f      	mov	r7, r3
   d46fa:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
   d46fe:	9304      	str	r3, [sp, #16]
   d4700:	4683      	mov	fp, r0
    if(!gfxFont) { // 'Classic' built-in font
   d4702:	2a00      	cmp	r2, #0
   d4704:	f040 80c5 	bne.w	d4892 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1b6>
        if((x >= _width)            || // Clip right
   d4708:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   d470c:	428b      	cmp	r3, r1
   d470e:	f340 814c 	ble.w	d49aa <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
   d4712:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
   d4716:	42b3      	cmp	r3, r6
   d4718:	f340 8147 	ble.w	d49aa <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
           ((x + 6 * size_x - 1) < 0) || // Clip left
   d471c:	2306      	movs	r3, #6
   d471e:	fb13 1305 	smlabb	r3, r3, r5, r1
           (y >= _height)           || // Clip bottom
   d4722:	2b00      	cmp	r3, #0
   d4724:	f340 8141 	ble.w	d49aa <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
           ((y + 8 * size_y - 1) < 0))   // Clip top
   d4728:	eb06 03c4 	add.w	r3, r6, r4, lsl #3
           ((x + 6 * size_x - 1) < 0) || // Clip left
   d472c:	2b00      	cmp	r3, #0
   d472e:	f340 813c 	ble.w	d49aa <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
        if(!_cp437 && (c >= 176)) c++; // Handle 'classic' charset behavior
   d4732:	7f03      	ldrb	r3, [r0, #28]
   d4734:	b91b      	cbnz	r3, d473e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x62>
   d4736:	2faf      	cmp	r7, #175	; 0xaf
   d4738:	bf84      	itt	hi
   d473a:	3701      	addhi	r7, #1
   d473c:	b2ff      	uxtbhi	r7, r7
        startWrite();
   d473e:	f8db 3000 	ldr.w	r3, [fp]
   d4742:	4658      	mov	r0, fp
   d4744:	695b      	ldr	r3, [r3, #20]
   d4746:	4798      	blx	r3
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
   d4748:	2205      	movs	r2, #5
   d474a:	9209      	str	r2, [sp, #36]	; 0x24
        for(int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
   d474c:	2200      	movs	r2, #0
   d474e:	9205      	str	r2, [sp, #20]
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
   d4750:	4a98      	ldr	r2, [pc, #608]	; (d49b4 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2d8>)
   d4752:	eb07 0387 	add.w	r3, r7, r7, lsl #2
   d4756:	18d3      	adds	r3, r2, r3
   d4758:	930c      	str	r3, [sp, #48]	; 0x30
   d475a:	b2b3      	uxth	r3, r6
   d475c:	9306      	str	r3, [sp, #24]
   d475e:	9a05      	ldr	r2, [sp, #20]
   d4760:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   d4762:	5c9b      	ldrb	r3, [r3, r2]
   d4764:	9307      	str	r3, [sp, #28]
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   d4766:	b2ab      	uxth	r3, r5
   d4768:	930b      	str	r3, [sp, #44]	; 0x2c
   d476a:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   d476e:	9308      	str	r3, [sp, #32]
   d4770:	9b03      	ldr	r3, [sp, #12]
   d4772:	fb02 f905 	mul.w	r9, r2, r5
   d4776:	fa19 f983 	uxtah	r9, r9, r3
   d477a:	fa0f f389 	sxth.w	r3, r9
   d477e:	ee08 3a10 	vmov	s16, r3
   d4782:	2308      	movs	r3, #8
   d4784:	930a      	str	r3, [sp, #40]	; 0x28
                        writePixel(x+i, y+j, bg);
   d4786:	9b03      	ldr	r3, [sp, #12]
   d4788:	eb02 0a03 	add.w	sl, r2, r3
            for(int8_t j=0; j<8; j++, line >>= 1) {
   d478c:	f04f 0900 	mov.w	r9, #0
                        writePixel(x+i, y+j, bg);
   d4790:	fa0f fa8a 	sxth.w	sl, sl
                if(line & 1) {
   d4794:	9a07      	ldr	r2, [sp, #28]
   d4796:	f8db 3000 	ldr.w	r3, [fp]
   d479a:	07d2      	lsls	r2, r2, #31
   d479c:	d552      	bpl.n	d4844 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x168>
                    if(size_x == 1 && size_y == 1)
   d479e:	2d01      	cmp	r5, #1
   d47a0:	fa1f f289 	uxth.w	r2, r9
   d47a4:	d13e      	bne.n	d4824 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x148>
   d47a6:	2c01      	cmp	r4, #1
   d47a8:	d13c      	bne.n	d4824 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x148>
                        writePixel(x+i, y+j, color);
   d47aa:	699b      	ldr	r3, [r3, #24]
   d47ac:	9906      	ldr	r1, [sp, #24]
   d47ae:	461f      	mov	r7, r3
   d47b0:	9b04      	ldr	r3, [sp, #16]
   d47b2:	440a      	add	r2, r1
                        writePixel(x+i, y+j, bg);
   d47b4:	b212      	sxth	r2, r2
   d47b6:	4651      	mov	r1, sl
   d47b8:	4658      	mov	r0, fp
   d47ba:	47b8      	blx	r7
            for(int8_t j=0; j<8; j++, line >>= 1) {
   d47bc:	f109 0301 	add.w	r3, r9, #1
   d47c0:	fa4f f983 	sxtb.w	r9, r3
   d47c4:	9b07      	ldr	r3, [sp, #28]
   d47c6:	085b      	lsrs	r3, r3, #1
   d47c8:	9307      	str	r3, [sp, #28]
   d47ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d47cc:	3b01      	subs	r3, #1
   d47ce:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   d47d2:	930a      	str	r3, [sp, #40]	; 0x28
   d47d4:	d1de      	bne.n	d4794 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xb8>
        for(int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
   d47d6:	9f05      	ldr	r7, [sp, #20]
   d47d8:	3701      	adds	r7, #1
   d47da:	b27b      	sxtb	r3, r7
   d47dc:	9305      	str	r3, [sp, #20]
   d47de:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d47e0:	3b01      	subs	r3, #1
   d47e2:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   d47e6:	9309      	str	r3, [sp, #36]	; 0x24
   d47e8:	d1b9      	bne.n	d475e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x82>
        if(bg != color) { // If opaque, draw vertical line for last column
   d47ea:	9b04      	ldr	r3, [sp, #16]
   d47ec:	4543      	cmp	r3, r8
   d47ee:	d00f      	beq.n	d4810 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
            if(size_x == 1 && size_y == 1) writeFastVLine(x+5, y, 8, bg);
   d47f0:	2d01      	cmp	r5, #1
   d47f2:	f8db 3000 	ldr.w	r3, [fp]
   d47f6:	d13b      	bne.n	d4870 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x194>
   d47f8:	2c01      	cmp	r4, #1
   d47fa:	d139      	bne.n	d4870 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x194>
   d47fc:	9908      	ldr	r1, [sp, #32]
   d47fe:	f8cd 8000 	str.w	r8, [sp]
   d4802:	3105      	adds	r1, #5
   d4804:	6a1c      	ldr	r4, [r3, #32]
   d4806:	4632      	mov	r2, r6
   d4808:	2308      	movs	r3, #8
   d480a:	b209      	sxth	r1, r1
   d480c:	4658      	mov	r0, fp
   d480e:	47a0      	blx	r4
        endWrite();
   d4810:	f8db 3000 	ldr.w	r3, [fp]
   d4814:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4816:	4658      	mov	r0, fp
}
   d4818:	b011      	add	sp, #68	; 0x44
   d481a:	ecbd 8b02 	vpop	{d8}
   d481e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        endWrite();
   d4822:	4718      	bx	r3
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, color);
   d4824:	9906      	ldr	r1, [sp, #24]
   d4826:	fb14 f202 	smulbb	r2, r4, r2
   d482a:	440a      	add	r2, r1
   d482c:	9904      	ldr	r1, [sp, #16]
   d482e:	9101      	str	r1, [sp, #4]
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   d4830:	9400      	str	r4, [sp, #0]
   d4832:	69db      	ldr	r3, [r3, #28]
   d4834:	ee18 1a10 	vmov	r1, s16
   d4838:	461f      	mov	r7, r3
   d483a:	b212      	sxth	r2, r2
   d483c:	462b      	mov	r3, r5
   d483e:	4658      	mov	r0, fp
   d4840:	47b8      	blx	r7
   d4842:	e7bb      	b.n	d47bc <_ZN12Adafruit_GFX8drawCharEsshtthh+0xe0>
                } else if(bg != color) {
   d4844:	9a04      	ldr	r2, [sp, #16]
   d4846:	4542      	cmp	r2, r8
   d4848:	d0b8      	beq.n	d47bc <_ZN12Adafruit_GFX8drawCharEsshtthh+0xe0>
                    if(size_x == 1 && size_y == 1)
   d484a:	2d01      	cmp	r5, #1
   d484c:	fa1f f289 	uxth.w	r2, r9
   d4850:	d107      	bne.n	d4862 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x186>
   d4852:	2c01      	cmp	r4, #1
   d4854:	d105      	bne.n	d4862 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x186>
                        writePixel(x+i, y+j, bg);
   d4856:	699b      	ldr	r3, [r3, #24]
   d4858:	9906      	ldr	r1, [sp, #24]
   d485a:	461f      	mov	r7, r3
   d485c:	440a      	add	r2, r1
   d485e:	4643      	mov	r3, r8
   d4860:	e7a8      	b.n	d47b4 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xd8>
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   d4862:	9906      	ldr	r1, [sp, #24]
   d4864:	f8cd 8004 	str.w	r8, [sp, #4]
   d4868:	fb14 f202 	smulbb	r2, r4, r2
   d486c:	440a      	add	r2, r1
   d486e:	e7df      	b.n	d4830 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x154>
            else          writeFillRect(x+5*size_x, y, size_x, 8*size_y, bg);
   d4870:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   d4872:	f8cd 8004 	str.w	r8, [sp, #4]
   d4876:	eb02 0182 	add.w	r1, r2, r2, lsl #2
   d487a:	9a08      	ldr	r2, [sp, #32]
   d487c:	00e4      	lsls	r4, r4, #3
   d487e:	440a      	add	r2, r1
   d4880:	4611      	mov	r1, r2
   d4882:	9400      	str	r4, [sp, #0]
   d4884:	69dc      	ldr	r4, [r3, #28]
   d4886:	4632      	mov	r2, r6
   d4888:	462b      	mov	r3, r5
   d488a:	b209      	sxth	r1, r1
   d488c:	4658      	mov	r0, fp
   d488e:	47a0      	blx	r4
        endWrite();
   d4890:	e7be      	b.n	d4810 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
        c -= (uint8_t)pgm_read_byte(&gfxFont->first);
   d4892:	7a13      	ldrb	r3, [r2, #8]
    return gfxFont->glyph + c;
   d4894:	6851      	ldr	r1, [r2, #4]
        uint8_t  *bitmap = pgm_read_bitmap_ptr(gfxFont);
   d4896:	6812      	ldr	r2, [r2, #0]
   d4898:	920d      	str	r2, [sp, #52]	; 0x34
        c -= (uint8_t)pgm_read_byte(&gfxFont->first);
   d489a:	1aff      	subs	r7, r7, r3
    return gfxFont->glyph + c;
   d489c:	b2ff      	uxtb	r7, r7
   d489e:	eb01 03c7 	add.w	r3, r1, r7, lsl #3
        uint16_t bo = pgm_read_word(&glyph->bitmapOffset);
   d48a2:	f831 2037 	ldrh.w	r2, [r1, r7, lsl #3]
   d48a6:	9206      	str	r2, [sp, #24]
        uint8_t  w  = pgm_read_byte(&glyph->width),
   d48a8:	789a      	ldrb	r2, [r3, #2]
   d48aa:	9209      	str	r2, [sp, #36]	; 0x24
                 h  = pgm_read_byte(&glyph->height);
   d48ac:	78da      	ldrb	r2, [r3, #3]
   d48ae:	920b      	str	r2, [sp, #44]	; 0x2c
        if(size_x > 1 || size_y > 1) {
   d48b0:	2d01      	cmp	r5, #1
        int8_t   xo = pgm_read_byte(&glyph->xOffset),
   d48b2:	f993 2005 	ldrsb.w	r2, [r3, #5]
                 yo = pgm_read_byte(&glyph->yOffset);
   d48b6:	f993 a006 	ldrsb.w	sl, [r3, #6]
        int8_t   xo = pgm_read_byte(&glyph->xOffset),
   d48ba:	920a      	str	r2, [sp, #40]	; 0x28
        if(size_x > 1 || size_y > 1) {
   d48bc:	d801      	bhi.n	d48c2 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1e6>
   d48be:	2c01      	cmp	r4, #1
   d48c0:	d957      	bls.n	d4972 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x296>
            xo16 = xo;
   d48c2:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
   d48c6:	9308      	str	r3, [sp, #32]
            yo16 = yo;
   d48c8:	fa0f f38a 	sxth.w	r3, sl
   d48cc:	9307      	str	r3, [sp, #28]
        startWrite();
   d48ce:	f8db 3000 	ldr.w	r3, [fp]
   d48d2:	4658      	mov	r0, fp
   d48d4:	695b      	ldr	r3, [r3, #20]
   d48d6:	4798      	blx	r3
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   d48d8:	b2b3      	uxth	r3, r6
        uint8_t  xx, yy, bits = 0, bit = 0;
   d48da:	f04f 0800 	mov.w	r8, #0
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   d48de:	930e      	str	r3, [sp, #56]	; 0x38
                        writePixel(x+xo+xx, y+yo+yy, color);
   d48e0:	fa1a f386 	uxtah	r3, sl, r6
        uint8_t  xx, yy, bits = 0, bit = 0;
   d48e4:	46c1      	mov	r9, r8
        for(yy=0; yy<h; yy++) {
   d48e6:	4647      	mov	r7, r8
                        writePixel(x+xo+xx, y+yo+yy, color);
   d48e8:	930f      	str	r3, [sp, #60]	; 0x3c
        for(yy=0; yy<h; yy++) {
   d48ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   d48ec:	429f      	cmp	r7, r3
   d48ee:	d28f      	bcs.n	d4810 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   d48f0:	9b07      	ldr	r3, [sp, #28]
   d48f2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   d48f4:	443b      	add	r3, r7
   d48f6:	fb03 2304 	mla	r3, r3, r4, r2
            for(xx=0; xx<w; xx++) {
   d48fa:	2200      	movs	r2, #0
   d48fc:	9205      	str	r2, [sp, #20]
                        writePixel(x+xo+xx, y+yo+yy, color);
   d48fe:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   d4900:	b21b      	sxth	r3, r3
                        writePixel(x+xo+xx, y+yo+yy, color);
   d4902:	eb02 0a07 	add.w	sl, r2, r7
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   d4906:	ee08 3a10 	vmov	s16, r3
                        writePixel(x+xo+xx, y+yo+yy, color);
   d490a:	fa0f fa8a 	sxth.w	sl, sl
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   d490e:	4643      	mov	r3, r8
            for(xx=0; xx<w; xx++) {
   d4910:	9a09      	ldr	r2, [sp, #36]	; 0x24
   d4912:	9905      	ldr	r1, [sp, #20]
   d4914:	4291      	cmp	r1, r2
   d4916:	d241      	bcs.n	d499c <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2c0>
                if(!(bit++ & 7)) {
   d4918:	1c5a      	adds	r2, r3, #1
   d491a:	b2d2      	uxtb	r2, r2
   d491c:	075b      	lsls	r3, r3, #29
   d491e:	920c      	str	r2, [sp, #48]	; 0x30
   d4920:	d107      	bne.n	d4932 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x256>
                    bits = pgm_read_byte(&bitmap[bo++]);
   d4922:	9b06      	ldr	r3, [sp, #24]
   d4924:	9906      	ldr	r1, [sp, #24]
   d4926:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   d4928:	3301      	adds	r3, #1
   d492a:	b29b      	uxth	r3, r3
   d492c:	f812 9001 	ldrb.w	r9, [r2, r1]
   d4930:	9306      	str	r3, [sp, #24]
                if(bits & 0x80) {
   d4932:	f019 0f80 	tst.w	r9, #128	; 0x80
   d4936:	d012      	beq.n	d495e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x282>
                    if(size_x == 1 && size_y == 1) {
   d4938:	2d01      	cmp	r5, #1
   d493a:	f8db 3000 	ldr.w	r3, [fp]
   d493e:	f8bd 100c 	ldrh.w	r1, [sp, #12]
   d4942:	d11a      	bne.n	d497a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x29e>
   d4944:	2c01      	cmp	r4, #1
   d4946:	d118      	bne.n	d497a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x29e>
                        writePixel(x+xo+xx, y+yo+yy, color);
   d4948:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   d494a:	699b      	ldr	r3, [r3, #24]
   d494c:	4411      	add	r1, r2
   d494e:	9a05      	ldr	r2, [sp, #20]
   d4950:	4411      	add	r1, r2
   d4952:	461e      	mov	r6, r3
   d4954:	4652      	mov	r2, sl
   d4956:	9b04      	ldr	r3, [sp, #16]
   d4958:	b209      	sxth	r1, r1
   d495a:	4658      	mov	r0, fp
   d495c:	47b0      	blx	r6
            for(xx=0; xx<w; xx++) {
   d495e:	9e05      	ldr	r6, [sp, #20]
   d4960:	3601      	adds	r6, #1
   d4962:	b2f3      	uxtb	r3, r6
                bits <<= 1;
   d4964:	ea4f 0949 	mov.w	r9, r9, lsl #1
            for(xx=0; xx<w; xx++) {
   d4968:	9305      	str	r3, [sp, #20]
                bits <<= 1;
   d496a:	fa5f f989 	uxtb.w	r9, r9
                if(!(bit++ & 7)) {
   d496e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
            for(xx=0; xx<w; xx++) {
   d4970:	e7ce      	b.n	d4910 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x234>
        int16_t  xo16 = 0, yo16 = 0;
   d4972:	2300      	movs	r3, #0
   d4974:	e9cd 3307 	strd	r3, r3, [sp, #28]
   d4978:	e7a9      	b.n	d48ce <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1f2>
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   d497a:	9805      	ldr	r0, [sp, #20]
   d497c:	9a08      	ldr	r2, [sp, #32]
   d497e:	4402      	add	r2, r0
   d4980:	fb02 1105 	mla	r1, r2, r5, r1
   d4984:	9a04      	ldr	r2, [sp, #16]
   d4986:	e9cd 4200 	strd	r4, r2, [sp]
   d498a:	69db      	ldr	r3, [r3, #28]
   d498c:	ee18 2a10 	vmov	r2, s16
   d4990:	461e      	mov	r6, r3
   d4992:	b209      	sxth	r1, r1
   d4994:	462b      	mov	r3, r5
   d4996:	4658      	mov	r0, fp
   d4998:	47b0      	blx	r6
   d499a:	e7e0      	b.n	d495e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x282>
   d499c:	9b09      	ldr	r3, [sp, #36]	; 0x24
        for(yy=0; yy<h; yy++) {
   d499e:	3701      	adds	r7, #1
   d49a0:	4498      	add	r8, r3
   d49a2:	fa5f f888 	uxtb.w	r8, r8
   d49a6:	b2ff      	uxtb	r7, r7
   d49a8:	e79f      	b.n	d48ea <_ZN12Adafruit_GFX8drawCharEsshtthh+0x20e>
}
   d49aa:	b011      	add	sp, #68	; 0x44
   d49ac:	ecbd 8b02 	vpop	{d8}
   d49b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d49b4:	000d71d0 	.word	0x000d71d0

000d49b8 <_ZN12Adafruit_GFX5writeEh>:
size_t Adafruit_GFX::write(uint8_t c) {
   d49b8:	b5f0      	push	{r4, r5, r6, r7, lr}
    if(!gfxFont) { // 'Classic' built-in font
   d49ba:	6a02      	ldr	r2, [r0, #32]
size_t Adafruit_GFX::write(uint8_t c) {
   d49bc:	b085      	sub	sp, #20
   d49be:	4604      	mov	r4, r0
   d49c0:	460b      	mov	r3, r1
    if(!gfxFont) { // 'Classic' built-in font
   d49c2:	2a00      	cmp	r2, #0
   d49c4:	d134      	bne.n	d4a30 <_ZN12Adafruit_GFX5writeEh+0x78>
        if(c == '\n') {                        // Newline?
   d49c6:	290a      	cmp	r1, #10
   d49c8:	d108      	bne.n	d49dc <_ZN12Adafruit_GFX5writeEh+0x24>
            cursor_y += textsize_y * 8;        // advance y one line
   d49ca:	8a43      	ldrh	r3, [r0, #18]
            cursor_x  = 0;                     // Reset x to zero,
   d49cc:	8202      	strh	r2, [r0, #16]
            cursor_y += textsize_y * 8;        // advance y one line
   d49ce:	7e42      	ldrb	r2, [r0, #25]
   d49d0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
            cursor_y += (int16_t)textsize_y *
   d49d4:	8263      	strh	r3, [r4, #18]
}
   d49d6:	2001      	movs	r0, #1
   d49d8:	b005      	add	sp, #20
   d49da:	bdf0      	pop	{r4, r5, r6, r7, pc}
        } else if(c != '\r') {                 // Ignore carriage returns
   d49dc:	290d      	cmp	r1, #13
   d49de:	d0fa      	beq.n	d49d6 <_ZN12Adafruit_GFX5writeEh+0x1e>
            if(wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
   d49e0:	7ee1      	ldrb	r1, [r4, #27]
   d49e2:	7e00      	ldrb	r0, [r0, #24]
   d49e4:	7e65      	ldrb	r5, [r4, #25]
   d49e6:	b171      	cbz	r1, d4a06 <_ZN12Adafruit_GFX5writeEh+0x4e>
   d49e8:	f9b4 6010 	ldrsh.w	r6, [r4, #16]
   d49ec:	2106      	movs	r1, #6
   d49ee:	fb11 6100 	smlabb	r1, r1, r0, r6
   d49f2:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
   d49f6:	42b1      	cmp	r1, r6
   d49f8:	bfc1      	itttt	gt
   d49fa:	f9b4 1012 	ldrshgt.w	r1, [r4, #18]
                cursor_x  = 0;                 // Reset x to zero,
   d49fe:	8222      	strhgt	r2, [r4, #16]
                cursor_y += textsize_y * 8;    // advance y one line
   d4a00:	eb01 02c5 	addgt.w	r2, r1, r5, lsl #3
   d4a04:	8262      	strhgt	r2, [r4, #18]
            drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x, textsize_y);
   d4a06:	8ae2      	ldrh	r2, [r4, #22]
   d4a08:	9201      	str	r2, [sp, #4]
   d4a0a:	8aa2      	ldrh	r2, [r4, #20]
   d4a0c:	9200      	str	r2, [sp, #0]
   d4a0e:	e9cd 0502 	strd	r0, r5, [sp, #8]
   d4a12:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
   d4a16:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   d4a1a:	4620      	mov	r0, r4
   d4a1c:	f7ff fe5e 	bl	d46dc <_ZN12Adafruit_GFX8drawCharEsshtthh>
            cursor_x += textsize_x * 6;          // Advance x one char
   d4a20:	7e23      	ldrb	r3, [r4, #24]
   d4a22:	8a22      	ldrh	r2, [r4, #16]
   d4a24:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   d4a28:	eb02 0343 	add.w	r3, r2, r3, lsl #1
                cursor_x += (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
   d4a2c:	8223      	strh	r3, [r4, #16]
   d4a2e:	e7d2      	b.n	d49d6 <_ZN12Adafruit_GFX5writeEh+0x1e>
        if(c == '\n') {
   d4a30:	290a      	cmp	r1, #10
   d4a32:	d107      	bne.n	d4a44 <_ZN12Adafruit_GFX5writeEh+0x8c>
            cursor_x  = 0;
   d4a34:	2300      	movs	r3, #0
   d4a36:	8203      	strh	r3, [r0, #16]
                        (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
   d4a38:	7a93      	ldrb	r3, [r2, #10]
            cursor_y += (int16_t)textsize_y *
   d4a3a:	7e41      	ldrb	r1, [r0, #25]
   d4a3c:	8a42      	ldrh	r2, [r0, #18]
   d4a3e:	fb01 2303 	mla	r3, r1, r3, r2
   d4a42:	e7c7      	b.n	d49d4 <_ZN12Adafruit_GFX5writeEh+0x1c>
        } else if(c != '\r') {
   d4a44:	290d      	cmp	r1, #13
   d4a46:	d0c6      	beq.n	d49d6 <_ZN12Adafruit_GFX5writeEh+0x1e>
            uint8_t first = pgm_read_byte(&gfxFont->first);
   d4a48:	7a15      	ldrb	r5, [r2, #8]
            if((c >= first) && (c <= (uint8_t)pgm_read_byte(&gfxFont->last))) {
   d4a4a:	42a9      	cmp	r1, r5
   d4a4c:	d3c3      	bcc.n	d49d6 <_ZN12Adafruit_GFX5writeEh+0x1e>
   d4a4e:	7a51      	ldrb	r1, [r2, #9]
   d4a50:	4299      	cmp	r1, r3
   d4a52:	d3c0      	bcc.n	d49d6 <_ZN12Adafruit_GFX5writeEh+0x1e>
    return gfxFont->glyph + c;
   d4a54:	6851      	ldr	r1, [r2, #4]
                GFXglyph *glyph  = pgm_read_glyph_ptr(gfxFont, c - first);
   d4a56:	1b5d      	subs	r5, r3, r5
    return gfxFont->glyph + c;
   d4a58:	b2ed      	uxtb	r5, r5
   d4a5a:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
                uint8_t   w     = pgm_read_byte(&glyph->width),
   d4a5e:	78af      	ldrb	r7, [r5, #2]
                if((w > 0) && (h > 0)) { // Is there an associated bitmap?
   d4a60:	b32f      	cbz	r7, d4aae <_ZN12Adafruit_GFX5writeEh+0xf6>
   d4a62:	78e9      	ldrb	r1, [r5, #3]
   d4a64:	b319      	cbz	r1, d4aae <_ZN12Adafruit_GFX5writeEh+0xf6>
                    if(wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
   d4a66:	7ee1      	ldrb	r1, [r4, #27]
   d4a68:	7e00      	ldrb	r0, [r0, #24]
   d4a6a:	7e66      	ldrb	r6, [r4, #25]
   d4a6c:	b191      	cbz	r1, d4a94 <_ZN12Adafruit_GFX5writeEh+0xdc>
   d4a6e:	f995 1005 	ldrsb.w	r1, [r5, #5]
   d4a72:	4439      	add	r1, r7
   d4a74:	f9b4 7010 	ldrsh.w	r7, [r4, #16]
   d4a78:	fb00 7101 	mla	r1, r0, r1, r7
   d4a7c:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
   d4a80:	42b9      	cmp	r1, r7
   d4a82:	dd07      	ble.n	d4a94 <_ZN12Adafruit_GFX5writeEh+0xdc>
                        cursor_x  = 0;
   d4a84:	2700      	movs	r7, #0
   d4a86:	8227      	strh	r7, [r4, #16]
   d4a88:	f9b4 1012 	ldrsh.w	r1, [r4, #18]
                          (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
   d4a8c:	7a92      	ldrb	r2, [r2, #10]
                        cursor_y += (int16_t)textsize_y *
   d4a8e:	fb02 1206 	mla	r2, r2, r6, r1
   d4a92:	8262      	strh	r2, [r4, #18]
                    drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x, textsize_y);
   d4a94:	8ae2      	ldrh	r2, [r4, #22]
   d4a96:	9201      	str	r2, [sp, #4]
   d4a98:	8aa2      	ldrh	r2, [r4, #20]
   d4a9a:	9200      	str	r2, [sp, #0]
   d4a9c:	e9cd 0602 	strd	r0, r6, [sp, #8]
   d4aa0:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
   d4aa4:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   d4aa8:	4620      	mov	r0, r4
   d4aaa:	f7ff fe17 	bl	d46dc <_ZN12Adafruit_GFX8drawCharEsshtthh>
                cursor_x += (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
   d4aae:	7929      	ldrb	r1, [r5, #4]
   d4ab0:	7e23      	ldrb	r3, [r4, #24]
   d4ab2:	8a22      	ldrh	r2, [r4, #16]
   d4ab4:	fb01 2303 	mla	r3, r1, r3, r2
   d4ab8:	e7b8      	b.n	d4a2c <_ZN12Adafruit_GFX5writeEh+0x74>

000d4aba <_ZN12Adafruit_GFX11setTextSizeEh>:
    textsize_x = (s_x > 0) ? s_x : 1;
   d4aba:	2901      	cmp	r1, #1
   d4abc:	bf38      	it	cc
   d4abe:	2101      	movcc	r1, #1
   d4ac0:	7601      	strb	r1, [r0, #24]
    textsize_y = (s_y > 0) ? s_y : 1;
   d4ac2:	7641      	strb	r1, [r0, #25]
}
   d4ac4:	4770      	bx	lr
	...

000d4ac8 <_ZN16OledWingAdafruitD1Ev>:


OledWingAdafruit::OledWingAdafruit(int useButtons) : Adafruit_SSD1306(128, 32), useButtons(useButtons) {

}
OledWingAdafruit::~OledWingAdafruit() {
   d4ac8:	b510      	push	{r4, lr}
   d4aca:	4b06      	ldr	r3, [pc, #24]	; (d4ae4 <_ZN16OledWingAdafruitD1Ev+0x1c>)
   d4acc:	6003      	str	r3, [r0, #0]
   d4ace:	4604      	mov	r4, r0
	if (mutex) {
   d4ad0:	6d00      	ldr	r0, [r0, #80]	; 0x50
   d4ad2:	b108      	cbz	r0, d4ad8 <_ZN16OledWingAdafruitD1Ev+0x10>
		os_mutex_destroy(mutex);
   d4ad4:	f000 fd68 	bl	d55a8 <os_mutex_destroy>
OledWingAdafruit::~OledWingAdafruit() {
   d4ad8:	4620      	mov	r0, r4
   d4ada:	f000 f887 	bl	d4bec <_ZN16Adafruit_SSD1306D1Ev>
	}
}
   d4ade:	4620      	mov	r0, r4
   d4ae0:	bd10      	pop	{r4, pc}
   d4ae2:	bf00      	nop
   d4ae4:	000d7730 	.word	0x000d7730

000d4ae8 <_ZN16OledWingAdafruitD0Ev>:
OledWingAdafruit::~OledWingAdafruit() {
   d4ae8:	b510      	push	{r4, lr}
   d4aea:	4604      	mov	r4, r0
}
   d4aec:	f7ff ffec 	bl	d4ac8 <_ZN16OledWingAdafruitD1Ev>
   d4af0:	4620      	mov	r0, r4
   d4af2:	2170      	movs	r1, #112	; 0x70
   d4af4:	f001 fe21 	bl	d673a <_ZdlPvj>
   d4af8:	4620      	mov	r0, r4
   d4afa:	bd10      	pop	{r4, pc}

000d4afc <_ZN16OledWingAdafruitC1Ei>:
OledWingAdafruit::OledWingAdafruit(int useButtons) : Adafruit_SSD1306(128, 32), useButtons(useButtons) {
   d4afc:	b530      	push	{r4, r5, lr}
   d4afe:	b085      	sub	sp, #20
   d4b00:	4604      	mov	r4, r0
   d4b02:	460d      	mov	r5, r1
   d4b04:	f001 fdec 	bl	d66e0 <_Z19__fetch_global_Wirev>
   d4b08:	4a10      	ldr	r2, [pc, #64]	; (d4b4c <_ZN16OledWingAdafruitC1Ei+0x50>)
   d4b0a:	4911      	ldr	r1, [pc, #68]	; (d4b50 <_ZN16OledWingAdafruitC1Ei+0x54>)
   d4b0c:	e9cd 2101 	strd	r2, r1, [sp, #4]
   d4b10:	f04f 32ff 	mov.w	r2, #4294967295
   d4b14:	2180      	movs	r1, #128	; 0x80
   d4b16:	4603      	mov	r3, r0
   d4b18:	9200      	str	r2, [sp, #0]
   d4b1a:	4620      	mov	r0, r4
   d4b1c:	2220      	movs	r2, #32
   d4b1e:	f000 f8eb 	bl	d4cf8 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm>
   d4b22:	4b0c      	ldr	r3, [pc, #48]	; (d4b54 <_ZN16OledWingAdafruitC1Ei+0x58>)
   d4b24:	6023      	str	r3, [r4, #0]
   d4b26:	2300      	movs	r3, #0
   d4b28:	e9c4 3514 	strd	r3, r5, [r4, #80]	; 0x50
   d4b2c:	f104 0058 	add.w	r0, r4, #88	; 0x58
   d4b30:	f000 f83b 	bl	d4baa <_ZN8DebounceC1Ev>
   d4b34:	f104 0060 	add.w	r0, r4, #96	; 0x60
   d4b38:	f000 f837 	bl	d4baa <_ZN8DebounceC1Ev>
   d4b3c:	f104 0068 	add.w	r0, r4, #104	; 0x68
   d4b40:	f000 f833 	bl	d4baa <_ZN8DebounceC1Ev>
}
   d4b44:	4620      	mov	r0, r4
   d4b46:	b005      	add	sp, #20
   d4b48:	bd30      	pop	{r4, r5, pc}
   d4b4a:	bf00      	nop
   d4b4c:	00061a80 	.word	0x00061a80
   d4b50:	000186a0 	.word	0x000186a0
   d4b54:	000d7730 	.word	0x000d7730

000d4b58 <_ZN16OledWingAdafruit5setupEv>:

void OledWingAdafruit::setup() {
   d4b58:	b513      	push	{r0, r1, r4, lr}
   d4b5a:	4604      	mov	r4, r0
	os_mutex_create(&mutex);
   d4b5c:	3050      	adds	r0, #80	; 0x50
   d4b5e:	f000 fd1b 	bl	d5598 <os_mutex_create>

	if (useButtons & USE_BUTTON_A) {
   d4b62:	6d63      	ldr	r3, [r4, #84]	; 0x54
   d4b64:	07d9      	lsls	r1, r3, #31
   d4b66:	d505      	bpl.n	d4b74 <_ZN16OledWingAdafruit5setupEv+0x1c>
		buttonA.attach(BUTTON_A_PIN, INPUT_PULLUP);
   d4b68:	2202      	movs	r2, #2
   d4b6a:	2104      	movs	r1, #4
   d4b6c:	f104 0058 	add.w	r0, r4, #88	; 0x58
   d4b70:	f000 f82f 	bl	d4bd2 <_ZN8Debounce6attachEi7PinMode>
	}
	if (useButtons & USE_BUTTON_B) {
   d4b74:	6d63      	ldr	r3, [r4, #84]	; 0x54
   d4b76:	079a      	lsls	r2, r3, #30
   d4b78:	d505      	bpl.n	d4b86 <_ZN16OledWingAdafruit5setupEv+0x2e>
		buttonB.attach(BUTTON_B_PIN, INPUT); // Button B has a hardware 100K pull-up on the board
   d4b7a:	2200      	movs	r2, #0
   d4b7c:	2103      	movs	r1, #3
   d4b7e:	f104 0060 	add.w	r0, r4, #96	; 0x60
   d4b82:	f000 f826 	bl	d4bd2 <_ZN8Debounce6attachEi7PinMode>
	}
	if (useButtons & USE_BUTTON_C) {
   d4b86:	6d63      	ldr	r3, [r4, #84]	; 0x54
   d4b88:	075b      	lsls	r3, r3, #29
   d4b8a:	d505      	bpl.n	d4b98 <_ZN16OledWingAdafruit5setupEv+0x40>
		buttonC.attach(BUTTON_C_PIN, INPUT_PULLUP);
   d4b8c:	2202      	movs	r2, #2
   d4b8e:	4611      	mov	r1, r2
   d4b90:	f104 0068 	add.w	r0, r4, #104	; 0x68
   d4b94:	f000 f81d 	bl	d4bd2 <_ZN8Debounce6attachEi7PinMode>
	}

	// 128x32 = I2C addr 0x3C. Method inherited from Adafruit_SSD1306.
	begin(SSD1306_SWITCHCAPVCC, 0x3C);
   d4b98:	2301      	movs	r3, #1
   d4b9a:	9300      	str	r3, [sp, #0]
   d4b9c:	223c      	movs	r2, #60	; 0x3c
   d4b9e:	2102      	movs	r1, #2
   d4ba0:	4620      	mov	r0, r4
   d4ba2:	f000 f9a9 	bl	d4ef8 <_ZN16Adafruit_SSD13065beginEhhbb>
}
   d4ba6:	b002      	add	sp, #8
   d4ba8:	bd10      	pop	{r4, pc}

000d4baa <_ZN8DebounceC1Ev>:

Debounce::Debounce()
    : previous_millis(0)
    , interval_millis(10)
    , state(0)
    , pin(0)
   d4baa:	2100      	movs	r1, #0
   d4bac:	220a      	movs	r2, #10
   d4bae:	e9c0 1200 	strd	r1, r2, [r0]
{}
   d4bb2:	4770      	bx	lr

000d4bb4 <_ZN8Debounce6attachEi>:

void Debounce::attach(int pin) {
    this->pin = pin;
    state = 0;
   d4bb4:	2300      	movs	r3, #0
void Debounce::attach(int pin) {
   d4bb6:	b510      	push	{r4, lr}
   d4bb8:	4604      	mov	r4, r0
    this->pin = pin;
   d4bba:	71c1      	strb	r1, [r0, #7]
    state = 0;
   d4bbc:	7183      	strb	r3, [r0, #6]
    if (digitalRead(pin)) {
   d4bbe:	b288      	uxth	r0, r1
   d4bc0:	f001 fd4c 	bl	d665c <digitalRead>
   d4bc4:	b108      	cbz	r0, d4bca <_ZN8Debounce6attachEi+0x16>
        state = _BV(DEBOUNCED_STATE) | _BV(UNSTABLE_STATE);
   d4bc6:	2303      	movs	r3, #3
   d4bc8:	71a3      	strb	r3, [r4, #6]

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d4bca:	f000 fcdd 	bl	d5588 <HAL_Timer_Get_Milli_Seconds>
    }
#ifdef BOUNCE_LOCK_OUT
    previous_millis = 0;
#else
    previous_millis = millis();
   d4bce:	6020      	str	r0, [r4, #0]
#endif
}
   d4bd0:	bd10      	pop	{r4, pc}

000d4bd2 <_ZN8Debounce6attachEi7PinMode>:

void Debounce::attach(int pin, PinMode mode){
   d4bd2:	b538      	push	{r3, r4, r5, lr}
   d4bd4:	460c      	mov	r4, r1
   d4bd6:	4605      	mov	r5, r0
  pinMode(pin, mode);
   d4bd8:	4611      	mov	r1, r2
   d4bda:	b2a0      	uxth	r0, r4
   d4bdc:	f001 fd14 	bl	d6608 <pinMode>
  
  this->attach(pin);
   d4be0:	4621      	mov	r1, r4
   d4be2:	4628      	mov	r0, r5
}
   d4be4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  this->attach(pin);
   d4be8:	f7ff bfe4 	b.w	d4bb4 <_ZN8Debounce6attachEi>

000d4bec <_ZN16Adafruit_SSD1306D1Ev>:
}

/*!
    @brief  Destructor for Adafruit_SSD1306 object.
*/
Adafruit_SSD1306::~Adafruit_SSD1306(void) {
   d4bec:	b510      	push	{r4, lr}
   d4bee:	4b04      	ldr	r3, [pc, #16]	; (d4c00 <_ZN16Adafruit_SSD1306D1Ev+0x14>)
   d4bf0:	6003      	str	r3, [r0, #0]
   d4bf2:	4604      	mov	r4, r0
  if(buffer) {
   d4bf4:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   d4bf6:	b108      	cbz	r0, d4bfc <_ZN16Adafruit_SSD1306D1Ev+0x10>
    free(buffer);
   d4bf8:	f000 fea2 	bl	d5940 <free>
    buffer = NULL;
  }
}
   d4bfc:	4620      	mov	r0, r4
   d4bfe:	bd10      	pop	{r4, pc}
   d4c00:	000d7c3c 	.word	0x000d7c3c

000d4c04 <_ZN16Adafruit_SSD1306D0Ev>:
Adafruit_SSD1306::~Adafruit_SSD1306(void) {
   d4c04:	b510      	push	{r4, lr}
   d4c06:	4604      	mov	r4, r0
}
   d4c08:	f7ff fff0 	bl	d4bec <_ZN16Adafruit_SSD1306D1Ev>
   d4c0c:	4620      	mov	r0, r4
   d4c0e:	2150      	movs	r1, #80	; 0x50
   d4c10:	f001 fd93 	bl	d673a <_ZdlPvj>
   d4c14:	4620      	mov	r0, r4
   d4c16:	bd10      	pop	{r4, pc}

000d4c18 <_ZN16Adafruit_SSD13069drawPixelEsst>:
    @note   Changes buffer contents only, no immediate effect on display.
            Follow up with a call to display(), or with other graphics
            commands as needed by one's own application.
*/
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
  if((x >= 0) && (x < width()) && (y >= 0) && (y < height())) {
   d4c18:	2900      	cmp	r1, #0
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
   d4c1a:	b510      	push	{r4, lr}
  if((x >= 0) && (x < width()) && (y >= 0) && (y < height())) {
   d4c1c:	db4b      	blt.n	d4cb6 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
   d4c1e:	f9b0 400c 	ldrsh.w	r4, [r0, #12]
   d4c22:	428c      	cmp	r4, r1
   d4c24:	dd47      	ble.n	d4cb6 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
   d4c26:	2a00      	cmp	r2, #0
   d4c28:	db45      	blt.n	d4cb6 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
   d4c2a:	f9b0 400e 	ldrsh.w	r4, [r0, #14]
   d4c2e:	4294      	cmp	r4, r2
   d4c30:	dd41      	ble.n	d4cb6 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
    // Pixel is in-bounds. Rotate coordinates if needed.
    switch(getRotation()) {
   d4c32:	7e84      	ldrb	r4, [r0, #26]
   d4c34:	2c02      	cmp	r4, #2
   d4c36:	d01f      	beq.n	d4c78 <_ZN16Adafruit_SSD13069drawPixelEsst+0x60>
   d4c38:	2c03      	cmp	r4, #3
   d4c3a:	d026      	beq.n	d4c8a <_ZN16Adafruit_SSD13069drawPixelEsst+0x72>
   d4c3c:	2c01      	cmp	r4, #1
   d4c3e:	d104      	bne.n	d4c4a <_ZN16Adafruit_SSD13069drawPixelEsst+0x32>
     case 1:
      ssd1306_swap(x, y);
      x = WIDTH - x - 1;
   d4c40:	8904      	ldrh	r4, [r0, #8]
   d4c42:	43d2      	mvns	r2, r2
   d4c44:	4414      	add	r4, r2
      break;
   d4c46:	460a      	mov	r2, r1
      x = WIDTH - x - 1;
   d4c48:	b221      	sxth	r1, r4
     case 3:
      ssd1306_swap(x, y);
      y = HEIGHT - y - 1;
      break;
    }
    switch(color) {
   d4c4a:	2b01      	cmp	r3, #1
   d4c4c:	d023      	beq.n	d4c96 <_ZN16Adafruit_SSD13069drawPixelEsst+0x7e>
   d4c4e:	2b02      	cmp	r3, #2
   d4c50:	d032      	beq.n	d4cb8 <_ZN16Adafruit_SSD13069drawPixelEsst+0xa0>
   d4c52:	bb83      	cbnz	r3, d4cb6 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
     case WHITE:   buffer[x + (y/8)*WIDTH] |=  (1 << (y&7)); break;
     case BLACK:   buffer[x + (y/8)*WIDTH] &= ~(1 << (y&7)); break;
   d4c54:	2a00      	cmp	r2, #0
   d4c56:	4613      	mov	r3, r2
   d4c58:	8904      	ldrh	r4, [r0, #8]
   d4c5a:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   d4c5c:	bfb8      	it	lt
   d4c5e:	1dd3      	addlt	r3, r2, #7
   d4c60:	10db      	asrs	r3, r3, #3
   d4c62:	fb13 1104 	smlabb	r1, r3, r4, r1
   d4c66:	f002 0207 	and.w	r2, r2, #7
   d4c6a:	2301      	movs	r3, #1
   d4c6c:	4093      	lsls	r3, r2
   d4c6e:	5c42      	ldrb	r2, [r0, r1]
   d4c70:	ea22 0203 	bic.w	r2, r2, r3
     case INVERSE: buffer[x + (y/8)*WIDTH] ^=  (1 << (y&7)); break;
   d4c74:	5442      	strb	r2, [r0, r1]
    }
  }
}
   d4c76:	e01e      	b.n	d4cb6 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
      x = WIDTH  - x - 1;
   d4c78:	8904      	ldrh	r4, [r0, #8]
   d4c7a:	43c9      	mvns	r1, r1
   d4c7c:	4421      	add	r1, r4
      y = HEIGHT - y - 1;
   d4c7e:	8944      	ldrh	r4, [r0, #10]
   d4c80:	43d2      	mvns	r2, r2
   d4c82:	4422      	add	r2, r4
      x = WIDTH  - x - 1;
   d4c84:	b209      	sxth	r1, r1
      y = HEIGHT - y - 1;
   d4c86:	b212      	sxth	r2, r2
      break;
   d4c88:	e7df      	b.n	d4c4a <_ZN16Adafruit_SSD13069drawPixelEsst+0x32>
      y = HEIGHT - y - 1;
   d4c8a:	8944      	ldrh	r4, [r0, #10]
   d4c8c:	43c9      	mvns	r1, r1
   d4c8e:	440c      	add	r4, r1
      break;
   d4c90:	4611      	mov	r1, r2
      y = HEIGHT - y - 1;
   d4c92:	b222      	sxth	r2, r4
      break;
   d4c94:	e7d9      	b.n	d4c4a <_ZN16Adafruit_SSD13069drawPixelEsst+0x32>
     case WHITE:   buffer[x + (y/8)*WIDTH] |=  (1 << (y&7)); break;
   d4c96:	2a00      	cmp	r2, #0
   d4c98:	8904      	ldrh	r4, [r0, #8]
   d4c9a:	4613      	mov	r3, r2
   d4c9c:	bfb8      	it	lt
   d4c9e:	1dd3      	addlt	r3, r2, #7
   d4ca0:	10db      	asrs	r3, r3, #3
   d4ca2:	fb13 1104 	smlabb	r1, r3, r4, r1
   d4ca6:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   d4ca8:	f002 0007 	and.w	r0, r2, #7
   d4cac:	2201      	movs	r2, #1
   d4cae:	4082      	lsls	r2, r0
   d4cb0:	5c58      	ldrb	r0, [r3, r1]
   d4cb2:	4302      	orrs	r2, r0
   d4cb4:	545a      	strb	r2, [r3, r1]
}
   d4cb6:	bd10      	pop	{r4, pc}
     case INVERSE: buffer[x + (y/8)*WIDTH] ^=  (1 << (y&7)); break;
   d4cb8:	2a00      	cmp	r2, #0
   d4cba:	4613      	mov	r3, r2
   d4cbc:	8904      	ldrh	r4, [r0, #8]
   d4cbe:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   d4cc0:	bfb8      	it	lt
   d4cc2:	1dd3      	addlt	r3, r2, #7
   d4cc4:	10db      	asrs	r3, r3, #3
   d4cc6:	fb13 1104 	smlabb	r1, r3, r4, r1
   d4cca:	f002 0207 	and.w	r2, r2, #7
   d4cce:	2301      	movs	r3, #1
   d4cd0:	fa03 f202 	lsl.w	r2, r3, r2
   d4cd4:	5c43      	ldrb	r3, [r0, r1]
   d4cd6:	405a      	eors	r2, r3
   d4cd8:	e7cc      	b.n	d4c74 <_ZN16Adafruit_SSD13069drawPixelEsst+0x5c>

000d4cda <_ZN16Adafruit_SSD130610stopscrollEv.part.0>:
            display() function -- buffer contents are not changed, rather a
            different pixel mode of the display hardware is used. When
            enabled, drawing BLACK (value 0) pixels will actually draw white,
            WHITE (value 1) will draw black.
*/
void Adafruit_SSD1306::invertDisplay(boolean i) {
   d4cda:	b510      	push	{r4, lr}
   d4cdc:	4604      	mov	r4, r0
  TRANSACTION_START
  ssd1306_command1(i ? SSD1306_INVERTDISPLAY : SSD1306_NORMALDISPLAY);
  TRANSACTION_END
   d4cde:	f990 0036 	ldrsb.w	r0, [r0, #54]	; 0x36
   d4ce2:	2101      	movs	r1, #1
   d4ce4:	b280      	uxth	r0, r0
   d4ce6:	f001 fca0 	bl	d662a <digitalWrite>
   d4cea:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d4cec:	b118      	cbz	r0, d4cf6 <_ZN16Adafruit_SSD130610stopscrollEv.part.0+0x1c>
}
   d4cee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  TRANSACTION_END
   d4cf2:	f000 be9c 	b.w	d5a2e <_ZN8SPIClass14endTransactionEv>
}
   d4cf6:	bd10      	pop	{r4, pc}

000d4cf8 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm>:
Adafruit_SSD1306::Adafruit_SSD1306(uint8_t w, uint8_t h, TwoWire *twi,
   d4cf8:	b570      	push	{r4, r5, r6, lr}
   d4cfa:	4604      	mov	r4, r0
   d4cfc:	461d      	mov	r5, r3
  wireClk(clkDuring), restoreClk(clkAfter) {
   d4cfe:	2600      	movs	r6, #0
   d4d00:	f7ff fc82 	bl	d4608 <_ZN12Adafruit_GFXC1Ess>
   d4d04:	4b11      	ldr	r3, [pc, #68]	; (d4d4c <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm+0x54>)
   d4d06:	6023      	str	r3, [r4, #0]
   d4d08:	6266      	str	r6, [r4, #36]	; 0x24
  Adafruit_GFX(w, h), spi(NULL), wire(twi ? twi : &Wire), buffer(NULL),
   d4d0a:	b915      	cbnz	r5, d4d12 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm+0x1a>
   d4d0c:	f001 fce8 	bl	d66e0 <_Z19__fetch_global_Wirev>
   d4d10:	4605      	mov	r5, r0
  wireClk(clkDuring), restoreClk(clkAfter) {
   d4d12:	23ff      	movs	r3, #255	; 0xff
   d4d14:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
   d4d18:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
   d4d1c:	f99d 3010 	ldrsb.w	r3, [sp, #16]
   d4d20:	f884 3037 	strb.w	r3, [r4, #55]	; 0x37
  {
   d4d24:	4b0a      	ldr	r3, [pc, #40]	; (d4d50 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm+0x58>)
   d4d26:	63a3      	str	r3, [r4, #56]	; 0x38
   d4d28:	2301      	movs	r3, #1
   d4d2a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
   d4d2e:	9b05      	ldr	r3, [sp, #20]
   d4d30:	64a3      	str	r3, [r4, #72]	; 0x48
   d4d32:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d4d36:	9b06      	ldr	r3, [sp, #24]
   d4d38:	86a2      	strh	r2, [r4, #52]	; 0x34
   d4d3a:	e9c4 560a 	strd	r5, r6, [r4, #40]	; 0x28
   d4d3e:	6426      	str	r6, [r4, #64]	; 0x40
   d4d40:	f8a4 6044 	strh.w	r6, [r4, #68]	; 0x44
   d4d44:	64e3      	str	r3, [r4, #76]	; 0x4c
}
   d4d46:	4620      	mov	r0, r4
   d4d48:	bd70      	pop	{r4, r5, r6, pc}
   d4d4a:	bf00      	nop
   d4d4c:	000d7c3c 	.word	0x000d7c3c
   d4d50:	000d7788 	.word	0x000d7788

000d4d54 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>:
void Adafruit_SSD1306::ssd1306_command1(uint8_t c) {
   d4d54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4d56:	4604      	mov	r4, r0
  if(wire) { // I2C
   d4d58:	6a80      	ldr	r0, [r0, #40]	; 0x28
void Adafruit_SSD1306::ssd1306_command1(uint8_t c) {
   d4d5a:	460d      	mov	r5, r1
  if(wire) { // I2C
   d4d5c:	b190      	cbz	r0, d4d84 <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x30>
    wire->beginTransmission(i2caddr);
   d4d5e:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   d4d62:	f001 fb1b 	bl	d639c <_ZN7TwoWire17beginTransmissionEi>
    WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
   d4d66:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d4d68:	6803      	ldr	r3, [r0, #0]
   d4d6a:	2100      	movs	r1, #0
   d4d6c:	689b      	ldr	r3, [r3, #8]
   d4d6e:	4798      	blx	r3
    WIRE_WRITE(c);
   d4d70:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d4d72:	6803      	ldr	r3, [r0, #0]
   d4d74:	4629      	mov	r1, r5
   d4d76:	689b      	ldr	r3, [r3, #8]
   d4d78:	4798      	blx	r3
    wire->endTransmission();
   d4d7a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
}
   d4d7c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    wire->endTransmission();
   d4d80:	f001 bb13 	b.w	d63aa <_ZN7TwoWire15endTransmissionEv>
    SSD1306_MODE_COMMAND
   d4d84:	f994 3035 	ldrsb.w	r3, [r4, #53]	; 0x35
   d4d88:	4601      	mov	r1, r0
   d4d8a:	b298      	uxth	r0, r3
   d4d8c:	f001 fc4d 	bl	d662a <digitalWrite>
  if(spi) {
   d4d90:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d4d92:	b120      	cbz	r0, d4d9e <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x4a>
    (void)spi->transfer(d);
   d4d94:	4629      	mov	r1, r5
}
   d4d96:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    (void)spi->transfer(d);
   d4d9a:	f000 becf 	b.w	d5b3c <_ZN8SPIClass8transferEh>
   d4d9e:	2608      	movs	r6, #8
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   d4da0:	2780      	movs	r7, #128	; 0x80
      digitalWrite(mosiPin, d & bit);
   d4da2:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   d4da6:	ea05 0107 	and.w	r1, r5, r7
   d4daa:	b280      	uxth	r0, r0
   d4dac:	f001 fc3d 	bl	d662a <digitalWrite>
      digitalWrite(clkPin , HIGH);
   d4db0:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   d4db4:	2101      	movs	r1, #1
   d4db6:	b280      	uxth	r0, r0
   d4db8:	f001 fc37 	bl	d662a <digitalWrite>
      digitalWrite(clkPin , LOW);
   d4dbc:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   d4dc0:	2100      	movs	r1, #0
   d4dc2:	b280      	uxth	r0, r0
   d4dc4:	f001 fc31 	bl	d662a <digitalWrite>
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   d4dc8:	3e01      	subs	r6, #1
   d4dca:	ea4f 0757 	mov.w	r7, r7, lsr #1
   d4dce:	d1e8      	bne.n	d4da2 <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x4e>
}
   d4dd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d4dd2 <_ZN16Adafruit_SSD130613invertDisplayEb>:
void Adafruit_SSD1306::invertDisplay(boolean i) {
   d4dd2:	b538      	push	{r3, r4, r5, lr}
   d4dd4:	4604      	mov	r4, r0
  TRANSACTION_START
   d4dd6:	6a80      	ldr	r0, [r0, #40]	; 0x28
void Adafruit_SSD1306::invertDisplay(boolean i) {
   d4dd8:	460d      	mov	r5, r1
  TRANSACTION_START
   d4dda:	b180      	cbz	r0, d4dfe <_ZN16Adafruit_SSD130613invertDisplayEb+0x2c>

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
  inline void setClock(uint32_t speed) {
	  setSpeed(speed);
   d4ddc:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   d4dde:	f001 facf 	bl	d6380 <_ZN7TwoWire8setSpeedEm>
  ssd1306_command1(i ? SSD1306_INVERTDISPLAY : SSD1306_NORMALDISPLAY);
   d4de2:	2d00      	cmp	r5, #0
   d4de4:	4620      	mov	r0, r4
   d4de6:	bf14      	ite	ne
   d4de8:	21a7      	movne	r1, #167	; 0xa7
   d4dea:	21a6      	moveq	r1, #166	; 0xa6
   d4dec:	f7ff ffb2 	bl	d4d54 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  TRANSACTION_END
   d4df0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d4df2:	b188      	cbz	r0, d4e18 <_ZN16Adafruit_SSD130613invertDisplayEb+0x46>
   d4df4:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
}
   d4df6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d4dfa:	f001 bac1 	b.w	d6380 <_ZN7TwoWire8setSpeedEm>
  TRANSACTION_START
   d4dfe:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d4e00:	b118      	cbz	r0, d4e0a <_ZN16Adafruit_SSD130613invertDisplayEb+0x38>
   d4e02:	f104 0138 	add.w	r1, r4, #56	; 0x38
   d4e06:	f000 fe2b 	bl	d5a60 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
   d4e0a:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   d4e0e:	2100      	movs	r1, #0
   d4e10:	b280      	uxth	r0, r0
   d4e12:	f001 fc0a 	bl	d662a <digitalWrite>
   d4e16:	e7e4      	b.n	d4de2 <_ZN16Adafruit_SSD130613invertDisplayEb+0x10>
   d4e18:	4620      	mov	r0, r4
}
   d4e1a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d4e1e:	f7ff bf5c 	b.w	d4cda <_ZN16Adafruit_SSD130610stopscrollEv.part.0>

000d4e22 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>:
void Adafruit_SSD1306::ssd1306_commandList(const uint8_t *c, uint8_t n) {
   d4e22:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d4e26:	4604      	mov	r4, r0
  if(wire) { // I2C
   d4e28:	6a80      	ldr	r0, [r0, #40]	; 0x28
void Adafruit_SSD1306::ssd1306_commandList(const uint8_t *c, uint8_t n) {
   d4e2a:	460d      	mov	r5, r1
  if(wire) { // I2C
   d4e2c:	188f      	adds	r7, r1, r2
   d4e2e:	b340      	cbz	r0, d4e82 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x60>
    wire->beginTransmission(i2caddr);
   d4e30:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   d4e34:	f001 fab2 	bl	d639c <_ZN7TwoWire17beginTransmissionEi>
    WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
   d4e38:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d4e3a:	6803      	ldr	r3, [r0, #0]
   d4e3c:	2100      	movs	r1, #0
   d4e3e:	689b      	ldr	r3, [r3, #8]
   d4e40:	4798      	blx	r3
    uint8_t bytesOut = 1;
   d4e42:	2601      	movs	r6, #1
    while(n--) {
   d4e44:	42bd      	cmp	r5, r7
   d4e46:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d4e48:	d017      	beq.n	d4e7a <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x58>
      if(bytesOut >= WIRE_MAX) {
   d4e4a:	2e1f      	cmp	r6, #31
   d4e4c:	d90c      	bls.n	d4e68 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x46>
        wire->endTransmission();
   d4e4e:	f001 faac 	bl	d63aa <_ZN7TwoWire15endTransmissionEv>
        wire->beginTransmission(i2caddr);
   d4e52:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   d4e56:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d4e58:	f001 faa0 	bl	d639c <_ZN7TwoWire17beginTransmissionEi>
        WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
   d4e5c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d4e5e:	6803      	ldr	r3, [r0, #0]
   d4e60:	2100      	movs	r1, #0
   d4e62:	689b      	ldr	r3, [r3, #8]
   d4e64:	4798      	blx	r3
        bytesOut = 1;
   d4e66:	2601      	movs	r6, #1
      WIRE_WRITE(pgm_read_byte(c++));
   d4e68:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d4e6a:	f815 1b01 	ldrb.w	r1, [r5], #1
   d4e6e:	6803      	ldr	r3, [r0, #0]
      bytesOut++;
   d4e70:	3601      	adds	r6, #1
      WIRE_WRITE(pgm_read_byte(c++));
   d4e72:	689b      	ldr	r3, [r3, #8]
   d4e74:	4798      	blx	r3
      bytesOut++;
   d4e76:	b2f6      	uxtb	r6, r6
    while(n--) {
   d4e78:	e7e4      	b.n	d4e44 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x22>
}
   d4e7a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    wire->endTransmission();
   d4e7e:	f001 ba94 	b.w	d63aa <_ZN7TwoWire15endTransmissionEv>
    SSD1306_MODE_COMMAND
   d4e82:	f994 3035 	ldrsb.w	r3, [r4, #53]	; 0x35
   d4e86:	4601      	mov	r1, r0
   d4e88:	b298      	uxth	r0, r3
   d4e8a:	f001 fbce 	bl	d662a <digitalWrite>
    while(n--) SPIwrite(pgm_read_byte(c++));
   d4e8e:	42af      	cmp	r7, r5
   d4e90:	d022      	beq.n	d4ed8 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0xb6>
  if(spi) {
   d4e92:	6a60      	ldr	r0, [r4, #36]	; 0x24
    while(n--) SPIwrite(pgm_read_byte(c++));
   d4e94:	f815 9b01 	ldrb.w	r9, [r5], #1
  if(spi) {
   d4e98:	b118      	cbz	r0, d4ea2 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x80>
    (void)spi->transfer(d);
   d4e9a:	4649      	mov	r1, r9
   d4e9c:	f000 fe4e 	bl	d5b3c <_ZN8SPIClass8transferEh>
   d4ea0:	e7f5      	b.n	d4e8e <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x6c>
   d4ea2:	2608      	movs	r6, #8
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   d4ea4:	f04f 0880 	mov.w	r8, #128	; 0x80
      digitalWrite(mosiPin, d & bit);
   d4ea8:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   d4eac:	ea09 0108 	and.w	r1, r9, r8
   d4eb0:	b280      	uxth	r0, r0
   d4eb2:	f001 fbba 	bl	d662a <digitalWrite>
      digitalWrite(clkPin , HIGH);
   d4eb6:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   d4eba:	2101      	movs	r1, #1
   d4ebc:	b280      	uxth	r0, r0
   d4ebe:	f001 fbb4 	bl	d662a <digitalWrite>
      digitalWrite(clkPin , LOW);
   d4ec2:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   d4ec6:	2100      	movs	r1, #0
   d4ec8:	b280      	uxth	r0, r0
   d4eca:	f001 fbae 	bl	d662a <digitalWrite>
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   d4ece:	3e01      	subs	r6, #1
   d4ed0:	ea4f 0858 	mov.w	r8, r8, lsr #1
   d4ed4:	d1e8      	bne.n	d4ea8 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x86>
   d4ed6:	e7da      	b.n	d4e8e <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x6c>
}
   d4ed8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000d4edc <_ZN16Adafruit_SSD130612clearDisplayEv>:
  memset(buffer, 0, WIDTH * ((HEIGHT + 7) / 8));
   d4edc:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
   d4ee0:	1dda      	adds	r2, r3, #7
   d4ee2:	bf48      	it	mi
   d4ee4:	f103 020e 	addmi.w	r2, r3, #14
   d4ee8:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
   d4eec:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   d4eee:	10d2      	asrs	r2, r2, #3
   d4ef0:	435a      	muls	r2, r3
   d4ef2:	2100      	movs	r1, #0
   d4ef4:	f002 b8f6 	b.w	d70e4 <memset>

000d4ef8 <_ZN16Adafruit_SSD13065beginEhhbb>:
  boolean periphBegin) {
   d4ef8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   d4efc:	461e      	mov	r6, r3
  if((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
   d4efe:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  boolean periphBegin) {
   d4f00:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
   d4f04:	4604      	mov	r4, r0
   d4f06:	460f      	mov	r7, r1
   d4f08:	4615      	mov	r5, r2
  if((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
   d4f0a:	b1b3      	cbz	r3, d4f3a <_ZN16Adafruit_SSD13065beginEhhbb+0x42>
  clearDisplay();
   d4f0c:	4620      	mov	r0, r4
   d4f0e:	f7ff ffe5 	bl	d4edc <_ZN16Adafruit_SSD130612clearDisplayEv>
  if(HEIGHT > 32) {
   d4f12:	f9b4 000a 	ldrsh.w	r0, [r4, #10]
   d4f16:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
   d4f1a:	2820      	cmp	r0, #32
   d4f1c:	dc1f      	bgt.n	d4f5e <_ZN16Adafruit_SSD13065beginEhhbb+0x66>
    drawBitmap((WIDTH - splash2_width) / 2, (HEIGHT - splash2_height) / 2,
   d4f1e:	2320      	movs	r3, #32
   d4f20:	2201      	movs	r2, #1
   d4f22:	e9cd 3201 	strd	r3, r2, [sp, #4]
   d4f26:	3820      	subs	r0, #32
   d4f28:	2373      	movs	r3, #115	; 0x73
   d4f2a:	3973      	subs	r1, #115	; 0x73
   d4f2c:	9300      	str	r3, [sp, #0]
   d4f2e:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
   d4f32:	4b89      	ldr	r3, [pc, #548]	; (d5158 <_ZN16Adafruit_SSD13065beginEhhbb+0x260>)
   d4f34:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
   d4f38:	e01f      	b.n	d4f7a <_ZN16Adafruit_SSD13065beginEhhbb+0x82>
  if((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
   d4f3a:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
   d4f3e:	1dd8      	adds	r0, r3, #7
   d4f40:	bf48      	it	mi
   d4f42:	f103 000e 	addmi.w	r0, r3, #14
   d4f46:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
   d4f4a:	10c0      	asrs	r0, r0, #3
   d4f4c:	4358      	muls	r0, r3
   d4f4e:	f000 fcef 	bl	d5930 <malloc>
   d4f52:	62e0      	str	r0, [r4, #44]	; 0x2c
   d4f54:	2800      	cmp	r0, #0
   d4f56:	d1d9      	bne.n	d4f0c <_ZN16Adafruit_SSD13065beginEhhbb+0x14>
}
   d4f58:	b004      	add	sp, #16
   d4f5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    drawBitmap((WIDTH - splash1_width) / 2, (HEIGHT - splash1_height) / 2,
   d4f5e:	2340      	movs	r3, #64	; 0x40
   d4f60:	f04f 0c01 	mov.w	ip, #1
   d4f64:	e9cd 3c01 	strd	r3, ip, [sp, #4]
   d4f68:	2352      	movs	r3, #82	; 0x52
   d4f6a:	3840      	subs	r0, #64	; 0x40
   d4f6c:	3952      	subs	r1, #82	; 0x52
   d4f6e:	9300      	str	r3, [sp, #0]
   d4f70:	4b7a      	ldr	r3, [pc, #488]	; (d515c <_ZN16Adafruit_SSD13065beginEhhbb+0x264>)
   d4f72:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
   d4f76:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
    drawBitmap((WIDTH - splash2_width) / 2, (HEIGHT - splash2_height) / 2,
   d4f7a:	f340 024f 	sbfx	r2, r0, #1, #16
   d4f7e:	f341 014f 	sbfx	r1, r1, #1, #16
   d4f82:	4620      	mov	r0, r4
   d4f84:	f7ff fb56 	bl	d4634 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>
  if(wire) { // Using I2C
   d4f88:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  vccstate = vcs;
   d4f8a:	f884 7031 	strb.w	r7, [r4, #49]	; 0x31
  if(wire) { // Using I2C
   d4f8e:	2800      	cmp	r0, #0
   d4f90:	d078      	beq.n	d5084 <_ZN16Adafruit_SSD13065beginEhhbb+0x18c>
    i2caddr = addr ? addr : ((HEIGHT == 32) ? 0x3C : 0x3D);
   d4f92:	2d00      	cmp	r5, #0
   d4f94:	d174      	bne.n	d5080 <_ZN16Adafruit_SSD13065beginEhhbb+0x188>
   d4f96:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
   d4f9a:	2b20      	cmp	r3, #32
   d4f9c:	bf0c      	ite	eq
   d4f9e:	253c      	moveq	r5, #60	; 0x3c
   d4fa0:	253d      	movne	r5, #61	; 0x3d
   d4fa2:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
    if(periphBegin) wire->begin();
   d4fa6:	f1b8 0f00 	cmp.w	r8, #0
   d4faa:	d001      	beq.n	d4fb0 <_ZN16Adafruit_SSD13065beginEhhbb+0xb8>
   d4fac:	f001 f9ec 	bl	d6388 <_ZN7TwoWire5beginEv>
  if(reset && (rstPin >= 0)) {
   d4fb0:	b1fe      	cbz	r6, d4ff2 <_ZN16Adafruit_SSD13065beginEhhbb+0xfa>
   d4fb2:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   d4fb6:	2800      	cmp	r0, #0
   d4fb8:	db1b      	blt.n	d4ff2 <_ZN16Adafruit_SSD13065beginEhhbb+0xfa>
    pinMode(     rstPin, OUTPUT);
   d4fba:	2101      	movs	r1, #1
   d4fbc:	b280      	uxth	r0, r0
   d4fbe:	f001 fb23 	bl	d6608 <pinMode>
    digitalWrite(rstPin, HIGH);
   d4fc2:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   d4fc6:	2101      	movs	r1, #1
   d4fc8:	b280      	uxth	r0, r0
   d4fca:	f001 fb2e 	bl	d662a <digitalWrite>
    delay(1);                   // VDD goes high at start, pause for 1 ms
   d4fce:	2001      	movs	r0, #1
   d4fd0:	f000 ff76 	bl	d5ec0 <delay>
    digitalWrite(rstPin, LOW);  // Bring reset low
   d4fd4:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   d4fd8:	2100      	movs	r1, #0
   d4fda:	b280      	uxth	r0, r0
   d4fdc:	f001 fb25 	bl	d662a <digitalWrite>
    delay(10);                  // Wait 10 ms
   d4fe0:	200a      	movs	r0, #10
   d4fe2:	f000 ff6d 	bl	d5ec0 <delay>
    digitalWrite(rstPin, HIGH); // Bring out of reset
   d4fe6:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   d4fea:	2101      	movs	r1, #1
   d4fec:	b280      	uxth	r0, r0
   d4fee:	f001 fb1c 	bl	d662a <digitalWrite>
  TRANSACTION_START
   d4ff2:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d4ff4:	2800      	cmp	r0, #0
   d4ff6:	d074      	beq.n	d50e2 <_ZN16Adafruit_SSD13065beginEhhbb+0x1ea>
   d4ff8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   d4ffa:	f001 f9c1 	bl	d6380 <_ZN7TwoWire8setSpeedEm>
  ssd1306_commandList(init1, sizeof(init1));
   d4ffe:	2204      	movs	r2, #4
   d5000:	4957      	ldr	r1, [pc, #348]	; (d5160 <_ZN16Adafruit_SSD13065beginEhhbb+0x268>)
   d5002:	4620      	mov	r0, r4
   d5004:	f7ff ff0d 	bl	d4e22 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1(HEIGHT - 1);
   d5008:	7aa1      	ldrb	r1, [r4, #10]
   d500a:	3901      	subs	r1, #1
   d500c:	b2c9      	uxtb	r1, r1
   d500e:	4620      	mov	r0, r4
   d5010:	f7ff fea0 	bl	d4d54 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_commandList(init2, sizeof(init2));
   d5014:	4953      	ldr	r1, [pc, #332]	; (d5164 <_ZN16Adafruit_SSD13065beginEhhbb+0x26c>)
   d5016:	2204      	movs	r2, #4
   d5018:	4620      	mov	r0, r4
   d501a:	f7ff ff02 	bl	d4e22 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0x14);
   d501e:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   d5022:	2b01      	cmp	r3, #1
   d5024:	bf0c      	ite	eq
   d5026:	2110      	moveq	r1, #16
   d5028:	2114      	movne	r1, #20
   d502a:	4620      	mov	r0, r4
   d502c:	f7ff fe92 	bl	d4d54 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_commandList(init3, sizeof(init3));
   d5030:	2204      	movs	r2, #4
   d5032:	494d      	ldr	r1, [pc, #308]	; (d5168 <_ZN16Adafruit_SSD13065beginEhhbb+0x270>)
   d5034:	4620      	mov	r0, r4
   d5036:	f7ff fef4 	bl	d4e22 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  if((WIDTH == 128) && (HEIGHT == 32)) {
   d503a:	68a3      	ldr	r3, [r4, #8]
   d503c:	4a4b      	ldr	r2, [pc, #300]	; (d516c <_ZN16Adafruit_SSD13065beginEhhbb+0x274>)
   d503e:	4293      	cmp	r3, r2
   d5040:	d15c      	bne.n	d50fc <_ZN16Adafruit_SSD13065beginEhhbb+0x204>
    ssd1306_commandList(init4a, sizeof(init4a));
   d5042:	494b      	ldr	r1, [pc, #300]	; (d5170 <_ZN16Adafruit_SSD13065beginEhhbb+0x278>)
   d5044:	2204      	movs	r2, #4
   d5046:	4620      	mov	r0, r4
   d5048:	f7ff feeb 	bl	d4e22 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1(SSD1306_SETPRECHARGE); // 0xd9
   d504c:	21d9      	movs	r1, #217	; 0xd9
   d504e:	4620      	mov	r0, r4
   d5050:	f7ff fe80 	bl	d4d54 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x22 : 0xF1);
   d5054:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   d5058:	2b01      	cmp	r3, #1
   d505a:	bf0c      	ite	eq
   d505c:	2122      	moveq	r1, #34	; 0x22
   d505e:	21f1      	movne	r1, #241	; 0xf1
   d5060:	4620      	mov	r0, r4
   d5062:	f7ff fe77 	bl	d4d54 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_commandList(init5, sizeof(init5));
   d5066:	4620      	mov	r0, r4
   d5068:	4942      	ldr	r1, [pc, #264]	; (d5174 <_ZN16Adafruit_SSD13065beginEhhbb+0x27c>)
   d506a:	2206      	movs	r2, #6
   d506c:	f7ff fed9 	bl	d4e22 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  TRANSACTION_END
   d5070:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d5072:	2800      	cmp	r0, #0
   d5074:	d063      	beq.n	d513e <_ZN16Adafruit_SSD13065beginEhhbb+0x246>
   d5076:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
   d5078:	f001 f982 	bl	d6380 <_ZN7TwoWire8setSpeedEm>
  return true; // Success
   d507c:	2001      	movs	r0, #1
   d507e:	e76b      	b.n	d4f58 <_ZN16Adafruit_SSD13065beginEhhbb+0x60>
    i2caddr = addr ? addr : ((HEIGHT == 32) ? 0x3C : 0x3D);
   d5080:	b26d      	sxtb	r5, r5
   d5082:	e78e      	b.n	d4fa2 <_ZN16Adafruit_SSD13065beginEhhbb+0xaa>
    pinMode(dcPin, OUTPUT); // Set data/command pin as output
   d5084:	f994 0035 	ldrsb.w	r0, [r4, #53]	; 0x35
   d5088:	2101      	movs	r1, #1
   d508a:	b280      	uxth	r0, r0
   d508c:	f001 fabc 	bl	d6608 <pinMode>
    pinMode(csPin, OUTPUT); // Same for chip select
   d5090:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   d5094:	2101      	movs	r1, #1
   d5096:	b280      	uxth	r0, r0
   d5098:	f001 fab6 	bl	d6608 <pinMode>
    SSD1306_DESELECT
   d509c:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   d50a0:	2101      	movs	r1, #1
   d50a2:	b280      	uxth	r0, r0
   d50a4:	f001 fac1 	bl	d662a <digitalWrite>
    if(spi) { // Hardware SPI
   d50a8:	6a65      	ldr	r5, [r4, #36]	; 0x24
   d50aa:	b13d      	cbz	r5, d50bc <_ZN16Adafruit_SSD13065beginEhhbb+0x1c4>
      if(periphBegin) spi->begin();
   d50ac:	f1b8 0f00 	cmp.w	r8, #0
   d50b0:	f43f af7e 	beq.w	d4fb0 <_ZN16Adafruit_SSD13065beginEhhbb+0xb8>
   d50b4:	4628      	mov	r0, r5
   d50b6:	f000 fca9 	bl	d5a0c <_ZN8SPIClass5beginEv>
   d50ba:	e779      	b.n	d4fb0 <_ZN16Adafruit_SSD13065beginEhhbb+0xb8>
      pinMode(mosiPin, OUTPUT); // MOSI and SCLK outputs
   d50bc:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   d50c0:	2101      	movs	r1, #1
   d50c2:	b280      	uxth	r0, r0
   d50c4:	f001 faa0 	bl	d6608 <pinMode>
      pinMode(clkPin , OUTPUT);
   d50c8:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   d50cc:	2101      	movs	r1, #1
   d50ce:	b280      	uxth	r0, r0
   d50d0:	f001 fa9a 	bl	d6608 <pinMode>
      digitalWrite(clkPin, LOW); // Clock low
   d50d4:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   d50d8:	4629      	mov	r1, r5
   d50da:	b280      	uxth	r0, r0
   d50dc:	f001 faa5 	bl	d662a <digitalWrite>
   d50e0:	e766      	b.n	d4fb0 <_ZN16Adafruit_SSD13065beginEhhbb+0xb8>
  TRANSACTION_START
   d50e2:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d50e4:	b118      	cbz	r0, d50ee <_ZN16Adafruit_SSD13065beginEhhbb+0x1f6>
   d50e6:	f104 0138 	add.w	r1, r4, #56	; 0x38
   d50ea:	f000 fcb9 	bl	d5a60 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
   d50ee:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   d50f2:	2100      	movs	r1, #0
   d50f4:	b280      	uxth	r0, r0
   d50f6:	f001 fa98 	bl	d662a <digitalWrite>
   d50fa:	e780      	b.n	d4ffe <_ZN16Adafruit_SSD13065beginEhhbb+0x106>
  } else if((WIDTH == 128) && (HEIGHT == 64)) {
   d50fc:	4a1e      	ldr	r2, [pc, #120]	; (d5178 <_ZN16Adafruit_SSD13065beginEhhbb+0x280>)
   d50fe:	4293      	cmp	r3, r2
   d5100:	d10e      	bne.n	d5120 <_ZN16Adafruit_SSD13065beginEhhbb+0x228>
    ssd1306_commandList(init4b, sizeof(init4b));
   d5102:	491e      	ldr	r1, [pc, #120]	; (d517c <_ZN16Adafruit_SSD13065beginEhhbb+0x284>)
   d5104:	2203      	movs	r2, #3
   d5106:	4620      	mov	r0, r4
   d5108:	f7ff fe8b 	bl	d4e22 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
    ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x9F : 0xCF);
   d510c:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   d5110:	2b01      	cmp	r3, #1
   d5112:	bf0c      	ite	eq
   d5114:	219f      	moveq	r1, #159	; 0x9f
   d5116:	21cf      	movne	r1, #207	; 0xcf
    ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0xAF);
   d5118:	4620      	mov	r0, r4
   d511a:	f7ff fe1b 	bl	d4d54 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
   d511e:	e795      	b.n	d504c <_ZN16Adafruit_SSD13065beginEhhbb+0x154>
  } else if((WIDTH == 96) && (HEIGHT == 16)) {
   d5120:	4a17      	ldr	r2, [pc, #92]	; (d5180 <_ZN16Adafruit_SSD13065beginEhhbb+0x288>)
   d5122:	4293      	cmp	r3, r2
   d5124:	d192      	bne.n	d504c <_ZN16Adafruit_SSD13065beginEhhbb+0x154>
    ssd1306_commandList(init4c, sizeof(init4c));
   d5126:	4917      	ldr	r1, [pc, #92]	; (d5184 <_ZN16Adafruit_SSD13065beginEhhbb+0x28c>)
   d5128:	2203      	movs	r2, #3
   d512a:	4620      	mov	r0, r4
   d512c:	f7ff fe79 	bl	d4e22 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
    ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0xAF);
   d5130:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   d5134:	2b01      	cmp	r3, #1
   d5136:	bf0c      	ite	eq
   d5138:	2110      	moveq	r1, #16
   d513a:	21af      	movne	r1, #175	; 0xaf
   d513c:	e7ec      	b.n	d5118 <_ZN16Adafruit_SSD13065beginEhhbb+0x220>
  TRANSACTION_END
   d513e:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   d5142:	2101      	movs	r1, #1
   d5144:	b280      	uxth	r0, r0
   d5146:	f001 fa70 	bl	d662a <digitalWrite>
   d514a:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d514c:	2800      	cmp	r0, #0
   d514e:	d095      	beq.n	d507c <_ZN16Adafruit_SSD13065beginEhhbb+0x184>
   d5150:	f000 fc6d 	bl	d5a2e <_ZN8SPIClass14endTransactionEv>
   d5154:	e792      	b.n	d507c <_ZN16Adafruit_SSD13065beginEhhbb+0x184>
   d5156:	bf00      	nop
   d5158:	000d7a54 	.word	0x000d7a54
   d515c:	000d7794 	.word	0x000d7794
   d5160:	000d7c9c 	.word	0x000d7c9c
   d5164:	000d7ca0 	.word	0x000d7ca0
   d5168:	000d7ca4 	.word	0x000d7ca4
   d516c:	00200080 	.word	0x00200080
   d5170:	000d7cae 	.word	0x000d7cae
   d5174:	000d7ca8 	.word	0x000d7ca8
   d5178:	00400080 	.word	0x00400080
   d517c:	000d7cb2 	.word	0x000d7cb2
   d5180:	00100060 	.word	0x00100060
   d5184:	000d7cb5 	.word	0x000d7cb5

000d5188 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst>:
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   d5188:	b570      	push	{r4, r5, r6, lr}
  if((y >= 0) && (y < HEIGHT)) { // Y coord in bounds?
   d518a:	2a00      	cmp	r2, #0
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   d518c:	f8bd 5010 	ldrh.w	r5, [sp, #16]
  if((y >= 0) && (y < HEIGHT)) { // Y coord in bounds?
   d5190:	db3d      	blt.n	d520e <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   d5192:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
   d5196:	4294      	cmp	r4, r2
   d5198:	dd39      	ble.n	d520e <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
    if(x < 0) { // Clip left
   d519a:	2900      	cmp	r1, #0
      w += x;
   d519c:	bfbe      	ittt	lt
   d519e:	185b      	addlt	r3, r3, r1
   d51a0:	b21b      	sxthlt	r3, r3
      x  = 0;
   d51a2:	2100      	movlt	r1, #0
    if((x + w) > WIDTH) { // Clip right
   d51a4:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
   d51a8:	18ce      	adds	r6, r1, r3
   d51aa:	42a6      	cmp	r6, r4
      w = (WIDTH - x);
   d51ac:	bfc4      	itt	gt
   d51ae:	1a63      	subgt	r3, r4, r1
   d51b0:	b21b      	sxthgt	r3, r3
    if(w > 0) { // Proceed only if width is positive
   d51b2:	2b00      	cmp	r3, #0
   d51b4:	dd2b      	ble.n	d520e <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x],
   d51b6:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   d51b8:	10d6      	asrs	r6, r2, #3
   d51ba:	fb14 1106 	smlabb	r1, r4, r6, r1
   d51be:	4401      	add	r1, r0
               mask = 1 << (y & 7);
   d51c0:	f002 0007 	and.w	r0, r2, #7
   d51c4:	2201      	movs	r2, #1
   d51c6:	4082      	lsls	r2, r0
      switch(color) {
   d51c8:	2d01      	cmp	r5, #1
               mask = 1 << (y & 7);
   d51ca:	b2d2      	uxtb	r2, r2
      switch(color) {
   d51cc:	d016      	beq.n	d51fc <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x74>
   d51ce:	2d02      	cmp	r5, #2
   d51d0:	d00b      	beq.n	d51ea <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x62>
   d51d2:	b9e5      	cbnz	r5, d520e <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
       case BLACK: mask = ~mask; while(w--) { *pBuf++ &= mask; }; break;
   d51d4:	43d2      	mvns	r2, r2
   d51d6:	b2d2      	uxtb	r2, r2
   d51d8:	440b      	add	r3, r1
   d51da:	4299      	cmp	r1, r3
   d51dc:	d017      	beq.n	d520e <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   d51de:	f811 0b01 	ldrb.w	r0, [r1], #1
   d51e2:	4010      	ands	r0, r2
   d51e4:	f801 0c01 	strb.w	r0, [r1, #-1]
   d51e8:	e7f7      	b.n	d51da <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x52>
   d51ea:	440b      	add	r3, r1
       case INVERSE:             while(w--) { *pBuf++ ^= mask; }; break;
   d51ec:	4299      	cmp	r1, r3
   d51ee:	d00e      	beq.n	d520e <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   d51f0:	f811 0b01 	ldrb.w	r0, [r1], #1
   d51f4:	4050      	eors	r0, r2
   d51f6:	f801 0c01 	strb.w	r0, [r1, #-1]
   d51fa:	e7f7      	b.n	d51ec <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x64>
   d51fc:	440b      	add	r3, r1
       case WHITE:               while(w--) { *pBuf++ |= mask; }; break;
   d51fe:	4299      	cmp	r1, r3
   d5200:	d005      	beq.n	d520e <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   d5202:	f811 0b01 	ldrb.w	r0, [r1], #1
   d5206:	4310      	orrs	r0, r2
   d5208:	f801 0c01 	strb.w	r0, [r1, #-1]
   d520c:	e7f7      	b.n	d51fe <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x76>
}
   d520e:	bd70      	pop	{r4, r5, r6, pc}

000d5210 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst>:
  int16_t x, int16_t __y, int16_t __h, uint16_t color) {
   d5210:	b5f0      	push	{r4, r5, r6, r7, lr}
  if((x >= 0) && (x < WIDTH)) { // X coord in bounds?
   d5212:	2900      	cmp	r1, #0
  int16_t x, int16_t __y, int16_t __h, uint16_t color) {
   d5214:	f8bd 6014 	ldrh.w	r6, [sp, #20]
  if((x >= 0) && (x < WIDTH)) { // X coord in bounds?
   d5218:	db76      	blt.n	d5308 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
   d521a:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
   d521e:	42a9      	cmp	r1, r5
   d5220:	da72      	bge.n	d5308 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
    if(__y < 0) { // Clip top
   d5222:	2a00      	cmp	r2, #0
      __h += __y;
   d5224:	bfbc      	itt	lt
   d5226:	18d2      	addlt	r2, r2, r3
   d5228:	b213      	sxthlt	r3, r2
    if((__y + __h) > HEIGHT) { // Clip bottom
   d522a:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
      __y = 0;
   d522e:	bfb8      	it	lt
   d5230:	2200      	movlt	r2, #0
    if((__y + __h) > HEIGHT) { // Clip bottom
   d5232:	18d7      	adds	r7, r2, r3
   d5234:	42a7      	cmp	r7, r4
      __h = (HEIGHT - __y);
   d5236:	bfc4      	itt	gt
   d5238:	1aa3      	subgt	r3, r4, r2
   d523a:	b21b      	sxthgt	r3, r3
    if(__h > 0) { // Proceed only if height is now positive
   d523c:	2b00      	cmp	r3, #0
   d523e:	dd63      	ble.n	d5308 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x];
   d5240:	f3c2 04c4 	ubfx	r4, r2, #3, #5
   d5244:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
   d5246:	fb15 1104 	smlabb	r1, r5, r4, r1
      if(mod) {
   d524a:	f012 0207 	ands.w	r2, r2, #7
      uint8_t  y = __y, h = __h;
   d524e:	b2db      	uxtb	r3, r3
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x];
   d5250:	eb07 0401 	add.w	r4, r7, r1
      if(mod) {
   d5254:	d023      	beq.n	d529e <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x8e>
        mod = 8 - mod;
   d5256:	f1c2 0208 	rsb	r2, r2, #8
   d525a:	b2d2      	uxtb	r2, r2
        uint8_t mask = pgm_read_byte(&premask[mod]);
   d525c:	4d2c      	ldr	r5, [pc, #176]	; (d5310 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x100>)
        if(h < mod) mask &= (0XFF >> (mod - h));
   d525e:	4293      	cmp	r3, r2
   d5260:	bf3c      	itt	cc
   d5262:	f04f 0cff 	movcc.w	ip, #255	; 0xff
   d5266:	eba2 0e03 	subcc.w	lr, r2, r3
        uint8_t mask = pgm_read_byte(&premask[mod]);
   d526a:	5cad      	ldrb	r5, [r5, r2]
        if(h < mod) mask &= (0XFF >> (mod - h));
   d526c:	bf3c      	itt	cc
   d526e:	fa4c fc0e 	asrcc.w	ip, ip, lr
   d5272:	ea0c 0505 	andcc.w	r5, ip, r5
        switch(color) {
   d5276:	2e01      	cmp	r6, #1
   d5278:	d007      	beq.n	d528a <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x7a>
   d527a:	2e02      	cmp	r6, #2
   d527c:	d02e      	beq.n	d52dc <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xcc>
   d527e:	b94e      	cbnz	r6, d5294 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x84>
         case BLACK:   *pBuf &= ~mask; break;
   d5280:	f817 c001 	ldrb.w	ip, [r7, r1]
   d5284:	ea2c 0505 	bic.w	r5, ip, r5
   d5288:	e003      	b.n	d5292 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x82>
         case WHITE:   *pBuf |=  mask; break;
   d528a:	f817 c001 	ldrb.w	ip, [r7, r1]
   d528e:	ea45 050c 	orr.w	r5, r5, ip
         case INVERSE: *pBuf ^=  mask; break;
   d5292:	547d      	strb	r5, [r7, r1]
      if(h >= mod) { // More to go?
   d5294:	4293      	cmp	r3, r2
   d5296:	d337      	bcc.n	d5308 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
        pBuf += WIDTH;
   d5298:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
   d529c:	440c      	add	r4, r1
        h -= mod;
   d529e:	1a9a      	subs	r2, r3, r2
   d52a0:	b2d2      	uxtb	r2, r2
        if(h >= 8) {
   d52a2:	2a07      	cmp	r2, #7
   d52a4:	d90e      	bls.n	d52c4 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xb4>
          if(color == INVERSE) {
   d52a6:	2e02      	cmp	r6, #2
   d52a8:	d11d      	bne.n	d52e6 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xd6>
   d52aa:	4613      	mov	r3, r2
              *pBuf ^= 0xFF;  // Invert byte
   d52ac:	7821      	ldrb	r1, [r4, #0]
   d52ae:	43c9      	mvns	r1, r1
   d52b0:	7021      	strb	r1, [r4, #0]
              h     -= 8;     // Subtract 8 rows from height
   d52b2:	3b08      	subs	r3, #8
              pBuf  += WIDTH; // Advance pointer 8 rows
   d52b4:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
              h     -= 8;     // Subtract 8 rows from height
   d52b8:	b2db      	uxtb	r3, r3
            } while(h >= 8);
   d52ba:	2b07      	cmp	r3, #7
              pBuf  += WIDTH; // Advance pointer 8 rows
   d52bc:	440c      	add	r4, r1
            } while(h >= 8);
   d52be:	d8f5      	bhi.n	d52ac <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x9c>
   d52c0:	f002 0207 	and.w	r2, r2, #7
        if(h) { // Do the final partial byte, if necessary
   d52c4:	b302      	cbz	r2, d5308 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
          uint8_t mask = pgm_read_byte(&postmask[mod]);
   d52c6:	4b13      	ldr	r3, [pc, #76]	; (d5314 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x104>)
          switch(color) {
   d52c8:	2e01      	cmp	r6, #1
          uint8_t mask = pgm_read_byte(&postmask[mod]);
   d52ca:	5c9b      	ldrb	r3, [r3, r2]
          switch(color) {
   d52cc:	d019      	beq.n	d5302 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf2>
   d52ce:	2e02      	cmp	r6, #2
   d52d0:	d01b      	beq.n	d530a <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xfa>
   d52d2:	b9ce      	cbnz	r6, d5308 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
           case BLACK:   *pBuf &= ~mask; break;
   d52d4:	7822      	ldrb	r2, [r4, #0]
   d52d6:	ea22 0303 	bic.w	r3, r2, r3
   d52da:	e014      	b.n	d5306 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf6>
         case INVERSE: *pBuf ^=  mask; break;
   d52dc:	f817 c001 	ldrb.w	ip, [r7, r1]
   d52e0:	ea85 050c 	eor.w	r5, r5, ip
   d52e4:	e7d5      	b.n	d5292 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x82>
            uint8_t val = (color != BLACK) ? 255 : 0;
   d52e6:	2e00      	cmp	r6, #0
   d52e8:	bf14      	ite	ne
   d52ea:	25ff      	movne	r5, #255	; 0xff
   d52ec:	2500      	moveq	r5, #0
   d52ee:	4613      	mov	r3, r2
              *pBuf = val;    // Set byte
   d52f0:	7025      	strb	r5, [r4, #0]
              h    -= 8;      // Subtract 8 rows from height
   d52f2:	3b08      	subs	r3, #8
              pBuf += WIDTH;  // Advance pointer 8 rows
   d52f4:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
              h    -= 8;      // Subtract 8 rows from height
   d52f8:	b2db      	uxtb	r3, r3
            } while(h >= 8);
   d52fa:	2b07      	cmp	r3, #7
              pBuf += WIDTH;  // Advance pointer 8 rows
   d52fc:	440c      	add	r4, r1
            } while(h >= 8);
   d52fe:	d8f7      	bhi.n	d52f0 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xe0>
   d5300:	e7de      	b.n	d52c0 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xb0>
           case WHITE:   *pBuf |=  mask; break;
   d5302:	7822      	ldrb	r2, [r4, #0]
   d5304:	4313      	orrs	r3, r2
           case INVERSE: *pBuf ^=  mask; break;
   d5306:	7023      	strb	r3, [r4, #0]
}
   d5308:	bdf0      	pop	{r4, r5, r6, r7, pc}
           case INVERSE: *pBuf ^=  mask; break;
   d530a:	7822      	ldrb	r2, [r4, #0]
   d530c:	4053      	eors	r3, r2
   d530e:	e7fa      	b.n	d5306 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf6>
   d5310:	000d7c8c 	.word	0x000d7c8c
   d5314:	000d7c94 	.word	0x000d7c94

000d5318 <_ZN16Adafruit_SSD130613drawFastHLineEssst>:
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   d5318:	b470      	push	{r4, r5, r6}
   d531a:	4614      	mov	r4, r2
  switch(rotation) {
   d531c:	7e82      	ldrb	r2, [r0, #26]
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   d531e:	f8bd 600c 	ldrh.w	r6, [sp, #12]
  switch(rotation) {
   d5322:	2a02      	cmp	r2, #2
   d5324:	d00d      	beq.n	d5342 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x2a>
   d5326:	2a03      	cmp	r2, #3
   d5328:	d018      	beq.n	d535c <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x44>
   d532a:	2a01      	cmp	r2, #1
   d532c:	d111      	bne.n	d5352 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x3a>
    x = WIDTH - x - 1;
   d532e:	8902      	ldrh	r2, [r0, #8]
   d5330:	43e4      	mvns	r4, r4
   d5332:	4414      	add	r4, r2
   d5334:	b224      	sxth	r4, r4
  if(bSwap) drawFastVLineInternal(x, y, w, color);
   d5336:	9603      	str	r6, [sp, #12]
   d5338:	460a      	mov	r2, r1
   d533a:	4621      	mov	r1, r4
}
   d533c:	bc70      	pop	{r4, r5, r6}
  if(bSwap) drawFastVLineInternal(x, y, w, color);
   d533e:	f7ff bf67 	b.w	d5210 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst>
    y  = HEIGHT - y - 1;
   d5342:	8942      	ldrh	r2, [r0, #10]
    x -= (w-1);
   d5344:	8905      	ldrh	r5, [r0, #8]
    y  = HEIGHT - y - 1;
   d5346:	43e4      	mvns	r4, r4
    x -= (w-1);
   d5348:	4419      	add	r1, r3
    y  = HEIGHT - y - 1;
   d534a:	4414      	add	r4, r2
    x -= (w-1);
   d534c:	1a69      	subs	r1, r5, r1
    y  = HEIGHT - y - 1;
   d534e:	b224      	sxth	r4, r4
    x -= (w-1);
   d5350:	b209      	sxth	r1, r1
  else      drawFastHLineInternal(x, y, w, color);
   d5352:	9603      	str	r6, [sp, #12]
   d5354:	4622      	mov	r2, r4
}
   d5356:	bc70      	pop	{r4, r5, r6}
  else      drawFastHLineInternal(x, y, w, color);
   d5358:	f7ff bf16 	b.w	d5188 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst>
    y -= (w-1);
   d535c:	8945      	ldrh	r5, [r0, #10]
   d535e:	4419      	add	r1, r3
   d5360:	1a69      	subs	r1, r5, r1
   d5362:	b209      	sxth	r1, r1
    break;
   d5364:	e7e7      	b.n	d5336 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x1e>

000d5366 <_ZN16Adafruit_SSD130613drawFastVLineEssst>:
  int16_t x, int16_t y, int16_t h, uint16_t color) {
   d5366:	b430      	push	{r4, r5}
   d5368:	4614      	mov	r4, r2
  switch(rotation) {
   d536a:	7e82      	ldrb	r2, [r0, #26]
  int16_t x, int16_t y, int16_t h, uint16_t color) {
   d536c:	f8bd 5008 	ldrh.w	r5, [sp, #8]
  switch(rotation) {
   d5370:	2a02      	cmp	r2, #2
   d5372:	d00d      	beq.n	d5390 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x2a>
   d5374:	2a03      	cmp	r2, #3
   d5376:	d018      	beq.n	d53aa <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x44>
   d5378:	2a01      	cmp	r2, #1
   d537a:	d111      	bne.n	d53a0 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x3a>
    x -= (h-1);
   d537c:	18e2      	adds	r2, r4, r3
   d537e:	8904      	ldrh	r4, [r0, #8]
   d5380:	1aa4      	subs	r4, r4, r2
   d5382:	b224      	sxth	r4, r4
  if(bSwap) drawFastHLineInternal(x, y, h, color);
   d5384:	9502      	str	r5, [sp, #8]
   d5386:	460a      	mov	r2, r1
   d5388:	4621      	mov	r1, r4
}
   d538a:	bc30      	pop	{r4, r5}
  if(bSwap) drawFastHLineInternal(x, y, h, color);
   d538c:	f7ff befc 	b.w	d5188 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst>
    x = WIDTH  - x - 1;
   d5390:	8902      	ldrh	r2, [r0, #8]
   d5392:	43c9      	mvns	r1, r1
   d5394:	4411      	add	r1, r2
    y -= (h-1);
   d5396:	18e2      	adds	r2, r4, r3
   d5398:	8944      	ldrh	r4, [r0, #10]
   d539a:	1aa4      	subs	r4, r4, r2
    x = WIDTH  - x - 1;
   d539c:	b209      	sxth	r1, r1
    y -= (h-1);
   d539e:	b224      	sxth	r4, r4
  else      drawFastVLineInternal(x, y, h, color);
   d53a0:	9502      	str	r5, [sp, #8]
   d53a2:	4622      	mov	r2, r4
}
   d53a4:	bc30      	pop	{r4, r5}
  else      drawFastVLineInternal(x, y, h, color);
   d53a6:	f7ff bf33 	b.w	d5210 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst>
    y = HEIGHT - y - 1;
   d53aa:	8942      	ldrh	r2, [r0, #10]
   d53ac:	43c9      	mvns	r1, r1
   d53ae:	4411      	add	r1, r2
   d53b0:	b209      	sxth	r1, r1
    break;
   d53b2:	e7e7      	b.n	d5384 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x1e>

000d53b4 <_ZN16Adafruit_SSD13067displayEv>:
void Adafruit_SSD1306::display(void) {
   d53b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d53b8:	4604      	mov	r4, r0
  TRANSACTION_START
   d53ba:	6a80      	ldr	r0, [r0, #40]	; 0x28
   d53bc:	2800      	cmp	r0, #0
   d53be:	d042      	beq.n	d5446 <_ZN16Adafruit_SSD13067displayEv+0x92>
   d53c0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   d53c2:	f000 ffdd 	bl	d6380 <_ZN7TwoWire8setSpeedEm>
  ssd1306_commandList(dlist1, sizeof(dlist1));
   d53c6:	4947      	ldr	r1, [pc, #284]	; (d54e4 <_ZN16Adafruit_SSD13067displayEv+0x130>)
   d53c8:	2205      	movs	r2, #5
   d53ca:	4620      	mov	r0, r4
   d53cc:	f7ff fd29 	bl	d4e22 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1(WIDTH - 1); // Column end address
   d53d0:	7a21      	ldrb	r1, [r4, #8]
   d53d2:	3901      	subs	r1, #1
   d53d4:	4620      	mov	r0, r4
   d53d6:	b2c9      	uxtb	r1, r1
   d53d8:	f7ff fcbc 	bl	d4d54 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  uint16_t count = WIDTH * ((HEIGHT + 7) / 8);
   d53dc:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
   d53e0:	1dde      	adds	r6, r3, #7
   d53e2:	bf48      	it	mi
   d53e4:	f103 060e 	addmi.w	r6, r3, #14
  if(wire) { // I2C
   d53e8:	e9d4 050a 	ldrd	r0, r5, [r4, #40]	; 0x28
  uint16_t count = WIDTH * ((HEIGHT + 7) / 8);
   d53ec:	8923      	ldrh	r3, [r4, #8]
   d53ee:	10f6      	asrs	r6, r6, #3
   d53f0:	fb13 f606 	smulbb	r6, r3, r6
  uint8_t *ptr   = buffer;
   d53f4:	fa15 f686 	uxtah	r6, r5, r6
  if(wire) { // I2C
   d53f8:	2800      	cmp	r0, #0
   d53fa:	d03a      	beq.n	d5472 <_ZN16Adafruit_SSD13067displayEv+0xbe>
    wire->beginTransmission(i2caddr);
   d53fc:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   d5400:	f000 ffcc 	bl	d639c <_ZN7TwoWire17beginTransmissionEi>
    WIRE_WRITE((uint8_t)0x40);
   d5404:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d5406:	6803      	ldr	r3, [r0, #0]
   d5408:	2140      	movs	r1, #64	; 0x40
   d540a:	689b      	ldr	r3, [r3, #8]
   d540c:	4798      	blx	r3
    uint8_t bytesOut = 1;
   d540e:	2701      	movs	r7, #1
    while(count--) {
   d5410:	42b5      	cmp	r5, r6
   d5412:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d5414:	d024      	beq.n	d5460 <_ZN16Adafruit_SSD13067displayEv+0xac>
      if(bytesOut >= WIRE_MAX) {
   d5416:	2f1f      	cmp	r7, #31
   d5418:	d90c      	bls.n	d5434 <_ZN16Adafruit_SSD13067displayEv+0x80>
        wire->endTransmission();
   d541a:	f000 ffc6 	bl	d63aa <_ZN7TwoWire15endTransmissionEv>
        wire->beginTransmission(i2caddr);
   d541e:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   d5422:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d5424:	f000 ffba 	bl	d639c <_ZN7TwoWire17beginTransmissionEi>
        WIRE_WRITE((uint8_t)0x40);
   d5428:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d542a:	6803      	ldr	r3, [r0, #0]
   d542c:	2140      	movs	r1, #64	; 0x40
   d542e:	689b      	ldr	r3, [r3, #8]
   d5430:	4798      	blx	r3
        bytesOut = 1;
   d5432:	2701      	movs	r7, #1
      WIRE_WRITE(*ptr++);
   d5434:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d5436:	f815 1b01 	ldrb.w	r1, [r5], #1
   d543a:	6803      	ldr	r3, [r0, #0]
      bytesOut++;
   d543c:	3701      	adds	r7, #1
      WIRE_WRITE(*ptr++);
   d543e:	689b      	ldr	r3, [r3, #8]
   d5440:	4798      	blx	r3
      bytesOut++;
   d5442:	b2ff      	uxtb	r7, r7
    while(count--) {
   d5444:	e7e4      	b.n	d5410 <_ZN16Adafruit_SSD13067displayEv+0x5c>
  TRANSACTION_START
   d5446:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d5448:	b118      	cbz	r0, d5452 <_ZN16Adafruit_SSD13067displayEv+0x9e>
   d544a:	f104 0138 	add.w	r1, r4, #56	; 0x38
   d544e:	f000 fb07 	bl	d5a60 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
   d5452:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   d5456:	2100      	movs	r1, #0
   d5458:	b280      	uxth	r0, r0
   d545a:	f001 f8e6 	bl	d662a <digitalWrite>
   d545e:	e7b2      	b.n	d53c6 <_ZN16Adafruit_SSD13067displayEv+0x12>
    wire->endTransmission();
   d5460:	f000 ffa3 	bl	d63aa <_ZN7TwoWire15endTransmissionEv>
  TRANSACTION_END
   d5464:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d5466:	b378      	cbz	r0, d54c8 <_ZN16Adafruit_SSD13067displayEv+0x114>
   d5468:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
}
   d546a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d546e:	f000 bf87 	b.w	d6380 <_ZN7TwoWire8setSpeedEm>
    SSD1306_MODE_DATA
   d5472:	f994 0035 	ldrsb.w	r0, [r4, #53]	; 0x35
   d5476:	2101      	movs	r1, #1
   d5478:	b280      	uxth	r0, r0
   d547a:	f001 f8d6 	bl	d662a <digitalWrite>
    while(count--) SPIwrite(*ptr++);
   d547e:	42b5      	cmp	r5, r6
   d5480:	d0f0      	beq.n	d5464 <_ZN16Adafruit_SSD13067displayEv+0xb0>
  if(spi) {
   d5482:	6a60      	ldr	r0, [r4, #36]	; 0x24
    while(count--) SPIwrite(*ptr++);
   d5484:	f815 9b01 	ldrb.w	r9, [r5], #1
  if(spi) {
   d5488:	b118      	cbz	r0, d5492 <_ZN16Adafruit_SSD13067displayEv+0xde>
    (void)spi->transfer(d);
   d548a:	4649      	mov	r1, r9
   d548c:	f000 fb56 	bl	d5b3c <_ZN8SPIClass8transferEh>
   d5490:	e7f5      	b.n	d547e <_ZN16Adafruit_SSD13067displayEv+0xca>
   d5492:	2708      	movs	r7, #8
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   d5494:	f04f 0880 	mov.w	r8, #128	; 0x80
      digitalWrite(mosiPin, d & bit);
   d5498:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   d549c:	ea09 0108 	and.w	r1, r9, r8
   d54a0:	b280      	uxth	r0, r0
   d54a2:	f001 f8c2 	bl	d662a <digitalWrite>
      digitalWrite(clkPin , HIGH);
   d54a6:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   d54aa:	2101      	movs	r1, #1
   d54ac:	b280      	uxth	r0, r0
   d54ae:	f001 f8bc 	bl	d662a <digitalWrite>
      digitalWrite(clkPin , LOW);
   d54b2:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   d54b6:	2100      	movs	r1, #0
   d54b8:	b280      	uxth	r0, r0
   d54ba:	f001 f8b6 	bl	d662a <digitalWrite>
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   d54be:	3f01      	subs	r7, #1
   d54c0:	ea4f 0858 	mov.w	r8, r8, lsr #1
   d54c4:	d1e8      	bne.n	d5498 <_ZN16Adafruit_SSD13067displayEv+0xe4>
   d54c6:	e7da      	b.n	d547e <_ZN16Adafruit_SSD13067displayEv+0xca>
  TRANSACTION_END
   d54c8:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   d54cc:	2101      	movs	r1, #1
   d54ce:	b280      	uxth	r0, r0
   d54d0:	f001 f8ab 	bl	d662a <digitalWrite>
   d54d4:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d54d6:	b118      	cbz	r0, d54e0 <_ZN16Adafruit_SSD13067displayEv+0x12c>
}
   d54d8:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  TRANSACTION_END
   d54dc:	f000 baa7 	b.w	d5a2e <_ZN8SPIClass14endTransactionEv>
}
   d54e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   d54e4:	000d7cb8 	.word	0x000d7cb8

000d54e8 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d54e8:	b508      	push	{r3, lr}
   d54ea:	4b02      	ldr	r3, [pc, #8]	; (d54f4 <netdb_freeaddrinfo+0xc>)
   d54ec:	681b      	ldr	r3, [r3, #0]
   d54ee:	689b      	ldr	r3, [r3, #8]
   d54f0:	9301      	str	r3, [sp, #4]
   d54f2:	bd08      	pop	{r3, pc}
   d54f4:	00030268 	.word	0x00030268

000d54f8 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d54f8:	b508      	push	{r3, lr}
   d54fa:	4b02      	ldr	r3, [pc, #8]	; (d5504 <netdb_getaddrinfo+0xc>)
   d54fc:	681b      	ldr	r3, [r3, #0]
   d54fe:	68db      	ldr	r3, [r3, #12]
   d5500:	9301      	str	r3, [sp, #4]
   d5502:	bd08      	pop	{r3, pc}
   d5504:	00030268 	.word	0x00030268

000d5508 <HAL_Validate_Pin_Function>:
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   d5508:	b508      	push	{r3, lr}
   d550a:	4b02      	ldr	r3, [pc, #8]	; (d5514 <HAL_Validate_Pin_Function+0xc>)
   d550c:	681b      	ldr	r3, [r3, #0]
   d550e:	685b      	ldr	r3, [r3, #4]
   d5510:	9301      	str	r3, [sp, #4]
   d5512:	bd08      	pop	{r3, pc}
   d5514:	0003022c 	.word	0x0003022c

000d5518 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d5518:	b508      	push	{r3, lr}
   d551a:	4b02      	ldr	r3, [pc, #8]	; (d5524 <HAL_Pin_Mode+0xc>)
   d551c:	681b      	ldr	r3, [r3, #0]
   d551e:	689b      	ldr	r3, [r3, #8]
   d5520:	9301      	str	r3, [sp, #4]
   d5522:	bd08      	pop	{r3, pc}
   d5524:	0003022c 	.word	0x0003022c

000d5528 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d5528:	b508      	push	{r3, lr}
   d552a:	4b02      	ldr	r3, [pc, #8]	; (d5534 <HAL_Get_Pin_Mode+0xc>)
   d552c:	681b      	ldr	r3, [r3, #0]
   d552e:	68db      	ldr	r3, [r3, #12]
   d5530:	9301      	str	r3, [sp, #4]
   d5532:	bd08      	pop	{r3, pc}
   d5534:	0003022c 	.word	0x0003022c

000d5538 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d5538:	b508      	push	{r3, lr}
   d553a:	4b02      	ldr	r3, [pc, #8]	; (d5544 <HAL_GPIO_Write+0xc>)
   d553c:	681b      	ldr	r3, [r3, #0]
   d553e:	691b      	ldr	r3, [r3, #16]
   d5540:	9301      	str	r3, [sp, #4]
   d5542:	bd08      	pop	{r3, pc}
   d5544:	0003022c 	.word	0x0003022c

000d5548 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   d5548:	b508      	push	{r3, lr}
   d554a:	4b02      	ldr	r3, [pc, #8]	; (d5554 <HAL_GPIO_Read+0xc>)
   d554c:	681b      	ldr	r3, [r3, #0]
   d554e:	695b      	ldr	r3, [r3, #20]
   d5550:	9301      	str	r3, [sp, #4]
   d5552:	bd08      	pop	{r3, pc}
   d5554:	0003022c 	.word	0x0003022c

000d5558 <hal_adc_read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
   d5558:	b508      	push	{r3, lr}
   d555a:	4b02      	ldr	r3, [pc, #8]	; (d5564 <hal_adc_read+0xc>)
   d555c:	681b      	ldr	r3, [r3, #0]
   d555e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5560:	9301      	str	r3, [sp, #4]
   d5562:	bd08      	pop	{r3, pc}
   d5564:	0003022c 	.word	0x0003022c

000d5568 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d5568:	b508      	push	{r3, lr}
   d556a:	4b02      	ldr	r3, [pc, #8]	; (d5574 <HAL_RNG_GetRandomNumber+0xc>)
   d556c:	681b      	ldr	r3, [r3, #0]
   d556e:	685b      	ldr	r3, [r3, #4]
   d5570:	9301      	str	r3, [sp, #4]
   d5572:	bd08      	pop	{r3, pc}
   d5574:	00030218 	.word	0x00030218

000d5578 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d5578:	b508      	push	{r3, lr}
   d557a:	4b02      	ldr	r3, [pc, #8]	; (d5584 <HAL_Delay_Microseconds+0xc>)
   d557c:	681b      	ldr	r3, [r3, #0]
   d557e:	68db      	ldr	r3, [r3, #12]
   d5580:	9301      	str	r3, [sp, #4]
   d5582:	bd08      	pop	{r3, pc}
   d5584:	00030218 	.word	0x00030218

000d5588 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d5588:	b508      	push	{r3, lr}
   d558a:	4b02      	ldr	r3, [pc, #8]	; (d5594 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d558c:	681b      	ldr	r3, [r3, #0]
   d558e:	695b      	ldr	r3, [r3, #20]
   d5590:	9301      	str	r3, [sp, #4]
   d5592:	bd08      	pop	{r3, pc}
   d5594:	00030218 	.word	0x00030218

000d5598 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   d5598:	b508      	push	{r3, lr}
   d559a:	4b02      	ldr	r3, [pc, #8]	; (d55a4 <os_mutex_create+0xc>)
   d559c:	681b      	ldr	r3, [r3, #0]
   d559e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d55a0:	9301      	str	r3, [sp, #4]
   d55a2:	bd08      	pop	{r3, pc}
   d55a4:	00030248 	.word	0x00030248

000d55a8 <os_mutex_destroy>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
   d55a8:	b508      	push	{r3, lr}
   d55aa:	4b02      	ldr	r3, [pc, #8]	; (d55b4 <os_mutex_destroy+0xc>)
   d55ac:	681b      	ldr	r3, [r3, #0]
   d55ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d55b0:	9301      	str	r3, [sp, #4]
   d55b2:	bd08      	pop	{r3, pc}
   d55b4:	00030248 	.word	0x00030248

000d55b8 <os_mutex_recursive_create>:
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d55b8:	b508      	push	{r3, lr}
   d55ba:	4b02      	ldr	r3, [pc, #8]	; (d55c4 <os_mutex_recursive_create+0xc>)
   d55bc:	681b      	ldr	r3, [r3, #0]
   d55be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d55c0:	9301      	str	r3, [sp, #4]
   d55c2:	bd08      	pop	{r3, pc}
   d55c4:	00030248 	.word	0x00030248

000d55c8 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d55c8:	b508      	push	{r3, lr}
   d55ca:	4b02      	ldr	r3, [pc, #8]	; (d55d4 <os_mutex_recursive_destroy+0xc>)
   d55cc:	681b      	ldr	r3, [r3, #0]
   d55ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d55d0:	9301      	str	r3, [sp, #4]
   d55d2:	bd08      	pop	{r3, pc}
   d55d4:	00030248 	.word	0x00030248

000d55d8 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d55d8:	b508      	push	{r3, lr}
   d55da:	4b02      	ldr	r3, [pc, #8]	; (d55e4 <inet_inet_ntop+0xc>)
   d55dc:	681b      	ldr	r3, [r3, #0]
   d55de:	695b      	ldr	r3, [r3, #20]
   d55e0:	9301      	str	r3, [sp, #4]
   d55e2:	bd08      	pop	{r3, pc}
   d55e4:	00030264 	.word	0x00030264

000d55e8 <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
   d55e8:	b508      	push	{r3, lr}
   d55ea:	4b02      	ldr	r3, [pc, #8]	; (d55f4 <hal_usart_init+0xc>)
   d55ec:	681b      	ldr	r3, [r3, #0]
   d55ee:	681b      	ldr	r3, [r3, #0]
   d55f0:	9301      	str	r3, [sp, #4]
   d55f2:	bd08      	pop	{r3, pc}
   d55f4:	0003023c 	.word	0x0003023c

000d55f8 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   d55f8:	b508      	push	{r3, lr}
   d55fa:	4b02      	ldr	r3, [pc, #8]	; (d5604 <hal_usart_write+0xc>)
   d55fc:	681b      	ldr	r3, [r3, #0]
   d55fe:	68db      	ldr	r3, [r3, #12]
   d5600:	9301      	str	r3, [sp, #4]
   d5602:	bd08      	pop	{r3, pc}
   d5604:	0003023c 	.word	0x0003023c

000d5608 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   d5608:	b508      	push	{r3, lr}
   d560a:	4b02      	ldr	r3, [pc, #8]	; (d5614 <hal_usart_available+0xc>)
   d560c:	681b      	ldr	r3, [r3, #0]
   d560e:	691b      	ldr	r3, [r3, #16]
   d5610:	9301      	str	r3, [sp, #4]
   d5612:	bd08      	pop	{r3, pc}
   d5614:	0003023c 	.word	0x0003023c

000d5618 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   d5618:	b508      	push	{r3, lr}
   d561a:	4b02      	ldr	r3, [pc, #8]	; (d5624 <hal_usart_read+0xc>)
   d561c:	681b      	ldr	r3, [r3, #0]
   d561e:	695b      	ldr	r3, [r3, #20]
   d5620:	9301      	str	r3, [sp, #4]
   d5622:	bd08      	pop	{r3, pc}
   d5624:	0003023c 	.word	0x0003023c

000d5628 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   d5628:	b508      	push	{r3, lr}
   d562a:	4b02      	ldr	r3, [pc, #8]	; (d5634 <hal_usart_peek+0xc>)
   d562c:	681b      	ldr	r3, [r3, #0]
   d562e:	699b      	ldr	r3, [r3, #24]
   d5630:	9301      	str	r3, [sp, #4]
   d5632:	bd08      	pop	{r3, pc}
   d5634:	0003023c 	.word	0x0003023c

000d5638 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   d5638:	b508      	push	{r3, lr}
   d563a:	4b02      	ldr	r3, [pc, #8]	; (d5644 <hal_usart_flush+0xc>)
   d563c:	681b      	ldr	r3, [r3, #0]
   d563e:	69db      	ldr	r3, [r3, #28]
   d5640:	9301      	str	r3, [sp, #4]
   d5642:	bd08      	pop	{r3, pc}
   d5644:	0003023c 	.word	0x0003023c

000d5648 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   d5648:	b508      	push	{r3, lr}
   d564a:	4b02      	ldr	r3, [pc, #8]	; (d5654 <hal_usart_is_enabled+0xc>)
   d564c:	681b      	ldr	r3, [r3, #0]
   d564e:	6a1b      	ldr	r3, [r3, #32]
   d5650:	9301      	str	r3, [sp, #4]
   d5652:	bd08      	pop	{r3, pc}
   d5654:	0003023c 	.word	0x0003023c

000d5658 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   d5658:	b508      	push	{r3, lr}
   d565a:	4b02      	ldr	r3, [pc, #8]	; (d5664 <hal_usart_available_data_for_write+0xc>)
   d565c:	681b      	ldr	r3, [r3, #0]
   d565e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d5660:	9301      	str	r3, [sp, #4]
   d5662:	bd08      	pop	{r3, pc}
   d5664:	0003023c 	.word	0x0003023c

000d5668 <hal_i2c_set_speed>:
#define BASE_IDX 16 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
   d5668:	b508      	push	{r3, lr}
   d566a:	4b02      	ldr	r3, [pc, #8]	; (d5674 <hal_i2c_set_speed+0xc>)
   d566c:	681b      	ldr	r3, [r3, #0]
   d566e:	681b      	ldr	r3, [r3, #0]
   d5670:	9301      	str	r3, [sp, #4]
   d5672:	bd08      	pop	{r3, pc}
   d5674:	00030228 	.word	0x00030228

000d5678 <hal_i2c_begin>:
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   d5678:	b508      	push	{r3, lr}
   d567a:	4b02      	ldr	r3, [pc, #8]	; (d5684 <hal_i2c_begin+0xc>)
   d567c:	681b      	ldr	r3, [r3, #0]
   d567e:	68db      	ldr	r3, [r3, #12]
   d5680:	9301      	str	r3, [sp, #4]
   d5682:	bd08      	pop	{r3, pc}
   d5684:	00030228 	.word	0x00030228

000d5688 <hal_i2c_begin_transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   d5688:	b508      	push	{r3, lr}
   d568a:	4b02      	ldr	r3, [pc, #8]	; (d5694 <hal_i2c_begin_transmission+0xc>)
   d568c:	681b      	ldr	r3, [r3, #0]
   d568e:	699b      	ldr	r3, [r3, #24]
   d5690:	9301      	str	r3, [sp, #4]
   d5692:	bd08      	pop	{r3, pc}
   d5694:	00030228 	.word	0x00030228

000d5698 <hal_i2c_end_transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   d5698:	b508      	push	{r3, lr}
   d569a:	4b02      	ldr	r3, [pc, #8]	; (d56a4 <hal_i2c_end_transmission+0xc>)
   d569c:	681b      	ldr	r3, [r3, #0]
   d569e:	69db      	ldr	r3, [r3, #28]
   d56a0:	9301      	str	r3, [sp, #4]
   d56a2:	bd08      	pop	{r3, pc}
   d56a4:	00030228 	.word	0x00030228

000d56a8 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   d56a8:	b508      	push	{r3, lr}
   d56aa:	4b02      	ldr	r3, [pc, #8]	; (d56b4 <hal_i2c_write+0xc>)
   d56ac:	681b      	ldr	r3, [r3, #0]
   d56ae:	6a1b      	ldr	r3, [r3, #32]
   d56b0:	9301      	str	r3, [sp, #4]
   d56b2:	bd08      	pop	{r3, pc}
   d56b4:	00030228 	.word	0x00030228

000d56b8 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   d56b8:	b508      	push	{r3, lr}
   d56ba:	4b02      	ldr	r3, [pc, #8]	; (d56c4 <hal_i2c_available+0xc>)
   d56bc:	681b      	ldr	r3, [r3, #0]
   d56be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d56c0:	9301      	str	r3, [sp, #4]
   d56c2:	bd08      	pop	{r3, pc}
   d56c4:	00030228 	.word	0x00030228

000d56c8 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   d56c8:	b508      	push	{r3, lr}
   d56ca:	4b02      	ldr	r3, [pc, #8]	; (d56d4 <hal_i2c_read+0xc>)
   d56cc:	681b      	ldr	r3, [r3, #0]
   d56ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d56d0:	9301      	str	r3, [sp, #4]
   d56d2:	bd08      	pop	{r3, pc}
   d56d4:	00030228 	.word	0x00030228

000d56d8 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   d56d8:	b508      	push	{r3, lr}
   d56da:	4b02      	ldr	r3, [pc, #8]	; (d56e4 <hal_i2c_peek+0xc>)
   d56dc:	681b      	ldr	r3, [r3, #0]
   d56de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d56e0:	9301      	str	r3, [sp, #4]
   d56e2:	bd08      	pop	{r3, pc}
   d56e4:	00030228 	.word	0x00030228

000d56e8 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   d56e8:	b508      	push	{r3, lr}
   d56ea:	4b02      	ldr	r3, [pc, #8]	; (d56f4 <hal_i2c_flush+0xc>)
   d56ec:	681b      	ldr	r3, [r3, #0]
   d56ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d56f0:	9301      	str	r3, [sp, #4]
   d56f2:	bd08      	pop	{r3, pc}
   d56f4:	00030228 	.word	0x00030228

000d56f8 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   d56f8:	b508      	push	{r3, lr}
   d56fa:	4b02      	ldr	r3, [pc, #8]	; (d5704 <hal_i2c_is_enabled+0xc>)
   d56fc:	681b      	ldr	r3, [r3, #0]
   d56fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d5700:	9301      	str	r3, [sp, #4]
   d5702:	bd08      	pop	{r3, pc}
   d5704:	00030228 	.word	0x00030228

000d5708 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   d5708:	b508      	push	{r3, lr}
   d570a:	4b02      	ldr	r3, [pc, #8]	; (d5714 <hal_i2c_init+0xc>)
   d570c:	681b      	ldr	r3, [r3, #0]
   d570e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d5710:	9301      	str	r3, [sp, #4]
   d5712:	bd08      	pop	{r3, pc}
   d5714:	00030228 	.word	0x00030228

000d5718 <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
   d5718:	b508      	push	{r3, lr}
   d571a:	4b02      	ldr	r3, [pc, #8]	; (d5724 <hal_spi_begin+0xc>)
   d571c:	681b      	ldr	r3, [r3, #0]
   d571e:	681b      	ldr	r3, [r3, #0]
   d5720:	9301      	str	r3, [sp, #4]
   d5722:	bd08      	pop	{r3, pc}
   d5724:	00030230 	.word	0x00030230

000d5728 <hal_spi_transfer>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
   d5728:	b508      	push	{r3, lr}
   d572a:	4b02      	ldr	r3, [pc, #8]	; (d5734 <hal_spi_transfer+0xc>)
   d572c:	681b      	ldr	r3, [r3, #0]
   d572e:	695b      	ldr	r3, [r3, #20]
   d5730:	9301      	str	r3, [sp, #4]
   d5732:	bd08      	pop	{r3, pc}
   d5734:	00030230 	.word	0x00030230

000d5738 <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   d5738:	b508      	push	{r3, lr}
   d573a:	4b02      	ldr	r3, [pc, #8]	; (d5744 <hal_spi_init+0xc>)
   d573c:	681b      	ldr	r3, [r3, #0]
   d573e:	69db      	ldr	r3, [r3, #28]
   d5740:	9301      	str	r3, [sp, #4]
   d5742:	bd08      	pop	{r3, pc}
   d5744:	00030230 	.word	0x00030230

000d5748 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   d5748:	b508      	push	{r3, lr}
   d574a:	4b02      	ldr	r3, [pc, #8]	; (d5754 <hal_spi_is_enabled+0xc>)
   d574c:	681b      	ldr	r3, [r3, #0]
   d574e:	6a1b      	ldr	r3, [r3, #32]
   d5750:	9301      	str	r3, [sp, #4]
   d5752:	bd08      	pop	{r3, pc}
   d5754:	00030230 	.word	0x00030230

000d5758 <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
   d5758:	b508      	push	{r3, lr}
   d575a:	4b02      	ldr	r3, [pc, #8]	; (d5764 <hal_spi_info+0xc>)
   d575c:	681b      	ldr	r3, [r3, #0]
   d575e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d5760:	9301      	str	r3, [sp, #4]
   d5762:	bd08      	pop	{r3, pc}
   d5764:	00030230 	.word	0x00030230

000d5768 <hal_spi_set_settings>:
DYNALIB_FN(10, hal_spi, hal_spi_transfer_dma, void(hal_spi_interface_t, const void*, void*, uint32_t, hal_spi_dma_user_callback))
DYNALIB_FN(11, hal_spi, hal_spi_begin_ext, void(hal_spi_interface_t, hal_spi_mode_t, uint16_t, void*))
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   d5768:	b508      	push	{r3, lr}
   d576a:	4b02      	ldr	r3, [pc, #8]	; (d5774 <hal_spi_set_settings+0xc>)
   d576c:	681b      	ldr	r3, [r3, #0]
   d576e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d5770:	9301      	str	r3, [sp, #4]
   d5772:	bd08      	pop	{r3, pc}
   d5774:	00030230 	.word	0x00030230

000d5778 <hal_spi_acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   d5778:	b508      	push	{r3, lr}
   d577a:	4b02      	ldr	r3, [pc, #8]	; (d5784 <hal_spi_acquire+0xc>)
   d577c:	681b      	ldr	r3, [r3, #0]
   d577e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d5780:	9301      	str	r3, [sp, #4]
   d5782:	bd08      	pop	{r3, pc}
   d5784:	00030230 	.word	0x00030230

000d5788 <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   d5788:	b508      	push	{r3, lr}
   d578a:	4b02      	ldr	r3, [pc, #8]	; (d5794 <hal_spi_release+0xc>)
   d578c:	681b      	ldr	r3, [r3, #0]
   d578e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d5790:	9301      	str	r3, [sp, #4]
   d5792:	bd08      	pop	{r3, pc}
   d5794:	00030230 	.word	0x00030230

000d5798 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d5798:	b508      	push	{r3, lr}
   d579a:	4b02      	ldr	r3, [pc, #8]	; (d57a4 <HAL_USB_USART_Init+0xc>)
   d579c:	681b      	ldr	r3, [r3, #0]
   d579e:	681b      	ldr	r3, [r3, #0]
   d57a0:	9301      	str	r3, [sp, #4]
   d57a2:	bd08      	pop	{r3, pc}
   d57a4:	0003024c 	.word	0x0003024c

000d57a8 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d57a8:	b508      	push	{r3, lr}
   d57aa:	4b02      	ldr	r3, [pc, #8]	; (d57b4 <HAL_USB_USART_Available_Data+0xc>)
   d57ac:	681b      	ldr	r3, [r3, #0]
   d57ae:	691b      	ldr	r3, [r3, #16]
   d57b0:	9301      	str	r3, [sp, #4]
   d57b2:	bd08      	pop	{r3, pc}
   d57b4:	0003024c 	.word	0x0003024c

000d57b8 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d57b8:	b508      	push	{r3, lr}
   d57ba:	4b02      	ldr	r3, [pc, #8]	; (d57c4 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d57bc:	681b      	ldr	r3, [r3, #0]
   d57be:	695b      	ldr	r3, [r3, #20]
   d57c0:	9301      	str	r3, [sp, #4]
   d57c2:	bd08      	pop	{r3, pc}
   d57c4:	0003024c 	.word	0x0003024c

000d57c8 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d57c8:	b508      	push	{r3, lr}
   d57ca:	4b02      	ldr	r3, [pc, #8]	; (d57d4 <HAL_USB_USART_Receive_Data+0xc>)
   d57cc:	681b      	ldr	r3, [r3, #0]
   d57ce:	699b      	ldr	r3, [r3, #24]
   d57d0:	9301      	str	r3, [sp, #4]
   d57d2:	bd08      	pop	{r3, pc}
   d57d4:	0003024c 	.word	0x0003024c

000d57d8 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d57d8:	b508      	push	{r3, lr}
   d57da:	4b02      	ldr	r3, [pc, #8]	; (d57e4 <HAL_USB_USART_Send_Data+0xc>)
   d57dc:	681b      	ldr	r3, [r3, #0]
   d57de:	69db      	ldr	r3, [r3, #28]
   d57e0:	9301      	str	r3, [sp, #4]
   d57e2:	bd08      	pop	{r3, pc}
   d57e4:	0003024c 	.word	0x0003024c

000d57e8 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d57e8:	b508      	push	{r3, lr}
   d57ea:	4b02      	ldr	r3, [pc, #8]	; (d57f4 <HAL_USB_USART_Flush_Data+0xc>)
   d57ec:	681b      	ldr	r3, [r3, #0]
   d57ee:	6a1b      	ldr	r3, [r3, #32]
   d57f0:	9301      	str	r3, [sp, #4]
   d57f2:	bd08      	pop	{r3, pc}
   d57f4:	0003024c 	.word	0x0003024c

000d57f8 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d57f8:	b508      	push	{r3, lr}
   d57fa:	4b02      	ldr	r3, [pc, #8]	; (d5804 <panic_+0xc>)
   d57fc:	681b      	ldr	r3, [r3, #0]
   d57fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d5800:	9301      	str	r3, [sp, #4]
   d5802:	bd08      	pop	{r3, pc}
   d5804:	00030260 	.word	0x00030260

000d5808 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d5808:	b508      	push	{r3, lr}
   d580a:	4b02      	ldr	r3, [pc, #8]	; (d5814 <set_system_mode+0xc>)
   d580c:	681b      	ldr	r3, [r3, #0]
   d580e:	685b      	ldr	r3, [r3, #4]
   d5810:	9301      	str	r3, [sp, #4]
   d5812:	bd08      	pop	{r3, pc}
   d5814:	00030220 	.word	0x00030220

000d5818 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d5818:	b508      	push	{r3, lr}
   d581a:	4b02      	ldr	r3, [pc, #8]	; (d5824 <system_delay_ms+0xc>)
   d581c:	681b      	ldr	r3, [r3, #0]
   d581e:	695b      	ldr	r3, [r3, #20]
   d5820:	9301      	str	r3, [sp, #4]
   d5822:	bd08      	pop	{r3, pc}
   d5824:	00030220 	.word	0x00030220

000d5828 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, SystemEventContext*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   d5828:	b508      	push	{r3, lr}
   d582a:	4b02      	ldr	r3, [pc, #8]	; (d5834 <system_thread_set_state+0xc>)
   d582c:	681b      	ldr	r3, [r3, #0]
   d582e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5830:	9301      	str	r3, [sp, #4]
   d5832:	bd08      	pop	{r3, pc}
   d5834:	00030220 	.word	0x00030220

000d5838 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d5838:	b508      	push	{r3, lr}
   d583a:	4b03      	ldr	r3, [pc, #12]	; (d5848 <system_ctrl_set_app_request_handler+0x10>)
   d583c:	681b      	ldr	r3, [r3, #0]
   d583e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d5842:	9301      	str	r3, [sp, #4]
   d5844:	bd08      	pop	{r3, pc}
   d5846:	0000      	.short	0x0000
   d5848:	00030220 	.word	0x00030220

000d584c <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d584c:	b508      	push	{r3, lr}
   d584e:	4b03      	ldr	r3, [pc, #12]	; (d585c <system_ctrl_set_result+0x10>)
   d5850:	681b      	ldr	r3, [r3, #0]
   d5852:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d5856:	9301      	str	r3, [sp, #4]
   d5858:	bd08      	pop	{r3, pc}
   d585a:	0000      	.short	0x0000
   d585c:	00030220 	.word	0x00030220

000d5860 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d5860:	b508      	push	{r3, lr}
   d5862:	4b02      	ldr	r3, [pc, #8]	; (d586c <network_connect+0xc>)
   d5864:	681b      	ldr	r3, [r3, #0]
   d5866:	685b      	ldr	r3, [r3, #4]
   d5868:	9301      	str	r3, [sp, #4]
   d586a:	bd08      	pop	{r3, pc}
   d586c:	00030240 	.word	0x00030240

000d5870 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d5870:	b508      	push	{r3, lr}
   d5872:	4b02      	ldr	r3, [pc, #8]	; (d587c <network_connecting+0xc>)
   d5874:	681b      	ldr	r3, [r3, #0]
   d5876:	689b      	ldr	r3, [r3, #8]
   d5878:	9301      	str	r3, [sp, #4]
   d587a:	bd08      	pop	{r3, pc}
   d587c:	00030240 	.word	0x00030240

000d5880 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d5880:	b508      	push	{r3, lr}
   d5882:	4b02      	ldr	r3, [pc, #8]	; (d588c <network_disconnect+0xc>)
   d5884:	681b      	ldr	r3, [r3, #0]
   d5886:	68db      	ldr	r3, [r3, #12]
   d5888:	9301      	str	r3, [sp, #4]
   d588a:	bd08      	pop	{r3, pc}
   d588c:	00030240 	.word	0x00030240

000d5890 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d5890:	b508      	push	{r3, lr}
   d5892:	4b02      	ldr	r3, [pc, #8]	; (d589c <network_ready+0xc>)
   d5894:	681b      	ldr	r3, [r3, #0]
   d5896:	691b      	ldr	r3, [r3, #16]
   d5898:	9301      	str	r3, [sp, #4]
   d589a:	bd08      	pop	{r3, pc}
   d589c:	00030240 	.word	0x00030240

000d58a0 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d58a0:	b508      	push	{r3, lr}
   d58a2:	4b02      	ldr	r3, [pc, #8]	; (d58ac <network_on+0xc>)
   d58a4:	681b      	ldr	r3, [r3, #0]
   d58a6:	695b      	ldr	r3, [r3, #20]
   d58a8:	9301      	str	r3, [sp, #4]
   d58aa:	bd08      	pop	{r3, pc}
   d58ac:	00030240 	.word	0x00030240

000d58b0 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d58b0:	b508      	push	{r3, lr}
   d58b2:	4b02      	ldr	r3, [pc, #8]	; (d58bc <network_off+0xc>)
   d58b4:	681b      	ldr	r3, [r3, #0]
   d58b6:	699b      	ldr	r3, [r3, #24]
   d58b8:	9301      	str	r3, [sp, #4]
   d58ba:	bd08      	pop	{r3, pc}
   d58bc:	00030240 	.word	0x00030240

000d58c0 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d58c0:	b508      	push	{r3, lr}
   d58c2:	4b02      	ldr	r3, [pc, #8]	; (d58cc <network_listen+0xc>)
   d58c4:	681b      	ldr	r3, [r3, #0]
   d58c6:	69db      	ldr	r3, [r3, #28]
   d58c8:	9301      	str	r3, [sp, #4]
   d58ca:	bd08      	pop	{r3, pc}
   d58cc:	00030240 	.word	0x00030240

000d58d0 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d58d0:	b508      	push	{r3, lr}
   d58d2:	4b02      	ldr	r3, [pc, #8]	; (d58dc <network_listening+0xc>)
   d58d4:	681b      	ldr	r3, [r3, #0]
   d58d6:	6a1b      	ldr	r3, [r3, #32]
   d58d8:	9301      	str	r3, [sp, #4]
   d58da:	bd08      	pop	{r3, pc}
   d58dc:	00030240 	.word	0x00030240

000d58e0 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d58e0:	b508      	push	{r3, lr}
   d58e2:	4b02      	ldr	r3, [pc, #8]	; (d58ec <network_set_listen_timeout+0xc>)
   d58e4:	681b      	ldr	r3, [r3, #0]
   d58e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d58e8:	9301      	str	r3, [sp, #4]
   d58ea:	bd08      	pop	{r3, pc}
   d58ec:	00030240 	.word	0x00030240

000d58f0 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d58f0:	b508      	push	{r3, lr}
   d58f2:	4b02      	ldr	r3, [pc, #8]	; (d58fc <network_get_listen_timeout+0xc>)
   d58f4:	681b      	ldr	r3, [r3, #0]
   d58f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d58f8:	9301      	str	r3, [sp, #4]
   d58fa:	bd08      	pop	{r3, pc}
   d58fc:	00030240 	.word	0x00030240

000d5900 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   d5900:	b508      	push	{r3, lr}
   d5902:	4b02      	ldr	r3, [pc, #8]	; (d590c <network_is_on+0xc>)
   d5904:	681b      	ldr	r3, [r3, #0]
   d5906:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d5908:	9301      	str	r3, [sp, #4]
   d590a:	bd08      	pop	{r3, pc}
   d590c:	00030240 	.word	0x00030240

000d5910 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   d5910:	b508      	push	{r3, lr}
   d5912:	4b02      	ldr	r3, [pc, #8]	; (d591c <network_is_off+0xc>)
   d5914:	681b      	ldr	r3, [r3, #0]
   d5916:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d5918:	9301      	str	r3, [sp, #4]
   d591a:	bd08      	pop	{r3, pc}
   d591c:	00030240 	.word	0x00030240

000d5920 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d5920:	b508      	push	{r3, lr}
   d5922:	4b02      	ldr	r3, [pc, #8]	; (d592c <spark_set_random_seed_from_cloud_handler+0xc>)
   d5924:	681b      	ldr	r3, [r3, #0]
   d5926:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d5928:	9301      	str	r3, [sp, #4]
   d592a:	bd08      	pop	{r3, pc}
   d592c:	00030244 	.word	0x00030244

000d5930 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d5930:	b508      	push	{r3, lr}
   d5932:	4b02      	ldr	r3, [pc, #8]	; (d593c <malloc+0xc>)
   d5934:	681b      	ldr	r3, [r3, #0]
   d5936:	681b      	ldr	r3, [r3, #0]
   d5938:	9301      	str	r3, [sp, #4]
   d593a:	bd08      	pop	{r3, pc}
   d593c:	0003021c 	.word	0x0003021c

000d5940 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d5940:	b508      	push	{r3, lr}
   d5942:	4b02      	ldr	r3, [pc, #8]	; (d594c <free+0xc>)
   d5944:	681b      	ldr	r3, [r3, #0]
   d5946:	685b      	ldr	r3, [r3, #4]
   d5948:	9301      	str	r3, [sp, #4]
   d594a:	bd08      	pop	{r3, pc}
   d594c:	0003021c 	.word	0x0003021c

000d5950 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d5950:	b508      	push	{r3, lr}
   d5952:	4b02      	ldr	r3, [pc, #8]	; (d595c <vsnprintf+0xc>)
   d5954:	681b      	ldr	r3, [r3, #0]
   d5956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d5958:	9301      	str	r3, [sp, #4]
   d595a:	bd08      	pop	{r3, pc}
   d595c:	0003021c 	.word	0x0003021c

000d5960 <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   d5960:	b508      	push	{r3, lr}
   d5962:	4b02      	ldr	r3, [pc, #8]	; (d596c <newlib_impure_ptr_callback+0xc>)
   d5964:	681b      	ldr	r3, [r3, #0]
   d5966:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d5968:	9301      	str	r3, [sp, #4]
   d596a:	bd08      	pop	{r3, pc}
   d596c:	0003021c 	.word	0x0003021c

000d5970 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d5970:	2200      	movs	r2, #0
   d5972:	6840      	ldr	r0, [r0, #4]
   d5974:	4611      	mov	r1, r2
   d5976:	f7ff bfab 	b.w	d58d0 <network_listening>

000d597a <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d597a:	2200      	movs	r2, #0
   d597c:	6840      	ldr	r0, [r0, #4]
   d597e:	4611      	mov	r1, r2
   d5980:	f7ff bfb6 	b.w	d58f0 <network_get_listen_timeout>

000d5984 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d5984:	6840      	ldr	r0, [r0, #4]
   d5986:	2200      	movs	r2, #0
   d5988:	f7ff bfaa 	b.w	d58e0 <network_set_listen_timeout>

000d598c <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d598c:	6840      	ldr	r0, [r0, #4]
   d598e:	2200      	movs	r2, #0
   d5990:	f081 0101 	eor.w	r1, r1, #1
   d5994:	f7ff bf94 	b.w	d58c0 <network_listen>

000d5998 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d5998:	2300      	movs	r3, #0
   d599a:	6840      	ldr	r0, [r0, #4]
   d599c:	461a      	mov	r2, r3
   d599e:	4619      	mov	r1, r3
   d59a0:	f7ff bf86 	b.w	d58b0 <network_off>

000d59a4 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d59a4:	2300      	movs	r3, #0
   d59a6:	6840      	ldr	r0, [r0, #4]
   d59a8:	461a      	mov	r2, r3
   d59aa:	4619      	mov	r1, r3
   d59ac:	f7ff bf78 	b.w	d58a0 <network_on>

000d59b0 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d59b0:	2200      	movs	r2, #0
   d59b2:	6840      	ldr	r0, [r0, #4]
   d59b4:	4611      	mov	r1, r2
   d59b6:	f7ff bf6b 	b.w	d5890 <network_ready>

000d59ba <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d59ba:	2200      	movs	r2, #0
   d59bc:	6840      	ldr	r0, [r0, #4]
   d59be:	4611      	mov	r1, r2
   d59c0:	f7ff bf56 	b.w	d5870 <network_connecting>

000d59c4 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d59c4:	6840      	ldr	r0, [r0, #4]
   d59c6:	2200      	movs	r2, #0
   d59c8:	2102      	movs	r1, #2
   d59ca:	f7ff bf59 	b.w	d5880 <network_disconnect>

000d59ce <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d59ce:	2300      	movs	r3, #0
   d59d0:	6840      	ldr	r0, [r0, #4]
   d59d2:	461a      	mov	r2, r3
   d59d4:	f7ff bf44 	b.w	d5860 <network_connect>

000d59d8 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d59d8:	4b02      	ldr	r3, [pc, #8]	; (d59e4 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d59da:	2203      	movs	r2, #3
   d59dc:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d59de:	4a02      	ldr	r2, [pc, #8]	; (d59e8 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d59e0:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   d59e2:	4770      	bx	lr
   d59e4:	2003e654 	.word	0x2003e654
   d59e8:	000d7cc8 	.word	0x000d7cc8

000d59ec <_ZN8SPIClass4lockEv.isra.0>:
  }

  int lock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    return hal_spi_acquire(_spi, nullptr);
   d59ec:	2100      	movs	r1, #0
   d59ee:	f7ff bec3 	b.w	d5778 <hal_spi_acquire>

000d59f2 <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   d59f2:	2100      	movs	r1, #0
   d59f4:	f7ff bec8 	b.w	d5788 <hal_spi_release>

000d59f8 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   d59f8:	b510      	push	{r4, lr}
   d59fa:	4604      	mov	r4, r0
   d59fc:	4608      	mov	r0, r1
{
    _spi = spi;
   d59fe:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   d5a00:	f7ff fe9a 	bl	d5738 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d5a04:	2300      	movs	r3, #0
   d5a06:	6063      	str	r3, [r4, #4]
}
   d5a08:	4620      	mov	r0, r4
   d5a0a:	bd10      	pop	{r4, pc}

000d5a0c <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   d5a0c:	b510      	push	{r4, lr}
   d5a0e:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   d5a10:	7800      	ldrb	r0, [r0, #0]
   d5a12:	f7ff ffeb 	bl	d59ec <_ZN8SPIClass4lockEv.isra.0>
   d5a16:	b948      	cbnz	r0, d5a2c <_ZN8SPIClass5beginEv+0x20>
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
   d5a18:	7820      	ldrb	r0, [r4, #0]
   d5a1a:	f64f 71ff 	movw	r1, #65535	; 0xffff
   d5a1e:	f7ff fe7b 	bl	d5718 <hal_spi_begin>
        unlock();
   d5a22:	7820      	ldrb	r0, [r4, #0]
    }
}
   d5a24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        unlock();
   d5a28:	f7ff bfe3 	b.w	d59f2 <_ZN8SPIClass6unlockEv.isra.0>
}
   d5a2c:	bd10      	pop	{r4, pc}

000d5a2e <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   d5a2e:	7800      	ldrb	r0, [r0, #0]
   d5a30:	f7ff bfdf 	b.w	d59f2 <_ZN8SPIClass6unlockEv.isra.0>

000d5a34 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   d5a34:	0840      	lsrs	r0, r0, #1
{
   d5a36:	b530      	push	{r4, r5, lr}
    clock >>= 1; // div2 is the first
   d5a38:	6018      	str	r0, [r3, #0]
   d5a3a:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   d5a3c:	6818      	ldr	r0, [r3, #0]
   d5a3e:	4288      	cmp	r0, r1
   d5a40:	b2e5      	uxtb	r5, r4
   d5a42:	d906      	bls.n	d5a52 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   d5a44:	3401      	adds	r4, #1
   d5a46:	2c08      	cmp	r4, #8
   d5a48:	d002      	beq.n	d5a50 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   d5a4a:	0840      	lsrs	r0, r0, #1
   d5a4c:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
   d5a4e:	e7f5      	b.n	d5a3c <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   d5a50:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
   d5a52:	4b02      	ldr	r3, [pc, #8]	; (d5a5c <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   d5a54:	5d5b      	ldrb	r3, [r3, r5]
   d5a56:	7013      	strb	r3, [r2, #0]
}
   d5a58:	bd30      	pop	{r4, r5, pc}
   d5a5a:	bf00      	nop
   d5a5c:	000d7cfc 	.word	0x000d7cfc

000d5a60 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>:
{
   d5a60:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d5a64:	4606      	mov	r6, r0
   d5a66:	b08f      	sub	sp, #60	; 0x3c
    CHECK(lock());
   d5a68:	7800      	ldrb	r0, [r0, #0]
{
   d5a6a:	460c      	mov	r4, r1
    CHECK(lock());
   d5a6c:	f7ff ffbe 	bl	d59ec <_ZN8SPIClass4lockEv.isra.0>
   d5a70:	2800      	cmp	r0, #0
   d5a72:	db1b      	blt.n	d5aac <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4c>
    querySpiInfo(_spi, &spi_info);
   d5a74:	7835      	ldrb	r5, [r6, #0]
    memset(info, 0, sizeof(hal_spi_info_t));
   d5a76:	2214      	movs	r2, #20
   d5a78:	2100      	movs	r1, #0
   d5a7a:	a809      	add	r0, sp, #36	; 0x24
   d5a7c:	f001 fb32 	bl	d70e4 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   d5a80:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   d5a82:	2200      	movs	r2, #0
   d5a84:	a909      	add	r1, sp, #36	; 0x24
   d5a86:	4628      	mov	r0, r5
    info->version = HAL_SPI_INFO_VERSION_1;
   d5a88:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    hal_spi_info(spi, info, nullptr);
   d5a8c:	f7ff fe64 	bl	d5758 <hal_spi_info>
    if (!info || !info->enabled || info->default_settings)
   d5a90:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
   d5a94:	b113      	cbz	r3, d5a9c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x3c>
   d5a96:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   d5a9a:	b155      	cbz	r5, d5ab2 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x52>
  {
   d5a9c:	2700      	movs	r7, #0
   d5a9e:	46b9      	mov	r9, r7
   d5aa0:	46b8      	mov	r8, r7
   d5aa2:	2501      	movs	r5, #1
    if (default_ && other.default_)
   d5aa4:	7923      	ldrb	r3, [r4, #4]
   d5aa6:	b15d      	cbz	r5, d5ac0 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x60>
   d5aa8:	b1c3      	cbz	r3, d5adc <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
    return 0;
   d5aaa:	2000      	movs	r0, #0
}
   d5aac:	b00f      	add	sp, #60	; 0x3c
   d5aae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
   d5ab2:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   d5ab6:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   d5aba:	f89d 7035 	ldrb.w	r7, [sp, #53]	; 0x35
  }
   d5abe:	e7f1      	b.n	d5aa4 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x44>
    if (default_ == other.default_ &&
   d5ac0:	2b00      	cmp	r3, #0
   d5ac2:	d135      	bne.n	d5b30 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xd0>
   d5ac4:	68a3      	ldr	r3, [r4, #8]
   d5ac6:	4543      	cmp	r3, r8
   d5ac8:	d108      	bne.n	d5adc <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
        bitOrder_ == other.bitOrder_ &&
   d5aca:	f88d 9020 	strb.w	r9, [sp, #32]
   d5ace:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   d5ad2:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   d5ad6:	89a3      	ldrh	r3, [r4, #12]
   d5ad8:	429a      	cmp	r2, r3
   d5ada:	d0e6      	beq.n	d5aaa <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
            uint8_t divisor = 0;
   d5adc:	2300      	movs	r3, #0
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   d5ade:	68a1      	ldr	r1, [r4, #8]
            uint8_t divisor = 0;
   d5ae0:	f88d 300f 	strb.w	r3, [sp, #15]
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   d5ae4:	980a      	ldr	r0, [sp, #40]	; 0x28
   d5ae6:	ab04      	add	r3, sp, #16
   d5ae8:	f10d 020f 	add.w	r2, sp, #15
   d5aec:	f7ff ffa2 	bl	d5a34 <_ZN8SPIClass19computeClockDividerEjjRhRj>
    if (default_ && other.default_)
   d5af0:	7921      	ldrb	r1, [r4, #4]
   d5af2:	b985      	cbnz	r5, d5b16 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
    if (default_ == other.default_ &&
   d5af4:	b989      	cbnz	r1, d5b1a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   d5af6:	68a3      	ldr	r3, [r4, #8]
   d5af8:	4543      	cmp	r3, r8
   d5afa:	d30e      	bcc.n	d5b1a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
        bitOrder_ == other.bitOrder_ &&
   d5afc:	f88d 9020 	strb.w	r9, [sp, #32]
   d5b00:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   d5b04:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   d5b08:	89a3      	ldrh	r3, [r4, #12]
   d5b0a:	429a      	cmp	r2, r3
   d5b0c:	d105      	bne.n	d5b1a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   d5b0e:	9b04      	ldr	r3, [sp, #16]
   d5b10:	4543      	cmp	r3, r8
   d5b12:	d102      	bne.n	d5b1a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   d5b14:	e7c9      	b.n	d5aaa <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
    if (default_ && other.default_)
   d5b16:	2900      	cmp	r1, #0
   d5b18:	d1f9      	bne.n	d5b0e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xae>
                hal_spi_set_settings(_spi, settings.default_, divisor, settings.bitOrder_,
   d5b1a:	2300      	movs	r3, #0
   d5b1c:	9301      	str	r3, [sp, #4]
   d5b1e:	7b63      	ldrb	r3, [r4, #13]
   d5b20:	9300      	str	r3, [sp, #0]
   d5b22:	f89d 200f 	ldrb.w	r2, [sp, #15]
   d5b26:	7b23      	ldrb	r3, [r4, #12]
            hal_spi_set_settings(_spi, settings.default_, 0, 0, 0, nullptr);
   d5b28:	7830      	ldrb	r0, [r6, #0]
   d5b2a:	f7ff fe1d 	bl	d5768 <hal_spi_set_settings>
   d5b2e:	e7bc      	b.n	d5aaa <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
   d5b30:	e9cd 5500 	strd	r5, r5, [sp]
   d5b34:	462b      	mov	r3, r5
   d5b36:	462a      	mov	r2, r5
   d5b38:	2101      	movs	r1, #1
   d5b3a:	e7f5      	b.n	d5b28 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xc8>

000d5b3c <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   d5b3c:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
   d5b3e:	7800      	ldrb	r0, [r0, #0]
   d5b40:	f7ff fdf2 	bl	d5728 <hal_spi_transfer>
}
   d5b44:	b2c0      	uxtb	r0, r0
   d5b46:	bd08      	pop	{r3, pc}

000d5b48 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d5b48:	b510      	push	{r4, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d5b4a:	4b09      	ldr	r3, [pc, #36]	; (d5b70 <_GLOBAL__sub_I_System+0x28>)

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d5b4c:	4c09      	ldr	r4, [pc, #36]	; (d5b74 <_GLOBAL__sub_I_System+0x2c>)
   d5b4e:	2202      	movs	r2, #2
   d5b50:	2000      	movs	r0, #0
   d5b52:	601a      	str	r2, [r3, #0]
    SleepResult() {}
   d5b54:	4b08      	ldr	r3, [pc, #32]	; (d5b78 <_GLOBAL__sub_I_System+0x30>)
              error_(SYSTEM_ERROR_NONE) {
   d5b56:	6020      	str	r0, [r4, #0]
   d5b58:	80a0      	strh	r0, [r4, #4]
    SleepResult() {}
   d5b5a:	71a0      	strb	r0, [r4, #6]
   d5b5c:	60a3      	str	r3, [r4, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d5b5e:	f7ff fe53 	bl	d5808 <set_system_mode>
SystemClass System;
   d5b62:	4620      	mov	r0, r4
   d5b64:	4a05      	ldr	r2, [pc, #20]	; (d5b7c <_GLOBAL__sub_I_System+0x34>)
   d5b66:	4906      	ldr	r1, [pc, #24]	; (d5b80 <_GLOBAL__sub_I_System+0x38>)
   d5b68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SystemClass System;
   d5b6c:	f000 bde0 	b.w	d6730 <__aeabi_atexit>
   d5b70:	2003e668 	.word	0x2003e668
   d5b74:	2003e65c 	.word	0x2003e65c
   d5b78:	ffff0000 	.word	0xffff0000
   d5b7c:	2003e5b0 	.word	0x2003e5b0
   d5b80:	000d40c5 	.word	0x000d40c5

000d5b84 <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d5b84:	b510      	push	{r4, lr}
   d5b86:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d5b88:	6800      	ldr	r0, [r0, #0]
   d5b8a:	b108      	cbz	r0, d5b90 <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d5b8c:	f7ff fd1c 	bl	d55c8 <os_mutex_recursive_destroy>
    }
   d5b90:	4620      	mov	r0, r4
   d5b92:	bd10      	pop	{r4, pc}

000d5b94 <_ZNSt14_Function_baseD1Ev>:
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d5b94:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d5b96:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   d5b98:	4604      	mov	r4, r0
      if (_M_manager)
   d5b9a:	b113      	cbz	r3, d5ba2 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d5b9c:	2203      	movs	r2, #3
   d5b9e:	4601      	mov	r1, r0
   d5ba0:	4798      	blx	r3
    }
   d5ba2:	4620      	mov	r0, r4
   d5ba4:	bd10      	pop	{r4, pc}
	...

000d5ba8 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(EnumFlags<BleCharacteristicProperty> properties, const String& desc, const BleOnDataReceivedStdFunction& callback) {
    WiringBleLock lk;
    return addCharacteristic(properties, desc.c_str(), callback);
}

} /* namespace particle */
   d5ba8:	b510      	push	{r4, lr}
    RecursiveMutex() : handle_(nullptr)
   d5baa:	4c06      	ldr	r4, [pc, #24]	; (d5bc4 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d5bac:	2300      	movs	r3, #0
        os_mutex_recursive_create(&handle_);
   d5bae:	4620      	mov	r0, r4
    RecursiveMutex() : handle_(nullptr)
   d5bb0:	6023      	str	r3, [r4, #0]
        os_mutex_recursive_create(&handle_);
   d5bb2:	f7ff fd01 	bl	d55b8 <os_mutex_recursive_create>
RecursiveMutex WiringBleLock::mutex_;
   d5bb6:	4620      	mov	r0, r4
   d5bb8:	4a03      	ldr	r2, [pc, #12]	; (d5bc8 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d5bba:	4904      	ldr	r1, [pc, #16]	; (d5bcc <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
} /* namespace particle */
   d5bbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
RecursiveMutex WiringBleLock::mutex_;
   d5bc0:	f000 bdb6 	b.w	d6730 <__aeabi_atexit>
   d5bc4:	2003e66c 	.word	0x2003e66c
   d5bc8:	2003e5b0 	.word	0x2003e5b0
   d5bcc:	000d5b85 	.word	0x000d5b85

000d5bd0 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d5bd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5bd2:	4606      	mov	r6, r0
   d5bd4:	460d      	mov	r5, r1
  size_t n = 0;
   d5bd6:	188f      	adds	r7, r1, r2
   d5bd8:	2400      	movs	r4, #0
  while (size--) {
   d5bda:	42bd      	cmp	r5, r7
   d5bdc:	d00c      	beq.n	d5bf8 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d5bde:	6833      	ldr	r3, [r6, #0]
   d5be0:	f815 1b01 	ldrb.w	r1, [r5], #1
   d5be4:	689b      	ldr	r3, [r3, #8]
   d5be6:	4630      	mov	r0, r6
   d5be8:	4798      	blx	r3
     if (chunk>=0)
   d5bea:	1e03      	subs	r3, r0, #0
   d5bec:	db01      	blt.n	d5bf2 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d5bee:	441c      	add	r4, r3
  while (size--) {
   d5bf0:	e7f3      	b.n	d5bda <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d5bf2:	2c00      	cmp	r4, #0
   d5bf4:	bf08      	it	eq
   d5bf6:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   d5bf8:	4620      	mov	r0, r4
   d5bfa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5bfc <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d5bfc:	b513      	push	{r0, r1, r4, lr}
   d5bfe:	4604      	mov	r4, r0
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
   d5c00:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   d5c02:	b159      	cbz	r1, d5c1c <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   d5c04:	9101      	str	r1, [sp, #4]
   d5c06:	f001 fa99 	bl	d713c <strlen>
   d5c0a:	6823      	ldr	r3, [r4, #0]
   d5c0c:	9901      	ldr	r1, [sp, #4]
   d5c0e:	68db      	ldr	r3, [r3, #12]
   d5c10:	4602      	mov	r2, r0
   d5c12:	4620      	mov	r0, r4
    }
   d5c14:	b002      	add	sp, #8
   d5c16:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   d5c1a:	4718      	bx	r3
    }
   d5c1c:	b002      	add	sp, #8
   d5c1e:	bd10      	pop	{r4, pc}

000d5c20 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   d5c20:	b508      	push	{r3, lr}
  return write(str);
   d5c22:	f7ff ffeb 	bl	d5bfc <_ZN5Print5writeEPKc>
}
   d5c26:	bd08      	pop	{r3, pc}

000d5c28 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   d5c28:	6803      	ldr	r3, [r0, #0]
   d5c2a:	689b      	ldr	r3, [r3, #8]
   d5c2c:	4718      	bx	r3

000d5c2e <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d5c2e:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d5c30:	210d      	movs	r1, #13
{
   d5c32:	4605      	mov	r5, r0
  size_t n = print('\r');
   d5c34:	f7ff fff8 	bl	d5c28 <_ZN5Print5printEc>
  n += print('\n');
   d5c38:	210a      	movs	r1, #10
  size_t n = print('\r');
   d5c3a:	4604      	mov	r4, r0
  n += print('\n');
   d5c3c:	4628      	mov	r0, r5
   d5c3e:	f7ff fff3 	bl	d5c28 <_ZN5Print5printEc>
  return n;
}
   d5c42:	4420      	add	r0, r4
   d5c44:	bd38      	pop	{r3, r4, r5, pc}

000d5c46 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d5c46:	b538      	push	{r3, r4, r5, lr}
   d5c48:	4605      	mov	r5, r0
  return write(str);
   d5c4a:	f7ff ffd7 	bl	d5bfc <_ZN5Print5writeEPKc>
   d5c4e:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   d5c50:	4628      	mov	r0, r5
   d5c52:	f7ff ffec 	bl	d5c2e <_ZN5Print7printlnEv>
  return n;
}
   d5c56:	4420      	add	r0, r4
   d5c58:	bd38      	pop	{r3, r4, r5, pc}

000d5c5a <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d5c5a:	b530      	push	{r4, r5, lr}
   d5c5c:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d5c5e:	2300      	movs	r3, #0
   d5c60:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d5c64:	2a01      	cmp	r2, #1
   d5c66:	bf98      	it	ls
   d5c68:	220a      	movls	r2, #10
   d5c6a:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   d5c6c:	460d      	mov	r5, r1
   d5c6e:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   d5c72:	fb01 5312 	mls	r3, r1, r2, r5
   d5c76:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d5c7a:	2b09      	cmp	r3, #9
   d5c7c:	bf94      	ite	ls
   d5c7e:	3330      	addls	r3, #48	; 0x30
   d5c80:	3337      	addhi	r3, #55	; 0x37
   d5c82:	b2db      	uxtb	r3, r3
  } while(n);
   d5c84:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d5c86:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   d5c8a:	d9ef      	bls.n	d5c6c <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   d5c8c:	4621      	mov	r1, r4
   d5c8e:	f7ff ffb5 	bl	d5bfc <_ZN5Print5writeEPKc>
}
   d5c92:	b00b      	add	sp, #44	; 0x2c
   d5c94:	bd30      	pop	{r4, r5, pc}
	...

000d5c98 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
   d5c98:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5c9c:	ec55 4b10 	vmov	r4, r5, d0
   d5ca0:	4606      	mov	r6, r0
   d5ca2:	460f      	mov	r7, r1
  size_t n = 0;

  if (isnan(number)) return print("nan");
   d5ca4:	ee10 2a10 	vmov	r2, s0
   d5ca8:	ee10 0a10 	vmov	r0, s0
   d5cac:	462b      	mov	r3, r5
   d5cae:	4629      	mov	r1, r5
   d5cb0:	f001 f99e 	bl	d6ff0 <__aeabi_dcmpun>
   d5cb4:	b140      	cbz	r0, d5cc8 <_ZN5Print10printFloatEdh+0x30>
  return write(str);
   d5cb6:	4953      	ldr	r1, [pc, #332]	; (d5e04 <_ZN5Print10printFloatEdh+0x16c>)
   d5cb8:	4630      	mov	r0, r6
   d5cba:	f7ff ff9f 	bl	d5bfc <_ZN5Print5writeEPKc>
   d5cbe:	4682      	mov	sl, r0
    n += print(toPrint);
    remainder -= toPrint;
  }

  return n;
}
   d5cc0:	4650      	mov	r0, sl
   d5cc2:	b003      	add	sp, #12
   d5cc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isinf;
#else
  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }
   d5cc8:	f025 4900 	bic.w	r9, r5, #2147483648	; 0x80000000
  if (isinf(number)) return print("inf");
   d5ccc:	4b4e      	ldr	r3, [pc, #312]	; (d5e08 <_ZN5Print10printFloatEdh+0x170>)
   d5cce:	f04f 32ff 	mov.w	r2, #4294967295
   d5cd2:	4620      	mov	r0, r4
   d5cd4:	4649      	mov	r1, r9
   d5cd6:	f001 f98b 	bl	d6ff0 <__aeabi_dcmpun>
   d5cda:	b948      	cbnz	r0, d5cf0 <_ZN5Print10printFloatEdh+0x58>
   d5cdc:	4b4a      	ldr	r3, [pc, #296]	; (d5e08 <_ZN5Print10printFloatEdh+0x170>)
   d5cde:	f04f 32ff 	mov.w	r2, #4294967295
   d5ce2:	4620      	mov	r0, r4
   d5ce4:	4649      	mov	r1, r9
   d5ce6:	f001 f965 	bl	d6fb4 <__aeabi_dcmple>
   d5cea:	b908      	cbnz	r0, d5cf0 <_ZN5Print10printFloatEdh+0x58>
  return write(str);
   d5cec:	4947      	ldr	r1, [pc, #284]	; (d5e0c <_ZN5Print10printFloatEdh+0x174>)
   d5cee:	e7e3      	b.n	d5cb8 <_ZN5Print10printFloatEdh+0x20>
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
   d5cf0:	4b47      	ldr	r3, [pc, #284]	; (d5e10 <_ZN5Print10printFloatEdh+0x178>)
   d5cf2:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d5cf6:	4620      	mov	r0, r4
   d5cf8:	4629      	mov	r1, r5
   d5cfa:	f001 f96f 	bl	d6fdc <__aeabi_dcmpgt>
   d5cfe:	b108      	cbz	r0, d5d04 <_ZN5Print10printFloatEdh+0x6c>
  return write(str);
   d5d00:	4944      	ldr	r1, [pc, #272]	; (d5e14 <_ZN5Print10printFloatEdh+0x17c>)
   d5d02:	e7d9      	b.n	d5cb8 <_ZN5Print10printFloatEdh+0x20>
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
   d5d04:	4b44      	ldr	r3, [pc, #272]	; (d5e18 <_ZN5Print10printFloatEdh+0x180>)
   d5d06:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d5d0a:	4620      	mov	r0, r4
   d5d0c:	4629      	mov	r1, r5
   d5d0e:	f001 f947 	bl	d6fa0 <__aeabi_dcmplt>
   d5d12:	2800      	cmp	r0, #0
   d5d14:	d1f4      	bne.n	d5d00 <_ZN5Print10printFloatEdh+0x68>
  if (number < 0.0)
   d5d16:	2200      	movs	r2, #0
   d5d18:	2300      	movs	r3, #0
   d5d1a:	4620      	mov	r0, r4
   d5d1c:	4629      	mov	r1, r5
   d5d1e:	f001 f93f 	bl	d6fa0 <__aeabi_dcmplt>
   d5d22:	b1d0      	cbz	r0, d5d5a <_ZN5Print10printFloatEdh+0xc2>
     n += print('-');
   d5d24:	212d      	movs	r1, #45	; 0x2d
   d5d26:	4630      	mov	r0, r6
   d5d28:	f7ff ff7e 	bl	d5c28 <_ZN5Print5printEc>
     number = -number;
   d5d2c:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
     n += print('-');
   d5d30:	4682      	mov	sl, r0
     number = -number;
   d5d32:	461d      	mov	r5, r3
  double rounding = 0.5;
   d5d34:	4939      	ldr	r1, [pc, #228]	; (d5e1c <_ZN5Print10printFloatEdh+0x184>)
    rounding /= 10.0;
   d5d36:	f8df 90ec 	ldr.w	r9, [pc, #236]	; d5e24 <_ZN5Print10printFloatEdh+0x18c>
  size_t n = 0;
   d5d3a:	f04f 0b00 	mov.w	fp, #0
  double rounding = 0.5;
   d5d3e:	2000      	movs	r0, #0
    rounding /= 10.0;
   d5d40:	f04f 0800 	mov.w	r8, #0
  for (uint8_t i=0; i<digits; ++i)
   d5d44:	fa5f f38b 	uxtb.w	r3, fp
   d5d48:	429f      	cmp	r7, r3
   d5d4a:	d908      	bls.n	d5d5e <_ZN5Print10printFloatEdh+0xc6>
    rounding /= 10.0;
   d5d4c:	4642      	mov	r2, r8
   d5d4e:	464b      	mov	r3, r9
   d5d50:	f000 ffde 	bl	d6d10 <__aeabi_ddiv>
  for (uint8_t i=0; i<digits; ++i)
   d5d54:	f10b 0b01 	add.w	fp, fp, #1
   d5d58:	e7f4      	b.n	d5d44 <_ZN5Print10printFloatEdh+0xac>
  size_t n = 0;
   d5d5a:	4682      	mov	sl, r0
   d5d5c:	e7ea      	b.n	d5d34 <_ZN5Print10printFloatEdh+0x9c>
  number += rounding;
   d5d5e:	4622      	mov	r2, r4
   d5d60:	462b      	mov	r3, r5
   d5d62:	f000 fcf5 	bl	d6750 <__adddf3>
   d5d66:	460d      	mov	r5, r1
   d5d68:	4604      	mov	r4, r0
  unsigned long int_part = (unsigned long)number;
   d5d6a:	f001 f97f 	bl	d706c <__aeabi_d2uiz>
   d5d6e:	4680      	mov	r8, r0
  double remainder = number - (double)int_part;
   d5d70:	f000 fe2a 	bl	d69c8 <__aeabi_ui2d>
   d5d74:	4602      	mov	r2, r0
   d5d76:	460b      	mov	r3, r1
   d5d78:	4620      	mov	r0, r4
   d5d7a:	4629      	mov	r1, r5
   d5d7c:	f000 fce6 	bl	d674c <__aeabi_dsub>
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d5d80:	220a      	movs	r2, #10
   d5d82:	4604      	mov	r4, r0
   d5d84:	460d      	mov	r5, r1
   d5d86:	4630      	mov	r0, r6
   d5d88:	4641      	mov	r1, r8
   d5d8a:	f7ff ff66 	bl	d5c5a <_ZN5Print11printNumberEmh>
  n += print(int_part);
   d5d8e:	4482      	add	sl, r0
  if (digits > 0) {
   d5d90:	b127      	cbz	r7, d5d9c <_ZN5Print10printFloatEdh+0x104>
  return write(str);
   d5d92:	4923      	ldr	r1, [pc, #140]	; (d5e20 <_ZN5Print10printFloatEdh+0x188>)
   d5d94:	4630      	mov	r0, r6
   d5d96:	f7ff ff31 	bl	d5bfc <_ZN5Print5writeEPKc>
    n += print(".");
   d5d9a:	4482      	add	sl, r0
    remainder *= 10.0;
   d5d9c:	f8df 9084 	ldr.w	r9, [pc, #132]	; d5e24 <_ZN5Print10printFloatEdh+0x18c>
   d5da0:	f04f 0800 	mov.w	r8, #0
  while (digits-- > 0)
   d5da4:	3f01      	subs	r7, #1
   d5da6:	b2ff      	uxtb	r7, r7
   d5da8:	2fff      	cmp	r7, #255	; 0xff
   d5daa:	d089      	beq.n	d5cc0 <_ZN5Print10printFloatEdh+0x28>
    remainder *= 10.0;
   d5dac:	4642      	mov	r2, r8
   d5dae:	464b      	mov	r3, r9
   d5db0:	4620      	mov	r0, r4
   d5db2:	4629      	mov	r1, r5
   d5db4:	f000 fe82 	bl	d6abc <__aeabi_dmul>
   d5db8:	4604      	mov	r4, r0
   d5dba:	460d      	mov	r5, r1
    int toPrint = int(remainder);
   d5dbc:	f001 f92e 	bl	d701c <__aeabi_d2iz>
        if (n < 0 && base == 10) {
   d5dc0:	f1b0 0b00 	subs.w	fp, r0, #0
   d5dc4:	da1a      	bge.n	d5dfc <_ZN5Print10printFloatEdh+0x164>
            t = print('-');
   d5dc6:	212d      	movs	r1, #45	; 0x2d
   d5dc8:	4630      	mov	r0, r6
   d5dca:	f7ff ff2d 	bl	d5c28 <_ZN5Print5printEc>
            val = -n;
   d5dce:	f1cb 0100 	rsb	r1, fp, #0
            t = print('-');
   d5dd2:	4603      	mov	r3, r0
        return printNumber(val, base) + t;
   d5dd4:	220a      	movs	r2, #10
   d5dd6:	4630      	mov	r0, r6
   d5dd8:	9301      	str	r3, [sp, #4]
   d5dda:	f7ff ff3e 	bl	d5c5a <_ZN5Print11printNumberEmh>
   d5dde:	9b01      	ldr	r3, [sp, #4]
   d5de0:	4418      	add	r0, r3
    n += print(toPrint);
   d5de2:	4482      	add	sl, r0
    remainder -= toPrint;
   d5de4:	4658      	mov	r0, fp
   d5de6:	f000 fdff 	bl	d69e8 <__aeabi_i2d>
   d5dea:	4602      	mov	r2, r0
   d5dec:	460b      	mov	r3, r1
   d5dee:	4620      	mov	r0, r4
   d5df0:	4629      	mov	r1, r5
   d5df2:	f000 fcab 	bl	d674c <__aeabi_dsub>
   d5df6:	4604      	mov	r4, r0
   d5df8:	460d      	mov	r5, r1
  while (digits-- > 0)
   d5dfa:	e7d3      	b.n	d5da4 <_ZN5Print10printFloatEdh+0x10c>
            val = n;
   d5dfc:	4659      	mov	r1, fp
        size_t t = 0;
   d5dfe:	2300      	movs	r3, #0
   d5e00:	e7e8      	b.n	d5dd4 <_ZN5Print10printFloatEdh+0x13c>
   d5e02:	bf00      	nop
   d5e04:	000d7d04 	.word	0x000d7d04
   d5e08:	7fefffff 	.word	0x7fefffff
   d5e0c:	000d7d08 	.word	0x000d7d08
   d5e10:	41efffff 	.word	0x41efffff
   d5e14:	000d7d0c 	.word	0x000d7d0c
   d5e18:	c1efffff 	.word	0xc1efffff
   d5e1c:	3fe00000 	.word	0x3fe00000
   d5e20:	000d7d10 	.word	0x000d7d10
   d5e24:	40240000 	.word	0x40240000

000d5e28 <_ZN5Print5printEdi>:
  return printFloat(n, digits);
   d5e28:	b2c9      	uxtb	r1, r1
   d5e2a:	f7ff bf35 	b.w	d5c98 <_ZN5Print10printFloatEdh>

000d5e2e <_ZN5Print7vprintfEbPKcSt9__va_list>:

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   d5e2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d5e32:	b086      	sub	sp, #24
   d5e34:	af00      	add	r7, sp, #0
   d5e36:	4605      	mov	r5, r0
   d5e38:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   d5e3a:	1d38      	adds	r0, r7, #4
   d5e3c:	2114      	movs	r1, #20
{
   d5e3e:	4614      	mov	r4, r2
    va_copy(args2, args);
   d5e40:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   d5e42:	f7ff fd85 	bl	d5950 <vsnprintf>

    if (n<bufsize)
   d5e46:	2813      	cmp	r0, #19
   d5e48:	d80e      	bhi.n	d5e68 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   d5e4a:	1d39      	adds	r1, r7, #4
   d5e4c:	4628      	mov	r0, r5
   d5e4e:	f7ff fed5 	bl	d5bfc <_ZN5Print5writeEPKc>
   d5e52:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   d5e54:	b11e      	cbz	r6, d5e5e <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   d5e56:	4628      	mov	r0, r5
   d5e58:	f7ff fee9 	bl	d5c2e <_ZN5Print7printlnEv>
   d5e5c:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   d5e5e:	4620      	mov	r0, r4
   d5e60:	3718      	adds	r7, #24
   d5e62:	46bd      	mov	sp, r7
   d5e64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   d5e68:	f100 0308 	add.w	r3, r0, #8
   d5e6c:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   d5e70:	46e8      	mov	r8, sp
        char bigger[n+1];
   d5e72:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   d5e76:	4622      	mov	r2, r4
   d5e78:	1c41      	adds	r1, r0, #1
   d5e7a:	683b      	ldr	r3, [r7, #0]
   d5e7c:	4668      	mov	r0, sp
   d5e7e:	f7ff fd67 	bl	d5950 <vsnprintf>
  return write(str);
   d5e82:	4669      	mov	r1, sp
   d5e84:	4628      	mov	r0, r5
   d5e86:	f7ff feb9 	bl	d5bfc <_ZN5Print5writeEPKc>
   d5e8a:	4604      	mov	r4, r0
   d5e8c:	46c5      	mov	sp, r8
   d5e8e:	e7e1      	b.n	d5e54 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000d5e90 <_ZN5spark9WiFiClass2onEv>:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   d5e90:	2300      	movs	r3, #0
   d5e92:	6840      	ldr	r0, [r0, #4]
   d5e94:	461a      	mov	r2, r3
   d5e96:	4619      	mov	r1, r3
   d5e98:	f7ff bd02 	b.w	d58a0 <network_on>

000d5e9c <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d5e9c:	4b01      	ldr	r3, [pc, #4]	; (d5ea4 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d5e9e:	4a02      	ldr	r2, [pc, #8]	; (d5ea8 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d5ea0:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   d5ea2:	4770      	bx	lr
   d5ea4:	2003e670 	.word	0x2003e670
   d5ea8:	000d7d12 	.word	0x000d7d12

000d5eac <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d5eac:	4b02      	ldr	r3, [pc, #8]	; (d5eb8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d5eae:	681a      	ldr	r2, [r3, #0]
   d5eb0:	4b02      	ldr	r3, [pc, #8]	; (d5ebc <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d5eb2:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   d5eb4:	4770      	bx	lr
   d5eb6:	bf00      	nop
   d5eb8:	2003e544 	.word	0x2003e544
   d5ebc:	2003e674 	.word	0x2003e674

000d5ec0 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d5ec0:	2100      	movs	r1, #0
   d5ec2:	f7ff bca9 	b.w	d5818 <system_delay_ms>

000d5ec6 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d5ec6:	b510      	push	{r4, lr}
   d5ec8:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d5eca:	f7ff fe63 	bl	d5b94 <_ZNSt14_Function_baseD1Ev>
   d5ece:	4620      	mov	r0, r4
   d5ed0:	bd10      	pop	{r4, pc}
	...

000d5ed4 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   d5ed4:	4803      	ldr	r0, [pc, #12]	; (d5ee4 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d5ed6:	4a04      	ldr	r2, [pc, #16]	; (d5ee8 <_GLOBAL__sub_I_RGB+0x14>)
   d5ed8:	4904      	ldr	r1, [pc, #16]	; (d5eec <_GLOBAL__sub_I_RGB+0x18>)
   d5eda:	2300      	movs	r3, #0
   d5edc:	6083      	str	r3, [r0, #8]
   d5ede:	f000 bc27 	b.w	d6730 <__aeabi_atexit>
   d5ee2:	bf00      	nop
   d5ee4:	2003e678 	.word	0x2003e678
   d5ee8:	2003e5b0 	.word	0x2003e5b0
   d5eec:	000d5ec7 	.word	0x000d5ec7

000d5ef0 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   d5ef0:	4b01      	ldr	r3, [pc, #4]	; (d5ef8 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   d5ef2:	6018      	str	r0, [r3, #0]
    }, nullptr);
   d5ef4:	4770      	bx	lr
   d5ef6:	bf00      	nop
   d5ef8:	2003e548 	.word	0x2003e548

000d5efc <serialEventRun>:
{
   d5efc:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d5efe:	4b0b      	ldr	r3, [pc, #44]	; (d5f2c <serialEventRun+0x30>)
   d5f00:	b143      	cbz	r3, d5f14 <serialEventRun+0x18>
   d5f02:	f000 f957 	bl	d61b4 <_Z16_fetch_usbserialv>
   d5f06:	6803      	ldr	r3, [r0, #0]
   d5f08:	691b      	ldr	r3, [r3, #16]
   d5f0a:	4798      	blx	r3
   d5f0c:	2800      	cmp	r0, #0
   d5f0e:	dd01      	ble.n	d5f14 <serialEventRun+0x18>
        serialEvent();
   d5f10:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   d5f14:	4b06      	ldr	r3, [pc, #24]	; (d5f30 <serialEventRun+0x34>)
   d5f16:	b143      	cbz	r3, d5f2a <serialEventRun+0x2e>
   d5f18:	f000 f9ca 	bl	d62b0 <_Z22__fetch_global_Serial1v>
   d5f1c:	6803      	ldr	r3, [r0, #0]
   d5f1e:	691b      	ldr	r3, [r3, #16]
   d5f20:	4798      	blx	r3
   d5f22:	2800      	cmp	r0, #0
   d5f24:	dd01      	ble.n	d5f2a <serialEventRun+0x2e>
        serialEvent1();
   d5f26:	f3af 8000 	nop.w
}
   d5f2a:	bd08      	pop	{r3, pc}
	...

000d5f34 <_post_loop>:
{
   d5f34:	b508      	push	{r3, lr}
	serialEventRun();
   d5f36:	f7ff ffe1 	bl	d5efc <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d5f3a:	f7ff fb25 	bl	d5588 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d5f3e:	4b01      	ldr	r3, [pc, #4]	; (d5f44 <_post_loop+0x10>)
   d5f40:	6018      	str	r0, [r3, #0]
}
   d5f42:	bd08      	pop	{r3, pc}
   d5f44:	2003e7d8 	.word	0x2003e7d8

000d5f48 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d5f48:	4802      	ldr	r0, [pc, #8]	; (d5f54 <_Z33system_initialize_user_backup_ramv+0xc>)
   d5f4a:	4a03      	ldr	r2, [pc, #12]	; (d5f58 <_Z33system_initialize_user_backup_ramv+0x10>)
   d5f4c:	4903      	ldr	r1, [pc, #12]	; (d5f5c <_Z33system_initialize_user_backup_ramv+0x14>)
   d5f4e:	1a12      	subs	r2, r2, r0
   d5f50:	f001 b8ba 	b.w	d70c8 <memcpy>
   d5f54:	2003f400 	.word	0x2003f400
   d5f58:	2003f404 	.word	0x2003f404
   d5f5c:	000d7e70 	.word	0x000d7e70

000d5f60 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d5f60:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d5f62:	2300      	movs	r3, #0
   d5f64:	9300      	str	r3, [sp, #0]
   d5f66:	461a      	mov	r2, r3
   d5f68:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d5f6c:	f7ff fc6e 	bl	d584c <system_ctrl_set_result>
}
   d5f70:	b003      	add	sp, #12
   d5f72:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d5f78 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   d5f78:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d5f7a:	8843      	ldrh	r3, [r0, #2]
   d5f7c:	2b0a      	cmp	r3, #10
   d5f7e:	d008      	beq.n	d5f92 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d5f80:	2b50      	cmp	r3, #80	; 0x50
   d5f82:	d10b      	bne.n	d5f9c <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   d5f84:	4b09      	ldr	r3, [pc, #36]	; (d5fac <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d5f86:	681b      	ldr	r3, [r3, #0]
   d5f88:	b14b      	cbz	r3, d5f9e <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   d5f8a:	b003      	add	sp, #12
   d5f8c:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   d5f90:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   d5f92:	f7ff ffe5 	bl	d5f60 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   d5f96:	b003      	add	sp, #12
   d5f98:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d5f9c:	2300      	movs	r3, #0
   d5f9e:	9300      	str	r3, [sp, #0]
   d5fa0:	461a      	mov	r2, r3
   d5fa2:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d5fa6:	f7ff fc51 	bl	d584c <system_ctrl_set_result>
}
   d5faa:	e7f4      	b.n	d5f96 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   d5fac:	2003e68c 	.word	0x2003e68c

000d5fb0 <module_user_init_hook>:
{
   d5fb0:	b538      	push	{r3, r4, r5, lr}
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d5fb2:	4c12      	ldr	r4, [pc, #72]	; (d5ffc <module_user_init_hook+0x4c>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d5fb4:	4812      	ldr	r0, [pc, #72]	; (d6000 <module_user_init_hook+0x50>)
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d5fb6:	4d13      	ldr	r5, [pc, #76]	; (d6004 <module_user_init_hook+0x54>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d5fb8:	2100      	movs	r1, #0
   d5fba:	f7ff fcd1 	bl	d5960 <newlib_impure_ptr_callback>
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d5fbe:	6823      	ldr	r3, [r4, #0]
   d5fc0:	42ab      	cmp	r3, r5
   d5fc2:	4b11      	ldr	r3, [pc, #68]	; (d6008 <module_user_init_hook+0x58>)
   d5fc4:	bf0c      	ite	eq
   d5fc6:	2201      	moveq	r2, #1
   d5fc8:	2200      	movne	r2, #0
   d5fca:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d5fcc:	d002      	beq.n	d5fd4 <module_user_init_hook+0x24>
        system_initialize_user_backup_ram();
   d5fce:	f7ff ffbb 	bl	d5f48 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d5fd2:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d5fd4:	f7ff fac8 	bl	d5568 <HAL_RNG_GetRandomNumber>
   d5fd8:	4604      	mov	r4, r0
    srand(seed);
   d5fda:	f001 f88b 	bl	d70f4 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d5fde:	4b0b      	ldr	r3, [pc, #44]	; (d600c <module_user_init_hook+0x5c>)
   d5fe0:	b113      	cbz	r3, d5fe8 <module_user_init_hook+0x38>
        random_seed_from_cloud(seed);
   d5fe2:	4620      	mov	r0, r4
   d5fe4:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d5fe8:	2100      	movs	r1, #0
   d5fea:	4808      	ldr	r0, [pc, #32]	; (d600c <module_user_init_hook+0x5c>)
   d5fec:	f7ff fc98 	bl	d5920 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   d5ff0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d5ff4:	4806      	ldr	r0, [pc, #24]	; (d6010 <module_user_init_hook+0x60>)
   d5ff6:	2100      	movs	r1, #0
   d5ff8:	f7ff bc1e 	b.w	d5838 <system_ctrl_set_app_request_handler>
   d5ffc:	2003f400 	.word	0x2003f400
   d6000:	000d5ef1 	.word	0x000d5ef1
   d6004:	9a271c1e 	.word	0x9a271c1e
   d6008:	2003e688 	.word	0x2003e688
   d600c:	00000000 	.word	0x00000000
   d6010:	000d5f79 	.word	0x000d5f79

000d6014 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d6014:	4770      	bx	lr

000d6016 <_ZN9IPAddressD0Ev>:
   d6016:	b510      	push	{r4, lr}
   d6018:	2118      	movs	r1, #24
   d601a:	4604      	mov	r4, r0
   d601c:	f000 fb8d 	bl	d673a <_ZdlPvj>
   d6020:	4620      	mov	r0, r4
   d6022:	bd10      	pop	{r4, pc}

000d6024 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d6024:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d6026:	7d03      	ldrb	r3, [r0, #20]
   d6028:	2b06      	cmp	r3, #6
{
   d602a:	b08d      	sub	sp, #52	; 0x34
   d602c:	460e      	mov	r6, r1
   d602e:	f100 0704 	add.w	r7, r0, #4
   d6032:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   d6036:	d012      	beq.n	d605e <_ZNK9IPAddress7printToER5Print+0x3a>
   d6038:	f100 0508 	add.w	r5, r0, #8
        return printNumber(val, base) + t;
   d603c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d6040:	220a      	movs	r2, #10
   d6042:	4630      	mov	r0, r6
   d6044:	f7ff fe09 	bl	d5c5a <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d6048:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d604a:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   d604c:	d019      	beq.n	d6082 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   d604e:	2c00      	cmp	r4, #0
   d6050:	d0f4      	beq.n	d603c <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   d6052:	212e      	movs	r1, #46	; 0x2e
   d6054:	4630      	mov	r0, r6
   d6056:	f7ff fde7 	bl	d5c28 <_ZN5Print5printEc>
   d605a:	4404      	add	r4, r0
   d605c:	e7ee      	b.n	d603c <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d605e:	232f      	movs	r3, #47	; 0x2f
   d6060:	466a      	mov	r2, sp
   d6062:	4639      	mov	r1, r7
   d6064:	200a      	movs	r0, #10
		buf[0] = 0;
   d6066:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d606a:	f7ff fab5 	bl	d55d8 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   d606e:	4668      	mov	r0, sp
   d6070:	f001 f864 	bl	d713c <strlen>
   d6074:	6833      	ldr	r3, [r6, #0]
   d6076:	4602      	mov	r2, r0
   d6078:	68db      	ldr	r3, [r3, #12]
   d607a:	4669      	mov	r1, sp
   d607c:	4630      	mov	r0, r6
   d607e:	4798      	blx	r3
   d6080:	4604      	mov	r4, r0
    }
    return n;
}
   d6082:	4620      	mov	r0, r4
   d6084:	b00d      	add	sp, #52	; 0x34
   d6086:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d6088 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   d6088:	b510      	push	{r4, lr}
   d608a:	4b05      	ldr	r3, [pc, #20]	; (d60a0 <_ZN9IPAddressC1Ev+0x18>)
   d608c:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d608e:	2211      	movs	r2, #17
   d6090:	f840 3b04 	str.w	r3, [r0], #4
   d6094:	2100      	movs	r1, #0
   d6096:	f001 f825 	bl	d70e4 <memset>
}
   d609a:	4620      	mov	r0, r4
   d609c:	bd10      	pop	{r4, pc}
   d609e:	bf00      	nop
   d60a0:	000d7d3c 	.word	0x000d7d3c

000d60a4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   d60a4:	4603      	mov	r3, r0
   d60a6:	4a07      	ldr	r2, [pc, #28]	; (d60c4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d60a8:	b510      	push	{r4, lr}
   d60aa:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   d60ae:	f101 0210 	add.w	r2, r1, #16
   d60b2:	f851 4b04 	ldr.w	r4, [r1], #4
   d60b6:	f843 4b04 	str.w	r4, [r3], #4
   d60ba:	4291      	cmp	r1, r2
   d60bc:	d1f9      	bne.n	d60b2 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d60be:	780a      	ldrb	r2, [r1, #0]
   d60c0:	701a      	strb	r2, [r3, #0]
}
   d60c2:	bd10      	pop	{r4, pc}
   d60c4:	000d7d3c 	.word	0x000d7d3c

000d60c8 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   d60c8:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d60ca:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d60ce:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d60d2:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d60d6:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   d60da:	2304      	movs	r3, #4
   d60dc:	6041      	str	r1, [r0, #4]
   d60de:	7503      	strb	r3, [r0, #20]
}
   d60e0:	bd10      	pop	{r4, pc}
	...

000d60e4 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   d60e4:	b513      	push	{r0, r1, r4, lr}
   d60e6:	4b05      	ldr	r3, [pc, #20]	; (d60fc <_ZN9IPAddressC1EPKh+0x18>)
   d60e8:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   d60ea:	78cb      	ldrb	r3, [r1, #3]
   d60ec:	9300      	str	r3, [sp, #0]
   d60ee:	788b      	ldrb	r3, [r1, #2]
   d60f0:	784a      	ldrb	r2, [r1, #1]
   d60f2:	7809      	ldrb	r1, [r1, #0]
   d60f4:	f7ff ffe8 	bl	d60c8 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   d60f8:	b002      	add	sp, #8
   d60fa:	bd10      	pop	{r4, pc}
   d60fc:	000d7d3c 	.word	0x000d7d3c

000d6100 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d6100:	7441      	strb	r1, [r0, #17]
}
   d6102:	4770      	bx	lr

000d6104 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d6104:	4770      	bx	lr

000d6106 <_ZN9USBSerial4readEv>:
{
   d6106:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d6108:	2100      	movs	r1, #0
   d610a:	7c00      	ldrb	r0, [r0, #16]
   d610c:	f7ff fb5c 	bl	d57c8 <HAL_USB_USART_Receive_Data>
}
   d6110:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d6114:	bd08      	pop	{r3, pc}

000d6116 <_ZN9USBSerial4peekEv>:

int USBSerial::peek()
{
   d6116:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d6118:	2101      	movs	r1, #1
   d611a:	7c00      	ldrb	r0, [r0, #16]
   d611c:	f7ff fb54 	bl	d57c8 <HAL_USB_USART_Receive_Data>
}
   d6120:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d6124:	bd08      	pop	{r3, pc}

000d6126 <_ZN9USBSerial17availableForWriteEv>:
{
   d6126:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d6128:	7c00      	ldrb	r0, [r0, #16]
   d612a:	f7ff fb45 	bl	d57b8 <HAL_USB_USART_Available_Data_For_Write>
}
   d612e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d6132:	bd08      	pop	{r3, pc}

000d6134 <_ZN9USBSerial9availableEv>:
{
   d6134:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d6136:	7c00      	ldrb	r0, [r0, #16]
   d6138:	f7ff fb36 	bl	d57a8 <HAL_USB_USART_Available_Data>
}
   d613c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d6140:	bd08      	pop	{r3, pc}

000d6142 <_ZN9USBSerial5writeEh>:
{
   d6142:	b513      	push	{r0, r1, r4, lr}
   d6144:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d6146:	7c00      	ldrb	r0, [r0, #16]
{
   d6148:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d614a:	f7ff fb35 	bl	d57b8 <HAL_USB_USART_Available_Data_For_Write>
   d614e:	2800      	cmp	r0, #0
   d6150:	9901      	ldr	r1, [sp, #4]
   d6152:	dc01      	bgt.n	d6158 <_ZN9USBSerial5writeEh+0x16>
   d6154:	7c60      	ldrb	r0, [r4, #17]
   d6156:	b120      	cbz	r0, d6162 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d6158:	7c20      	ldrb	r0, [r4, #16]
   d615a:	f7ff fb3d 	bl	d57d8 <HAL_USB_USART_Send_Data>
   d615e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   d6162:	b002      	add	sp, #8
   d6164:	bd10      	pop	{r4, pc}

000d6166 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   d6166:	7c00      	ldrb	r0, [r0, #16]
   d6168:	f7ff bb3e 	b.w	d57e8 <HAL_USB_USART_Flush_Data>

000d616c <_ZN9USBSerialD0Ev>:
   d616c:	b510      	push	{r4, lr}
   d616e:	2114      	movs	r1, #20
   d6170:	4604      	mov	r4, r0
   d6172:	f000 fae2 	bl	d673a <_ZdlPvj>
   d6176:	4620      	mov	r0, r4
   d6178:	bd10      	pop	{r4, pc}
	...

000d617c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d617c:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d617e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d6182:	4604      	mov	r4, r0
   d6184:	4608      	mov	r0, r1
   d6186:	2100      	movs	r1, #0
   d6188:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d618c:	4b04      	ldr	r3, [pc, #16]	; (d61a0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d618e:	6023      	str	r3, [r4, #0]
  _blocking = true;
   d6190:	2301      	movs	r3, #1
  _serial = serial;
   d6192:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d6194:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   d6196:	4611      	mov	r1, r2
   d6198:	f7ff fafe 	bl	d5798 <HAL_USB_USART_Init>
}
   d619c:	4620      	mov	r0, r4
   d619e:	bd10      	pop	{r4, pc}
   d61a0:	000d7d50 	.word	0x000d7d50

000d61a4 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d61a4:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d61a6:	2214      	movs	r2, #20
{
   d61a8:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d61aa:	2100      	movs	r1, #0
   d61ac:	f000 ff9a 	bl	d70e4 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d61b0:	4620      	mov	r0, r4
   d61b2:	bd10      	pop	{r4, pc}

000d61b4 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d61b4:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d61b6:	4c10      	ldr	r4, [pc, #64]	; (d61f8 <_Z16_fetch_usbserialv+0x44>)
{
   d61b8:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d61ba:	a803      	add	r0, sp, #12
   d61bc:	f7ff fff2 	bl	d61a4 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d61c0:	7821      	ldrb	r1, [r4, #0]
   d61c2:	f3bf 8f5b 	dmb	ish
   d61c6:	f011 0101 	ands.w	r1, r1, #1
   d61ca:	d111      	bne.n	d61f0 <_Z16_fetch_usbserialv+0x3c>
   d61cc:	4620      	mov	r0, r4
   d61ce:	9101      	str	r1, [sp, #4]
   d61d0:	f7fd ff70 	bl	d40b4 <__cxa_guard_acquire>
   d61d4:	9901      	ldr	r1, [sp, #4]
   d61d6:	b158      	cbz	r0, d61f0 <_Z16_fetch_usbserialv+0x3c>
   d61d8:	aa03      	add	r2, sp, #12
   d61da:	4808      	ldr	r0, [pc, #32]	; (d61fc <_Z16_fetch_usbserialv+0x48>)
   d61dc:	f7ff ffce 	bl	d617c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d61e0:	4620      	mov	r0, r4
   d61e2:	f7fd ff6c 	bl	d40be <__cxa_guard_release>
   d61e6:	4a06      	ldr	r2, [pc, #24]	; (d6200 <_Z16_fetch_usbserialv+0x4c>)
   d61e8:	4906      	ldr	r1, [pc, #24]	; (d6204 <_Z16_fetch_usbserialv+0x50>)
   d61ea:	4804      	ldr	r0, [pc, #16]	; (d61fc <_Z16_fetch_usbserialv+0x48>)
   d61ec:	f000 faa0 	bl	d6730 <__aeabi_atexit>
	return _usbserial;
}
   d61f0:	4802      	ldr	r0, [pc, #8]	; (d61fc <_Z16_fetch_usbserialv+0x48>)
   d61f2:	b008      	add	sp, #32
   d61f4:	bd10      	pop	{r4, pc}
   d61f6:	bf00      	nop
   d61f8:	2003e690 	.word	0x2003e690
   d61fc:	2003e694 	.word	0x2003e694
   d6200:	2003e5b0 	.word	0x2003e5b0
   d6204:	000d6105 	.word	0x000d6105

000d6208 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
   d6208:	4770      	bx	lr

000d620a <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d620a:	7441      	strb	r1, [r0, #17]
}
   d620c:	4770      	bx	lr

000d620e <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   d620e:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   d6210:	7c00      	ldrb	r0, [r0, #16]
   d6212:	f7ff fa21 	bl	d5658 <hal_usart_available_data_for_write>
}
   d6216:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d621a:	bd08      	pop	{r3, pc}

000d621c <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d621c:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   d621e:	7c00      	ldrb	r0, [r0, #16]
   d6220:	f7ff f9f2 	bl	d5608 <hal_usart_available>
}
   d6224:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d6228:	bd08      	pop	{r3, pc}

000d622a <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d622a:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   d622c:	7c00      	ldrb	r0, [r0, #16]
   d622e:	f7ff f9fb 	bl	d5628 <hal_usart_peek>
}
   d6232:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d6236:	bd08      	pop	{r3, pc}

000d6238 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d6238:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   d623a:	7c00      	ldrb	r0, [r0, #16]
   d623c:	f7ff f9ec 	bl	d5618 <hal_usart_read>
}
   d6240:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d6244:	bd08      	pop	{r3, pc}

000d6246 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   d6246:	7c00      	ldrb	r0, [r0, #16]
   d6248:	f7ff b9f6 	b.w	d5638 <hal_usart_flush>

000d624c <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d624c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d624e:	7c45      	ldrb	r5, [r0, #17]
{
   d6250:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d6252:	b12d      	cbz	r5, d6260 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   d6254:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d6256:	b003      	add	sp, #12
   d6258:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   d625c:	f7ff b9cc 	b.w	d55f8 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d6260:	7c00      	ldrb	r0, [r0, #16]
   d6262:	9101      	str	r1, [sp, #4]
   d6264:	f7ff f9f8 	bl	d5658 <hal_usart_available_data_for_write>
   d6268:	2800      	cmp	r0, #0
   d626a:	9901      	ldr	r1, [sp, #4]
   d626c:	dcf2      	bgt.n	d6254 <_ZN11USARTSerial5writeEh+0x8>
}
   d626e:	4628      	mov	r0, r5
   d6270:	b003      	add	sp, #12
   d6272:	bd30      	pop	{r4, r5, pc}

000d6274 <_ZN11USARTSerialD0Ev>:
   d6274:	b510      	push	{r4, lr}
   d6276:	2114      	movs	r1, #20
   d6278:	4604      	mov	r4, r0
   d627a:	f000 fa5e 	bl	d673a <_ZdlPvj>
   d627e:	4620      	mov	r0, r4
   d6280:	bd10      	pop	{r4, pc}
	...

000d6284 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
   d6284:	b510      	push	{r4, lr}
   d6286:	f04f 0c00 	mov.w	ip, #0
   d628a:	4604      	mov	r4, r0
   d628c:	4608      	mov	r0, r1
   d628e:	4611      	mov	r1, r2
   d6290:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d6294:	e9c4 c201 	strd	ip, r2, [r4, #4]
   d6298:	4a04      	ldr	r2, [pc, #16]	; (d62ac <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
   d629a:	6022      	str	r2, [r4, #0]
  _blocking = true;
   d629c:	2201      	movs	r2, #1
  _serial = serial;
   d629e:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d62a0:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
   d62a2:	461a      	mov	r2, r3
   d62a4:	f7ff f9a0 	bl	d55e8 <hal_usart_init>
}
   d62a8:	4620      	mov	r0, r4
   d62aa:	bd10      	pop	{r4, pc}
   d62ac:	000d7d80 	.word	0x000d7d80

000d62b0 <_Z22__fetch_global_Serial1v>:
static hal_usart_ring_buffer_t* serial1_rx_buffer = nullptr;
static hal_usart_ring_buffer_t* serial1_tx_buffer = nullptr;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d62b0:	b513      	push	{r0, r1, r4, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d62b2:	4c0e      	ldr	r4, [pc, #56]	; (d62ec <_Z22__fetch_global_Serial1v+0x3c>)
   d62b4:	7821      	ldrb	r1, [r4, #0]
   d62b6:	f3bf 8f5b 	dmb	ish
   d62ba:	f011 0101 	ands.w	r1, r1, #1
   d62be:	d112      	bne.n	d62e6 <_Z22__fetch_global_Serial1v+0x36>
   d62c0:	4620      	mov	r0, r4
   d62c2:	9101      	str	r1, [sp, #4]
   d62c4:	f7fd fef6 	bl	d40b4 <__cxa_guard_acquire>
   d62c8:	9901      	ldr	r1, [sp, #4]
   d62ca:	b160      	cbz	r0, d62e6 <_Z22__fetch_global_Serial1v+0x36>
   d62cc:	4a08      	ldr	r2, [pc, #32]	; (d62f0 <_Z22__fetch_global_Serial1v+0x40>)
   d62ce:	4b09      	ldr	r3, [pc, #36]	; (d62f4 <_Z22__fetch_global_Serial1v+0x44>)
   d62d0:	4809      	ldr	r0, [pc, #36]	; (d62f8 <_Z22__fetch_global_Serial1v+0x48>)
   d62d2:	f7ff ffd7 	bl	d6284 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
   d62d6:	4620      	mov	r0, r4
   d62d8:	f7fd fef1 	bl	d40be <__cxa_guard_release>
   d62dc:	4a07      	ldr	r2, [pc, #28]	; (d62fc <_Z22__fetch_global_Serial1v+0x4c>)
   d62de:	4908      	ldr	r1, [pc, #32]	; (d6300 <_Z22__fetch_global_Serial1v+0x50>)
   d62e0:	4805      	ldr	r0, [pc, #20]	; (d62f8 <_Z22__fetch_global_Serial1v+0x48>)
   d62e2:	f000 fa25 	bl	d6730 <__aeabi_atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d62e6:	4804      	ldr	r0, [pc, #16]	; (d62f8 <_Z22__fetch_global_Serial1v+0x48>)
   d62e8:	b002      	add	sp, #8
   d62ea:	bd10      	pop	{r4, pc}
   d62ec:	2003e6a8 	.word	0x2003e6a8
   d62f0:	2003e6ac 	.word	0x2003e6ac
   d62f4:	2003e730 	.word	0x2003e730
   d62f8:	2003e7b4 	.word	0x2003e7b4
   d62fc:	2003e5b0 	.word	0x2003e5b0
   d6300:	000d6209 	.word	0x000d6209

000d6304 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   d6304:	4770      	bx	lr

000d6306 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d6306:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6308:	4606      	mov	r6, r0
   d630a:	4615      	mov	r5, r2
   d630c:	460c      	mov	r4, r1
   d630e:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d6310:	42bc      	cmp	r4, r7
   d6312:	d006      	beq.n	d6322 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d6314:	6833      	ldr	r3, [r6, #0]
   d6316:	f814 1b01 	ldrb.w	r1, [r4], #1
   d631a:	689b      	ldr	r3, [r3, #8]
   d631c:	4630      	mov	r0, r6
   d631e:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   d6320:	e7f6      	b.n	d6310 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   d6322:	4628      	mov	r0, r5
   d6324:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6326 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   d6326:	7c00      	ldrb	r0, [r0, #16]
   d6328:	2200      	movs	r2, #0
   d632a:	f7ff b9bd 	b.w	d56a8 <hal_i2c_write>

000d632e <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   d632e:	7c00      	ldrb	r0, [r0, #16]
   d6330:	2100      	movs	r1, #0
   d6332:	f7ff b9c1 	b.w	d56b8 <hal_i2c_available>

000d6336 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   d6336:	7c00      	ldrb	r0, [r0, #16]
   d6338:	2100      	movs	r1, #0
   d633a:	f7ff b9c5 	b.w	d56c8 <hal_i2c_read>

000d633e <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   d633e:	7c00      	ldrb	r0, [r0, #16]
   d6340:	2100      	movs	r1, #0
   d6342:	f7ff b9c9 	b.w	d56d8 <hal_i2c_peek>

000d6346 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   d6346:	7c00      	ldrb	r0, [r0, #16]
   d6348:	2100      	movs	r1, #0
   d634a:	f7ff b9cd 	b.w	d56e8 <hal_i2c_flush>

000d634e <_ZN7TwoWireD0Ev>:
   d634e:	b510      	push	{r4, lr}
   d6350:	2114      	movs	r1, #20
   d6352:	4604      	mov	r4, r0
   d6354:	f000 f9f1 	bl	d673a <_ZdlPvj>
   d6358:	4620      	mov	r0, r4
   d635a:	bd10      	pop	{r4, pc}

000d635c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   d635c:	b510      	push	{r4, lr}
   d635e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d6362:	4604      	mov	r4, r0
   d6364:	4608      	mov	r0, r1
   d6366:	2100      	movs	r1, #0
   d6368:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d636c:	4b03      	ldr	r3, [pc, #12]	; (d637c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   d636e:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   d6370:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   d6372:	4611      	mov	r1, r2
   d6374:	f7ff f9c8 	bl	d5708 <hal_i2c_init>
}
   d6378:	4620      	mov	r0, r4
   d637a:	bd10      	pop	{r4, pc}
   d637c:	000d7db0 	.word	0x000d7db0

000d6380 <_ZN7TwoWire8setSpeedEm>:
  hal_i2c_set_speed(_i2c, clockSpeed, NULL);
   d6380:	7c00      	ldrb	r0, [r0, #16]
   d6382:	2200      	movs	r2, #0
   d6384:	f7ff b970 	b.w	d5668 <hal_i2c_set_speed>

000d6388 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   d6388:	2300      	movs	r3, #0
   d638a:	7c00      	ldrb	r0, [r0, #16]
   d638c:	461a      	mov	r2, r3
   d638e:	4619      	mov	r1, r3
   d6390:	f7ff b972 	b.w	d5678 <hal_i2c_begin>

000d6394 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   d6394:	7c00      	ldrb	r0, [r0, #16]
   d6396:	2200      	movs	r2, #0
   d6398:	f7ff b976 	b.w	d5688 <hal_i2c_begin_transmission>

000d639c <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   d639c:	b2c9      	uxtb	r1, r1
   d639e:	f7ff bff9 	b.w	d6394 <_ZN7TwoWire17beginTransmissionEh>

000d63a2 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   d63a2:	7c00      	ldrb	r0, [r0, #16]
   d63a4:	2200      	movs	r2, #0
   d63a6:	f7ff b977 	b.w	d5698 <hal_i2c_end_transmission>

000d63aa <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   d63aa:	2101      	movs	r1, #1
   d63ac:	f7ff bff9 	b.w	d63a2 <_ZN7TwoWire15endTransmissionEh>

000d63b0 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d63b0:	2200      	movs	r2, #0
   d63b2:	6840      	ldr	r0, [r0, #4]
   d63b4:	4611      	mov	r1, r2
   d63b6:	f7ff ba6b 	b.w	d5890 <network_ready>

000d63ba <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d63ba:	2200      	movs	r2, #0
   d63bc:	6840      	ldr	r0, [r0, #4]
   d63be:	4611      	mov	r1, r2
   d63c0:	f7ff ba86 	b.w	d58d0 <network_listening>

000d63c4 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d63c4:	2200      	movs	r2, #0
   d63c6:	6840      	ldr	r0, [r0, #4]
   d63c8:	4611      	mov	r1, r2
   d63ca:	f7ff ba91 	b.w	d58f0 <network_get_listen_timeout>

000d63ce <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d63ce:	6840      	ldr	r0, [r0, #4]
   d63d0:	2200      	movs	r2, #0
   d63d2:	f7ff ba85 	b.w	d58e0 <network_set_listen_timeout>

000d63d6 <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d63d6:	6840      	ldr	r0, [r0, #4]
   d63d8:	2200      	movs	r2, #0
   d63da:	f081 0101 	eor.w	r1, r1, #1
   d63de:	f7ff ba6f 	b.w	d58c0 <network_listen>

000d63e2 <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d63e2:	2300      	movs	r3, #0
   d63e4:	6840      	ldr	r0, [r0, #4]
   d63e6:	461a      	mov	r2, r3
   d63e8:	4619      	mov	r1, r3
   d63ea:	f7ff ba61 	b.w	d58b0 <network_off>

000d63ee <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d63ee:	2200      	movs	r2, #0
   d63f0:	6840      	ldr	r0, [r0, #4]
   d63f2:	4611      	mov	r1, r2
   d63f4:	f7ff ba3c 	b.w	d5870 <network_connecting>

000d63f8 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d63f8:	6840      	ldr	r0, [r0, #4]
   d63fa:	2200      	movs	r2, #0
   d63fc:	2102      	movs	r1, #2
   d63fe:	f7ff ba3f 	b.w	d5880 <network_disconnect>

000d6402 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d6402:	2300      	movs	r3, #0
   d6404:	6840      	ldr	r0, [r0, #4]
   d6406:	461a      	mov	r2, r3
   d6408:	f7ff ba2a 	b.w	d5860 <network_connect>

000d640c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d640c:	4b02      	ldr	r3, [pc, #8]	; (d6418 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d640e:	2204      	movs	r2, #4
   d6410:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d6412:	4a02      	ldr	r2, [pc, #8]	; (d641c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d6414:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   d6416:	4770      	bx	lr
   d6418:	2003e7c8 	.word	0x2003e7c8
   d641c:	000d7dd8 	.word	0x000d7dd8

000d6420 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d6420:	2300      	movs	r3, #0
   d6422:	6840      	ldr	r0, [r0, #4]
   d6424:	461a      	mov	r2, r3
   d6426:	f7ff ba1b 	b.w	d5860 <network_connect>

000d642a <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d642a:	6840      	ldr	r0, [r0, #4]
   d642c:	2200      	movs	r2, #0
   d642e:	2102      	movs	r1, #2
   d6430:	f7ff ba26 	b.w	d5880 <network_disconnect>

000d6434 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d6434:	2200      	movs	r2, #0
   d6436:	6840      	ldr	r0, [r0, #4]
   d6438:	4611      	mov	r1, r2
   d643a:	f7ff ba19 	b.w	d5870 <network_connecting>

000d643e <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d643e:	2200      	movs	r2, #0
   d6440:	6840      	ldr	r0, [r0, #4]
   d6442:	4611      	mov	r1, r2
   d6444:	f7ff ba24 	b.w	d5890 <network_ready>

000d6448 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d6448:	2300      	movs	r3, #0
   d644a:	6840      	ldr	r0, [r0, #4]
   d644c:	461a      	mov	r2, r3
   d644e:	4619      	mov	r1, r3
   d6450:	f7ff ba26 	b.w	d58a0 <network_on>

000d6454 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d6454:	2300      	movs	r3, #0
   d6456:	6840      	ldr	r0, [r0, #4]
   d6458:	461a      	mov	r2, r3
   d645a:	4619      	mov	r1, r3
   d645c:	f7ff ba28 	b.w	d58b0 <network_off>

000d6460 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   d6460:	6840      	ldr	r0, [r0, #4]
   d6462:	2100      	movs	r1, #0
   d6464:	f7ff ba4c 	b.w	d5900 <network_is_on>

000d6468 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   d6468:	6840      	ldr	r0, [r0, #4]
   d646a:	2100      	movs	r1, #0
   d646c:	f7ff ba50 	b.w	d5910 <network_is_off>

000d6470 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d6470:	6840      	ldr	r0, [r0, #4]
   d6472:	2200      	movs	r2, #0
   d6474:	f081 0101 	eor.w	r1, r1, #1
   d6478:	f7ff ba22 	b.w	d58c0 <network_listen>

000d647c <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d647c:	6840      	ldr	r0, [r0, #4]
   d647e:	2200      	movs	r2, #0
   d6480:	f7ff ba2e 	b.w	d58e0 <network_set_listen_timeout>

000d6484 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d6484:	2200      	movs	r2, #0
   d6486:	6840      	ldr	r0, [r0, #4]
   d6488:	4611      	mov	r1, r2
   d648a:	f7ff ba31 	b.w	d58f0 <network_get_listen_timeout>

000d648e <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d648e:	2200      	movs	r2, #0
   d6490:	6840      	ldr	r0, [r0, #4]
   d6492:	4611      	mov	r1, r2
   d6494:	f7ff ba1c 	b.w	d58d0 <network_listening>

000d6498 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d6498:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d649c:	2400      	movs	r4, #0
IPAddress NetworkClass::resolve(const char* name) {
   d649e:	b095      	sub	sp, #84	; 0x54
   d64a0:	4616      	mov	r6, r2
   d64a2:	460d      	mov	r5, r1
   d64a4:	4607      	mov	r7, r0
    IPAddress addr;
   d64a6:	f7ff fdef 	bl	d6088 <_ZN9IPAddressC1Ev>
    struct addrinfo hints = {};
   d64aa:	4621      	mov	r1, r4
   d64ac:	2218      	movs	r2, #24
   d64ae:	a80e      	add	r0, sp, #56	; 0x38
    struct addrinfo *ai = nullptr;
   d64b0:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d64b2:	f000 fe17 	bl	d70e4 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d64b6:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
   d64b8:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d64bc:	4621      	mov	r1, r4
   d64be:	466b      	mov	r3, sp
   d64c0:	aa0c      	add	r2, sp, #48	; 0x30
   d64c2:	4630      	mov	r0, r6
   d64c4:	f7ff f818 	bl	d54f8 <netdb_getaddrinfo>
    if (!r) {
   d64c8:	4604      	mov	r4, r0
   d64ca:	2800      	cmp	r0, #0
   d64cc:	d14c      	bne.n	d6568 <_ZN5spark12NetworkClass7resolveEPKc+0xd0>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d64ce:	4602      	mov	r2, r0
   d64d0:	2101      	movs	r1, #1
   d64d2:	6868      	ldr	r0, [r5, #4]
   d64d4:	f7ff f9dc 	bl	d5890 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d64d8:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d64da:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d64dc:	4622      	mov	r2, r4
   d64de:	6868      	ldr	r0, [r5, #4]
   d64e0:	f7ff f9d6 	bl	d5890 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d64e4:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d64e6:	4681      	mov	r9, r0
        bool ok = false;
   d64e8:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d64ea:	2e00      	cmp	r6, #0
   d64ec:	d03c      	beq.n	d6568 <_ZN5spark12NetworkClass7resolveEPKc+0xd0>
   d64ee:	2900      	cmp	r1, #0
   d64f0:	d13a      	bne.n	d6568 <_ZN5spark12NetworkClass7resolveEPKc+0xd0>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d64f2:	6873      	ldr	r3, [r6, #4]
   d64f4:	2b02      	cmp	r3, #2
   d64f6:	d003      	beq.n	d6500 <_ZN5spark12NetworkClass7resolveEPKc+0x68>
   d64f8:	2b0a      	cmp	r3, #10
   d64fa:	d011      	beq.n	d6520 <_ZN5spark12NetworkClass7resolveEPKc+0x88>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d64fc:	69f6      	ldr	r6, [r6, #28]
   d64fe:	e7f4      	b.n	d64ea <_ZN5spark12NetworkClass7resolveEPKc+0x52>
                case AF_INET: {
                    if (!ipv4) {
   d6500:	f1b8 0f00 	cmp.w	r8, #0
   d6504:	d00a      	beq.n	d651c <_ZN5spark12NetworkClass7resolveEPKc+0x84>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d6506:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   d6508:	a806      	add	r0, sp, #24
   d650a:	3104      	adds	r1, #4
class IPAddress : public Printable {
   d650c:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   d650e:	f7ff fde9 	bl	d60e4 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   d6512:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d6514:	1d3c      	adds	r4, r7, #4
   d6516:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d6518:	682b      	ldr	r3, [r5, #0]
   d651a:	7023      	strb	r3, [r4, #0]
    virtual ~IPAddress() {}
   d651c:	4641      	mov	r1, r8
   d651e:	e7ed      	b.n	d64fc <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d6520:	f1b9 0f00 	cmp.w	r9, #0
   d6524:	d101      	bne.n	d652a <_ZN5spark12NetworkClass7resolveEPKc+0x92>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
                    a.v = 6;
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
                    addr = IPAddress(a);
                    ok = true;
   d6526:	4649      	mov	r1, r9
   d6528:	e7e8      	b.n	d64fc <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d652a:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d652c:	2210      	movs	r2, #16
   d652e:	a801      	add	r0, sp, #4
   d6530:	f000 fdd8 	bl	d70e4 <memset>
                    a.v = 6;
   d6534:	2306      	movs	r3, #6
   d6536:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d653a:	ad01      	add	r5, sp, #4
   d653c:	f104 0308 	add.w	r3, r4, #8
   d6540:	3418      	adds	r4, #24
   d6542:	6818      	ldr	r0, [r3, #0]
   d6544:	6859      	ldr	r1, [r3, #4]
   d6546:	462a      	mov	r2, r5
   d6548:	c203      	stmia	r2!, {r0, r1}
   d654a:	3308      	adds	r3, #8
   d654c:	42a3      	cmp	r3, r4
   d654e:	4615      	mov	r5, r2
   d6550:	d1f7      	bne.n	d6542 <_ZN5spark12NetworkClass7resolveEPKc+0xaa>
                    addr = IPAddress(a);
   d6552:	a901      	add	r1, sp, #4
   d6554:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   d6556:	ad07      	add	r5, sp, #28
   d6558:	f7ff fda4 	bl	d60a4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d655c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d655e:	1d3c      	adds	r4, r7, #4
   d6560:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d6562:	682b      	ldr	r3, [r5, #0]
   d6564:	7023      	strb	r3, [r4, #0]
   d6566:	e7de      	b.n	d6526 <_ZN5spark12NetworkClass7resolveEPKc+0x8e>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d6568:	9800      	ldr	r0, [sp, #0]
   d656a:	f7fe ffbd 	bl	d54e8 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d656e:	4638      	mov	r0, r7
   d6570:	b015      	add	sp, #84	; 0x54
   d6572:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000d6578 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d6578:	4b02      	ldr	r3, [pc, #8]	; (d6584 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d657a:	4a03      	ldr	r2, [pc, #12]	; (d6588 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d657c:	601a      	str	r2, [r3, #0]
   d657e:	2200      	movs	r2, #0
   d6580:	605a      	str	r2, [r3, #4]

} // spark
   d6582:	4770      	bx	lr
   d6584:	2003e7d0 	.word	0x2003e7d0
   d6588:	000d7e14 	.word	0x000d7e14

000d658c <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   d658c:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   d658e:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   d6590:	d902      	bls.n	d6598 <pinAvailable+0xc>
    return false;
   d6592:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   d6594:	b002      	add	sp, #8
   d6596:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   d6598:	f1a0 030b 	sub.w	r3, r0, #11
   d659c:	2b02      	cmp	r3, #2
   d659e:	d81a      	bhi.n	d65d6 <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d65a0:	4c17      	ldr	r4, [pc, #92]	; (d6600 <pinAvailable+0x74>)
   d65a2:	7821      	ldrb	r1, [r4, #0]
   d65a4:	f3bf 8f5b 	dmb	ish
   d65a8:	f011 0101 	ands.w	r1, r1, #1
   d65ac:	d10b      	bne.n	d65c6 <pinAvailable+0x3a>
   d65ae:	4620      	mov	r0, r4
   d65b0:	9101      	str	r1, [sp, #4]
   d65b2:	f7fd fd7f 	bl	d40b4 <__cxa_guard_acquire>
   d65b6:	9901      	ldr	r1, [sp, #4]
   d65b8:	b128      	cbz	r0, d65c6 <pinAvailable+0x3a>
   d65ba:	4812      	ldr	r0, [pc, #72]	; (d6604 <pinAvailable+0x78>)
   d65bc:	f7ff fa1c 	bl	d59f8 <_ZN8SPIClassC1E19hal_spi_interface_t>
   d65c0:	4620      	mov	r0, r4
   d65c2:	f7fd fd7c 	bl	d40be <__cxa_guard_release>
   d65c6:	4b0f      	ldr	r3, [pc, #60]	; (d6604 <pinAvailable+0x78>)
   d65c8:	7818      	ldrb	r0, [r3, #0]
   d65ca:	f7ff f8bd 	bl	d5748 <hal_spi_is_enabled>
   d65ce:	2800      	cmp	r0, #0
   d65d0:	d1df      	bne.n	d6592 <pinAvailable+0x6>
  return true; // 'pin' is available
   d65d2:	2001      	movs	r0, #1
   d65d4:	e7de      	b.n	d6594 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   d65d6:	2801      	cmp	r0, #1
   d65d8:	d809      	bhi.n	d65ee <pinAvailable+0x62>
   d65da:	f000 f881 	bl	d66e0 <_Z19__fetch_global_Wirev>
   d65de:	2100      	movs	r1, #0
   d65e0:	7c00      	ldrb	r0, [r0, #16]
   d65e2:	f7ff f889 	bl	d56f8 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   d65e6:	f080 0001 	eor.w	r0, r0, #1
   d65ea:	b2c0      	uxtb	r0, r0
   d65ec:	e7d2      	b.n	d6594 <pinAvailable+0x8>
   d65ee:	3809      	subs	r0, #9
   d65f0:	2801      	cmp	r0, #1
   d65f2:	d8ee      	bhi.n	d65d2 <pinAvailable+0x46>
   d65f4:	f7ff fe5c 	bl	d62b0 <_Z22__fetch_global_Serial1v>
   d65f8:	7c00      	ldrb	r0, [r0, #16]
   d65fa:	f7ff f825 	bl	d5648 <hal_usart_is_enabled>
   d65fe:	e7f2      	b.n	d65e6 <pinAvailable+0x5a>
   d6600:	2003e648 	.word	0x2003e648
   d6604:	2003e64c 	.word	0x2003e64c

000d6608 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d6608:	2823      	cmp	r0, #35	; 0x23
{
   d660a:	b538      	push	{r3, r4, r5, lr}
   d660c:	4604      	mov	r4, r0
   d660e:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d6610:	d80a      	bhi.n	d6628 <pinMode+0x20>
   d6612:	29ff      	cmp	r1, #255	; 0xff
   d6614:	d008      	beq.n	d6628 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   d6616:	f7ff ffb9 	bl	d658c <pinAvailable>
   d661a:	b128      	cbz	r0, d6628 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   d661c:	4629      	mov	r1, r5
   d661e:	4620      	mov	r0, r4
}
   d6620:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   d6624:	f7fe bf78 	b.w	d5518 <HAL_Pin_Mode>
}
   d6628:	bd38      	pop	{r3, r4, r5, pc}

000d662a <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d662a:	b538      	push	{r3, r4, r5, lr}
   d662c:	4604      	mov	r4, r0
   d662e:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d6630:	f7fe ff7a 	bl	d5528 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d6634:	28ff      	cmp	r0, #255	; 0xff
   d6636:	d010      	beq.n	d665a <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   d6638:	2806      	cmp	r0, #6
   d663a:	d804      	bhi.n	d6646 <digitalWrite+0x1c>
   d663c:	234d      	movs	r3, #77	; 0x4d
   d663e:	fa23 f000 	lsr.w	r0, r3, r0
   d6642:	07c3      	lsls	r3, r0, #31
   d6644:	d409      	bmi.n	d665a <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d6646:	4620      	mov	r0, r4
   d6648:	f7ff ffa0 	bl	d658c <pinAvailable>
   d664c:	b128      	cbz	r0, d665a <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d664e:	4629      	mov	r1, r5
   d6650:	4620      	mov	r0, r4
}
   d6652:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   d6656:	f7fe bf6f 	b.w	d5538 <HAL_GPIO_Write>
}
   d665a:	bd38      	pop	{r3, r4, r5, pc}

000d665c <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   d665c:	b510      	push	{r4, lr}
   d665e:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d6660:	f7fe ff62 	bl	d5528 <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   d6664:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   d6666:	b2db      	uxtb	r3, r3
   d6668:	2b01      	cmp	r3, #1
   d666a:	d908      	bls.n	d667e <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   d666c:	4620      	mov	r0, r4
   d666e:	f7ff ff8d 	bl	d658c <pinAvailable>
   d6672:	b120      	cbz	r0, d667e <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d6674:	4620      	mov	r0, r4
}
   d6676:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
   d667a:	f7fe bf65 	b.w	d5548 <HAL_GPIO_Read>
}
   d667e:	2000      	movs	r0, #0
   d6680:	bd10      	pop	{r4, pc}

000d6682 <analogRead>:
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
   d6682:	280d      	cmp	r0, #13
{
   d6684:	b510      	push	{r4, lr}
   d6686:	4604      	mov	r4, r0
  {
    pin = pin + FIRST_ANALOG_PIN;
   d6688:	bf9c      	itt	ls
   d668a:	340e      	addls	r4, #14
   d668c:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d668e:	4620      	mov	r0, r4
   d6690:	f7ff ff7c 	bl	d658c <pinAvailable>
   d6694:	b150      	cbz	r0, d66ac <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   d6696:	2103      	movs	r1, #3
   d6698:	4620      	mov	r0, r4
   d669a:	f7fe ff35 	bl	d5508 <HAL_Validate_Pin_Function>
   d669e:	2803      	cmp	r0, #3
   d66a0:	d104      	bne.n	d66ac <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
   d66a2:	4620      	mov	r0, r4
}
   d66a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
   d66a8:	f7fe bf56 	b.w	d5558 <hal_adc_read>
}
   d66ac:	2000      	movs	r0, #0
   d66ae:	bd10      	pop	{r4, pc}

000d66b0 <_Z17acquireWireBufferv>:
}

} // anonymous

hal_i2c_config_t __attribute__((weak)) acquireWireBuffer()
{
   d66b0:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   d66b2:	2300      	movs	r3, #0
   d66b4:	2520      	movs	r5, #32
   d66b6:	8043      	strh	r3, [r0, #2]
   d66b8:	2314      	movs	r3, #20
{
   d66ba:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   d66bc:	8003      	strh	r3, [r0, #0]
   d66be:	6085      	str	r5, [r0, #8]
   d66c0:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d66c2:	4906      	ldr	r1, [pc, #24]	; (d66dc <_Z17acquireWireBufferv+0x2c>)
   d66c4:	4628      	mov	r0, r5
   d66c6:	f000 f83a 	bl	d673e <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d66ca:	4904      	ldr	r1, [pc, #16]	; (d66dc <_Z17acquireWireBufferv+0x2c>)
	};
   d66cc:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d66ce:	4628      	mov	r0, r5
   d66d0:	f000 f835 	bl	d673e <_ZnajRKSt9nothrow_t>
	};
   d66d4:	60e0      	str	r0, [r4, #12]
	return defaultWireConfig();
}
   d66d6:	4620      	mov	r0, r4
   d66d8:	bd38      	pop	{r3, r4, r5, pc}
   d66da:	bf00      	nop
   d66dc:	000d7e48 	.word	0x000d7e48

000d66e0 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d66e0:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d66e2:	4d0f      	ldr	r5, [pc, #60]	; (d6720 <_Z19__fetch_global_Wirev+0x40>)
   d66e4:	7829      	ldrb	r1, [r5, #0]
   d66e6:	f3bf 8f5b 	dmb	ish
   d66ea:	f011 0401 	ands.w	r4, r1, #1
{
   d66ee:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d66f0:	d113      	bne.n	d671a <_Z19__fetch_global_Wirev+0x3a>
   d66f2:	4628      	mov	r0, r5
   d66f4:	f7fd fcde 	bl	d40b4 <__cxa_guard_acquire>
   d66f8:	b178      	cbz	r0, d671a <_Z19__fetch_global_Wirev+0x3a>
   d66fa:	a801      	add	r0, sp, #4
   d66fc:	f7ff ffd8 	bl	d66b0 <_Z17acquireWireBufferv>
   d6700:	aa01      	add	r2, sp, #4
   d6702:	4621      	mov	r1, r4
   d6704:	4807      	ldr	r0, [pc, #28]	; (d6724 <_Z19__fetch_global_Wirev+0x44>)
   d6706:	f7ff fe29 	bl	d635c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   d670a:	4628      	mov	r0, r5
   d670c:	f7fd fcd7 	bl	d40be <__cxa_guard_release>
   d6710:	4a05      	ldr	r2, [pc, #20]	; (d6728 <_Z19__fetch_global_Wirev+0x48>)
   d6712:	4906      	ldr	r1, [pc, #24]	; (d672c <_Z19__fetch_global_Wirev+0x4c>)
   d6714:	4803      	ldr	r0, [pc, #12]	; (d6724 <_Z19__fetch_global_Wirev+0x44>)
   d6716:	f000 f80b 	bl	d6730 <__aeabi_atexit>
	return wire;
}
   d671a:	4802      	ldr	r0, [pc, #8]	; (d6724 <_Z19__fetch_global_Wirev+0x44>)
   d671c:	b007      	add	sp, #28
   d671e:	bd30      	pop	{r4, r5, pc}
   d6720:	2003e7dc 	.word	0x2003e7dc
   d6724:	2003e7e0 	.word	0x2003e7e0
   d6728:	2003e5b0 	.word	0x2003e5b0
   d672c:	000d6305 	.word	0x000d6305

000d6730 <__aeabi_atexit>:
   d6730:	460b      	mov	r3, r1
   d6732:	4601      	mov	r1, r0
   d6734:	4618      	mov	r0, r3
   d6736:	f000 bcb9 	b.w	d70ac <__cxa_atexit>

000d673a <_ZdlPvj>:
   d673a:	f7fd bcae 	b.w	d409a <_ZdlPv>

000d673e <_ZnajRKSt9nothrow_t>:
   d673e:	f7fd bcaa 	b.w	d4096 <_Znaj>
	...

000d6744 <__aeabi_drsub>:
   d6744:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d6748:	e002      	b.n	d6750 <__adddf3>
   d674a:	bf00      	nop

000d674c <__aeabi_dsub>:
   d674c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d6750 <__adddf3>:
   d6750:	b530      	push	{r4, r5, lr}
   d6752:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d6756:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d675a:	ea94 0f05 	teq	r4, r5
   d675e:	bf08      	it	eq
   d6760:	ea90 0f02 	teqeq	r0, r2
   d6764:	bf1f      	itttt	ne
   d6766:	ea54 0c00 	orrsne.w	ip, r4, r0
   d676a:	ea55 0c02 	orrsne.w	ip, r5, r2
   d676e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d6772:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d6776:	f000 80e2 	beq.w	d693e <__adddf3+0x1ee>
   d677a:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d677e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d6782:	bfb8      	it	lt
   d6784:	426d      	neglt	r5, r5
   d6786:	dd0c      	ble.n	d67a2 <__adddf3+0x52>
   d6788:	442c      	add	r4, r5
   d678a:	ea80 0202 	eor.w	r2, r0, r2
   d678e:	ea81 0303 	eor.w	r3, r1, r3
   d6792:	ea82 0000 	eor.w	r0, r2, r0
   d6796:	ea83 0101 	eor.w	r1, r3, r1
   d679a:	ea80 0202 	eor.w	r2, r0, r2
   d679e:	ea81 0303 	eor.w	r3, r1, r3
   d67a2:	2d36      	cmp	r5, #54	; 0x36
   d67a4:	bf88      	it	hi
   d67a6:	bd30      	pophi	{r4, r5, pc}
   d67a8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d67ac:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d67b0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d67b4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d67b8:	d002      	beq.n	d67c0 <__adddf3+0x70>
   d67ba:	4240      	negs	r0, r0
   d67bc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d67c0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d67c4:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d67c8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d67cc:	d002      	beq.n	d67d4 <__adddf3+0x84>
   d67ce:	4252      	negs	r2, r2
   d67d0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d67d4:	ea94 0f05 	teq	r4, r5
   d67d8:	f000 80a7 	beq.w	d692a <__adddf3+0x1da>
   d67dc:	f1a4 0401 	sub.w	r4, r4, #1
   d67e0:	f1d5 0e20 	rsbs	lr, r5, #32
   d67e4:	db0d      	blt.n	d6802 <__adddf3+0xb2>
   d67e6:	fa02 fc0e 	lsl.w	ip, r2, lr
   d67ea:	fa22 f205 	lsr.w	r2, r2, r5
   d67ee:	1880      	adds	r0, r0, r2
   d67f0:	f141 0100 	adc.w	r1, r1, #0
   d67f4:	fa03 f20e 	lsl.w	r2, r3, lr
   d67f8:	1880      	adds	r0, r0, r2
   d67fa:	fa43 f305 	asr.w	r3, r3, r5
   d67fe:	4159      	adcs	r1, r3
   d6800:	e00e      	b.n	d6820 <__adddf3+0xd0>
   d6802:	f1a5 0520 	sub.w	r5, r5, #32
   d6806:	f10e 0e20 	add.w	lr, lr, #32
   d680a:	2a01      	cmp	r2, #1
   d680c:	fa03 fc0e 	lsl.w	ip, r3, lr
   d6810:	bf28      	it	cs
   d6812:	f04c 0c02 	orrcs.w	ip, ip, #2
   d6816:	fa43 f305 	asr.w	r3, r3, r5
   d681a:	18c0      	adds	r0, r0, r3
   d681c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d6820:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d6824:	d507      	bpl.n	d6836 <__adddf3+0xe6>
   d6826:	f04f 0e00 	mov.w	lr, #0
   d682a:	f1dc 0c00 	rsbs	ip, ip, #0
   d682e:	eb7e 0000 	sbcs.w	r0, lr, r0
   d6832:	eb6e 0101 	sbc.w	r1, lr, r1
   d6836:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d683a:	d31b      	bcc.n	d6874 <__adddf3+0x124>
   d683c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d6840:	d30c      	bcc.n	d685c <__adddf3+0x10c>
   d6842:	0849      	lsrs	r1, r1, #1
   d6844:	ea5f 0030 	movs.w	r0, r0, rrx
   d6848:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d684c:	f104 0401 	add.w	r4, r4, #1
   d6850:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d6854:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d6858:	f080 809a 	bcs.w	d6990 <__adddf3+0x240>
   d685c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d6860:	bf08      	it	eq
   d6862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d6866:	f150 0000 	adcs.w	r0, r0, #0
   d686a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d686e:	ea41 0105 	orr.w	r1, r1, r5
   d6872:	bd30      	pop	{r4, r5, pc}
   d6874:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d6878:	4140      	adcs	r0, r0
   d687a:	eb41 0101 	adc.w	r1, r1, r1
   d687e:	3c01      	subs	r4, #1
   d6880:	bf28      	it	cs
   d6882:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   d6886:	d2e9      	bcs.n	d685c <__adddf3+0x10c>
   d6888:	f091 0f00 	teq	r1, #0
   d688c:	bf04      	itt	eq
   d688e:	4601      	moveq	r1, r0
   d6890:	2000      	moveq	r0, #0
   d6892:	fab1 f381 	clz	r3, r1
   d6896:	bf08      	it	eq
   d6898:	3320      	addeq	r3, #32
   d689a:	f1a3 030b 	sub.w	r3, r3, #11
   d689e:	f1b3 0220 	subs.w	r2, r3, #32
   d68a2:	da0c      	bge.n	d68be <__adddf3+0x16e>
   d68a4:	320c      	adds	r2, #12
   d68a6:	dd08      	ble.n	d68ba <__adddf3+0x16a>
   d68a8:	f102 0c14 	add.w	ip, r2, #20
   d68ac:	f1c2 020c 	rsb	r2, r2, #12
   d68b0:	fa01 f00c 	lsl.w	r0, r1, ip
   d68b4:	fa21 f102 	lsr.w	r1, r1, r2
   d68b8:	e00c      	b.n	d68d4 <__adddf3+0x184>
   d68ba:	f102 0214 	add.w	r2, r2, #20
   d68be:	bfd8      	it	le
   d68c0:	f1c2 0c20 	rsble	ip, r2, #32
   d68c4:	fa01 f102 	lsl.w	r1, r1, r2
   d68c8:	fa20 fc0c 	lsr.w	ip, r0, ip
   d68cc:	bfdc      	itt	le
   d68ce:	ea41 010c 	orrle.w	r1, r1, ip
   d68d2:	4090      	lslle	r0, r2
   d68d4:	1ae4      	subs	r4, r4, r3
   d68d6:	bfa2      	ittt	ge
   d68d8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d68dc:	4329      	orrge	r1, r5
   d68de:	bd30      	popge	{r4, r5, pc}
   d68e0:	ea6f 0404 	mvn.w	r4, r4
   d68e4:	3c1f      	subs	r4, #31
   d68e6:	da1c      	bge.n	d6922 <__adddf3+0x1d2>
   d68e8:	340c      	adds	r4, #12
   d68ea:	dc0e      	bgt.n	d690a <__adddf3+0x1ba>
   d68ec:	f104 0414 	add.w	r4, r4, #20
   d68f0:	f1c4 0220 	rsb	r2, r4, #32
   d68f4:	fa20 f004 	lsr.w	r0, r0, r4
   d68f8:	fa01 f302 	lsl.w	r3, r1, r2
   d68fc:	ea40 0003 	orr.w	r0, r0, r3
   d6900:	fa21 f304 	lsr.w	r3, r1, r4
   d6904:	ea45 0103 	orr.w	r1, r5, r3
   d6908:	bd30      	pop	{r4, r5, pc}
   d690a:	f1c4 040c 	rsb	r4, r4, #12
   d690e:	f1c4 0220 	rsb	r2, r4, #32
   d6912:	fa20 f002 	lsr.w	r0, r0, r2
   d6916:	fa01 f304 	lsl.w	r3, r1, r4
   d691a:	ea40 0003 	orr.w	r0, r0, r3
   d691e:	4629      	mov	r1, r5
   d6920:	bd30      	pop	{r4, r5, pc}
   d6922:	fa21 f004 	lsr.w	r0, r1, r4
   d6926:	4629      	mov	r1, r5
   d6928:	bd30      	pop	{r4, r5, pc}
   d692a:	f094 0f00 	teq	r4, #0
   d692e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d6932:	bf06      	itte	eq
   d6934:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d6938:	3401      	addeq	r4, #1
   d693a:	3d01      	subne	r5, #1
   d693c:	e74e      	b.n	d67dc <__adddf3+0x8c>
   d693e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d6942:	bf18      	it	ne
   d6944:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d6948:	d029      	beq.n	d699e <__adddf3+0x24e>
   d694a:	ea94 0f05 	teq	r4, r5
   d694e:	bf08      	it	eq
   d6950:	ea90 0f02 	teqeq	r0, r2
   d6954:	d005      	beq.n	d6962 <__adddf3+0x212>
   d6956:	ea54 0c00 	orrs.w	ip, r4, r0
   d695a:	bf04      	itt	eq
   d695c:	4619      	moveq	r1, r3
   d695e:	4610      	moveq	r0, r2
   d6960:	bd30      	pop	{r4, r5, pc}
   d6962:	ea91 0f03 	teq	r1, r3
   d6966:	bf1e      	ittt	ne
   d6968:	2100      	movne	r1, #0
   d696a:	2000      	movne	r0, #0
   d696c:	bd30      	popne	{r4, r5, pc}
   d696e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d6972:	d105      	bne.n	d6980 <__adddf3+0x230>
   d6974:	0040      	lsls	r0, r0, #1
   d6976:	4149      	adcs	r1, r1
   d6978:	bf28      	it	cs
   d697a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d697e:	bd30      	pop	{r4, r5, pc}
   d6980:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d6984:	bf3c      	itt	cc
   d6986:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d698a:	bd30      	popcc	{r4, r5, pc}
   d698c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d6990:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d6994:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d6998:	f04f 0000 	mov.w	r0, #0
   d699c:	bd30      	pop	{r4, r5, pc}
   d699e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d69a2:	bf1a      	itte	ne
   d69a4:	4619      	movne	r1, r3
   d69a6:	4610      	movne	r0, r2
   d69a8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d69ac:	bf1c      	itt	ne
   d69ae:	460b      	movne	r3, r1
   d69b0:	4602      	movne	r2, r0
   d69b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d69b6:	bf06      	itte	eq
   d69b8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d69bc:	ea91 0f03 	teqeq	r1, r3
   d69c0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d69c4:	bd30      	pop	{r4, r5, pc}
   d69c6:	bf00      	nop

000d69c8 <__aeabi_ui2d>:
   d69c8:	f090 0f00 	teq	r0, #0
   d69cc:	bf04      	itt	eq
   d69ce:	2100      	moveq	r1, #0
   d69d0:	4770      	bxeq	lr
   d69d2:	b530      	push	{r4, r5, lr}
   d69d4:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d69d8:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d69dc:	f04f 0500 	mov.w	r5, #0
   d69e0:	f04f 0100 	mov.w	r1, #0
   d69e4:	e750      	b.n	d6888 <__adddf3+0x138>
   d69e6:	bf00      	nop

000d69e8 <__aeabi_i2d>:
   d69e8:	f090 0f00 	teq	r0, #0
   d69ec:	bf04      	itt	eq
   d69ee:	2100      	moveq	r1, #0
   d69f0:	4770      	bxeq	lr
   d69f2:	b530      	push	{r4, r5, lr}
   d69f4:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d69f8:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d69fc:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d6a00:	bf48      	it	mi
   d6a02:	4240      	negmi	r0, r0
   d6a04:	f04f 0100 	mov.w	r1, #0
   d6a08:	e73e      	b.n	d6888 <__adddf3+0x138>
   d6a0a:	bf00      	nop

000d6a0c <__aeabi_f2d>:
   d6a0c:	0042      	lsls	r2, r0, #1
   d6a0e:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d6a12:	ea4f 0131 	mov.w	r1, r1, rrx
   d6a16:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d6a1a:	bf1f      	itttt	ne
   d6a1c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d6a20:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d6a24:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d6a28:	4770      	bxne	lr
   d6a2a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   d6a2e:	bf08      	it	eq
   d6a30:	4770      	bxeq	lr
   d6a32:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   d6a36:	bf04      	itt	eq
   d6a38:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   d6a3c:	4770      	bxeq	lr
   d6a3e:	b530      	push	{r4, r5, lr}
   d6a40:	f44f 7460 	mov.w	r4, #896	; 0x380
   d6a44:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d6a48:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d6a4c:	e71c      	b.n	d6888 <__adddf3+0x138>
   d6a4e:	bf00      	nop

000d6a50 <__aeabi_ul2d>:
   d6a50:	ea50 0201 	orrs.w	r2, r0, r1
   d6a54:	bf08      	it	eq
   d6a56:	4770      	bxeq	lr
   d6a58:	b530      	push	{r4, r5, lr}
   d6a5a:	f04f 0500 	mov.w	r5, #0
   d6a5e:	e00a      	b.n	d6a76 <__aeabi_l2d+0x16>

000d6a60 <__aeabi_l2d>:
   d6a60:	ea50 0201 	orrs.w	r2, r0, r1
   d6a64:	bf08      	it	eq
   d6a66:	4770      	bxeq	lr
   d6a68:	b530      	push	{r4, r5, lr}
   d6a6a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d6a6e:	d502      	bpl.n	d6a76 <__aeabi_l2d+0x16>
   d6a70:	4240      	negs	r0, r0
   d6a72:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d6a76:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d6a7a:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d6a7e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d6a82:	f43f aed8 	beq.w	d6836 <__adddf3+0xe6>
   d6a86:	f04f 0203 	mov.w	r2, #3
   d6a8a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d6a8e:	bf18      	it	ne
   d6a90:	3203      	addne	r2, #3
   d6a92:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d6a96:	bf18      	it	ne
   d6a98:	3203      	addne	r2, #3
   d6a9a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d6a9e:	f1c2 0320 	rsb	r3, r2, #32
   d6aa2:	fa00 fc03 	lsl.w	ip, r0, r3
   d6aa6:	fa20 f002 	lsr.w	r0, r0, r2
   d6aaa:	fa01 fe03 	lsl.w	lr, r1, r3
   d6aae:	ea40 000e 	orr.w	r0, r0, lr
   d6ab2:	fa21 f102 	lsr.w	r1, r1, r2
   d6ab6:	4414      	add	r4, r2
   d6ab8:	e6bd      	b.n	d6836 <__adddf3+0xe6>
   d6aba:	bf00      	nop

000d6abc <__aeabi_dmul>:
   d6abc:	b570      	push	{r4, r5, r6, lr}
   d6abe:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d6ac2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d6ac6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d6aca:	bf1d      	ittte	ne
   d6acc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d6ad0:	ea94 0f0c 	teqne	r4, ip
   d6ad4:	ea95 0f0c 	teqne	r5, ip
   d6ad8:	f000 f8de 	bleq	d6c98 <__aeabi_dmul+0x1dc>
   d6adc:	442c      	add	r4, r5
   d6ade:	ea81 0603 	eor.w	r6, r1, r3
   d6ae2:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d6ae6:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d6aea:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d6aee:	bf18      	it	ne
   d6af0:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d6af4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d6af8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d6afc:	d038      	beq.n	d6b70 <__aeabi_dmul+0xb4>
   d6afe:	fba0 ce02 	umull	ip, lr, r0, r2
   d6b02:	f04f 0500 	mov.w	r5, #0
   d6b06:	fbe1 e502 	umlal	lr, r5, r1, r2
   d6b0a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d6b0e:	fbe0 e503 	umlal	lr, r5, r0, r3
   d6b12:	f04f 0600 	mov.w	r6, #0
   d6b16:	fbe1 5603 	umlal	r5, r6, r1, r3
   d6b1a:	f09c 0f00 	teq	ip, #0
   d6b1e:	bf18      	it	ne
   d6b20:	f04e 0e01 	orrne.w	lr, lr, #1
   d6b24:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d6b28:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d6b2c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d6b30:	d204      	bcs.n	d6b3c <__aeabi_dmul+0x80>
   d6b32:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d6b36:	416d      	adcs	r5, r5
   d6b38:	eb46 0606 	adc.w	r6, r6, r6
   d6b3c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d6b40:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d6b44:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d6b48:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d6b4c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d6b50:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d6b54:	bf88      	it	hi
   d6b56:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d6b5a:	d81e      	bhi.n	d6b9a <__aeabi_dmul+0xde>
   d6b5c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d6b60:	bf08      	it	eq
   d6b62:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d6b66:	f150 0000 	adcs.w	r0, r0, #0
   d6b6a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d6b6e:	bd70      	pop	{r4, r5, r6, pc}
   d6b70:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d6b74:	ea46 0101 	orr.w	r1, r6, r1
   d6b78:	ea40 0002 	orr.w	r0, r0, r2
   d6b7c:	ea81 0103 	eor.w	r1, r1, r3
   d6b80:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d6b84:	bfc2      	ittt	gt
   d6b86:	ebd4 050c 	rsbsgt	r5, r4, ip
   d6b8a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d6b8e:	bd70      	popgt	{r4, r5, r6, pc}
   d6b90:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d6b94:	f04f 0e00 	mov.w	lr, #0
   d6b98:	3c01      	subs	r4, #1
   d6b9a:	f300 80ab 	bgt.w	d6cf4 <__aeabi_dmul+0x238>
   d6b9e:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d6ba2:	bfde      	ittt	le
   d6ba4:	2000      	movle	r0, #0
   d6ba6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d6baa:	bd70      	pople	{r4, r5, r6, pc}
   d6bac:	f1c4 0400 	rsb	r4, r4, #0
   d6bb0:	3c20      	subs	r4, #32
   d6bb2:	da35      	bge.n	d6c20 <__aeabi_dmul+0x164>
   d6bb4:	340c      	adds	r4, #12
   d6bb6:	dc1b      	bgt.n	d6bf0 <__aeabi_dmul+0x134>
   d6bb8:	f104 0414 	add.w	r4, r4, #20
   d6bbc:	f1c4 0520 	rsb	r5, r4, #32
   d6bc0:	fa00 f305 	lsl.w	r3, r0, r5
   d6bc4:	fa20 f004 	lsr.w	r0, r0, r4
   d6bc8:	fa01 f205 	lsl.w	r2, r1, r5
   d6bcc:	ea40 0002 	orr.w	r0, r0, r2
   d6bd0:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d6bd4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d6bd8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d6bdc:	fa21 f604 	lsr.w	r6, r1, r4
   d6be0:	eb42 0106 	adc.w	r1, r2, r6
   d6be4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d6be8:	bf08      	it	eq
   d6bea:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d6bee:	bd70      	pop	{r4, r5, r6, pc}
   d6bf0:	f1c4 040c 	rsb	r4, r4, #12
   d6bf4:	f1c4 0520 	rsb	r5, r4, #32
   d6bf8:	fa00 f304 	lsl.w	r3, r0, r4
   d6bfc:	fa20 f005 	lsr.w	r0, r0, r5
   d6c00:	fa01 f204 	lsl.w	r2, r1, r4
   d6c04:	ea40 0002 	orr.w	r0, r0, r2
   d6c08:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d6c0c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d6c10:	f141 0100 	adc.w	r1, r1, #0
   d6c14:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d6c18:	bf08      	it	eq
   d6c1a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d6c1e:	bd70      	pop	{r4, r5, r6, pc}
   d6c20:	f1c4 0520 	rsb	r5, r4, #32
   d6c24:	fa00 f205 	lsl.w	r2, r0, r5
   d6c28:	ea4e 0e02 	orr.w	lr, lr, r2
   d6c2c:	fa20 f304 	lsr.w	r3, r0, r4
   d6c30:	fa01 f205 	lsl.w	r2, r1, r5
   d6c34:	ea43 0302 	orr.w	r3, r3, r2
   d6c38:	fa21 f004 	lsr.w	r0, r1, r4
   d6c3c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d6c40:	fa21 f204 	lsr.w	r2, r1, r4
   d6c44:	ea20 0002 	bic.w	r0, r0, r2
   d6c48:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d6c4c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d6c50:	bf08      	it	eq
   d6c52:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d6c56:	bd70      	pop	{r4, r5, r6, pc}
   d6c58:	f094 0f00 	teq	r4, #0
   d6c5c:	d10f      	bne.n	d6c7e <__aeabi_dmul+0x1c2>
   d6c5e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d6c62:	0040      	lsls	r0, r0, #1
   d6c64:	eb41 0101 	adc.w	r1, r1, r1
   d6c68:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d6c6c:	bf08      	it	eq
   d6c6e:	3c01      	subeq	r4, #1
   d6c70:	d0f7      	beq.n	d6c62 <__aeabi_dmul+0x1a6>
   d6c72:	ea41 0106 	orr.w	r1, r1, r6
   d6c76:	f095 0f00 	teq	r5, #0
   d6c7a:	bf18      	it	ne
   d6c7c:	4770      	bxne	lr
   d6c7e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d6c82:	0052      	lsls	r2, r2, #1
   d6c84:	eb43 0303 	adc.w	r3, r3, r3
   d6c88:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d6c8c:	bf08      	it	eq
   d6c8e:	3d01      	subeq	r5, #1
   d6c90:	d0f7      	beq.n	d6c82 <__aeabi_dmul+0x1c6>
   d6c92:	ea43 0306 	orr.w	r3, r3, r6
   d6c96:	4770      	bx	lr
   d6c98:	ea94 0f0c 	teq	r4, ip
   d6c9c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d6ca0:	bf18      	it	ne
   d6ca2:	ea95 0f0c 	teqne	r5, ip
   d6ca6:	d00c      	beq.n	d6cc2 <__aeabi_dmul+0x206>
   d6ca8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d6cac:	bf18      	it	ne
   d6cae:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d6cb2:	d1d1      	bne.n	d6c58 <__aeabi_dmul+0x19c>
   d6cb4:	ea81 0103 	eor.w	r1, r1, r3
   d6cb8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d6cbc:	f04f 0000 	mov.w	r0, #0
   d6cc0:	bd70      	pop	{r4, r5, r6, pc}
   d6cc2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d6cc6:	bf06      	itte	eq
   d6cc8:	4610      	moveq	r0, r2
   d6cca:	4619      	moveq	r1, r3
   d6ccc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d6cd0:	d019      	beq.n	d6d06 <__aeabi_dmul+0x24a>
   d6cd2:	ea94 0f0c 	teq	r4, ip
   d6cd6:	d102      	bne.n	d6cde <__aeabi_dmul+0x222>
   d6cd8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d6cdc:	d113      	bne.n	d6d06 <__aeabi_dmul+0x24a>
   d6cde:	ea95 0f0c 	teq	r5, ip
   d6ce2:	d105      	bne.n	d6cf0 <__aeabi_dmul+0x234>
   d6ce4:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d6ce8:	bf1c      	itt	ne
   d6cea:	4610      	movne	r0, r2
   d6cec:	4619      	movne	r1, r3
   d6cee:	d10a      	bne.n	d6d06 <__aeabi_dmul+0x24a>
   d6cf0:	ea81 0103 	eor.w	r1, r1, r3
   d6cf4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d6cf8:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d6cfc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d6d00:	f04f 0000 	mov.w	r0, #0
   d6d04:	bd70      	pop	{r4, r5, r6, pc}
   d6d06:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d6d0a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d6d0e:	bd70      	pop	{r4, r5, r6, pc}

000d6d10 <__aeabi_ddiv>:
   d6d10:	b570      	push	{r4, r5, r6, lr}
   d6d12:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d6d16:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d6d1a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d6d1e:	bf1d      	ittte	ne
   d6d20:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d6d24:	ea94 0f0c 	teqne	r4, ip
   d6d28:	ea95 0f0c 	teqne	r5, ip
   d6d2c:	f000 f8a7 	bleq	d6e7e <__aeabi_ddiv+0x16e>
   d6d30:	eba4 0405 	sub.w	r4, r4, r5
   d6d34:	ea81 0e03 	eor.w	lr, r1, r3
   d6d38:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d6d3c:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d6d40:	f000 8088 	beq.w	d6e54 <__aeabi_ddiv+0x144>
   d6d44:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d6d48:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d6d4c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d6d50:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d6d54:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d6d58:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d6d5c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d6d60:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d6d64:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d6d68:	429d      	cmp	r5, r3
   d6d6a:	bf08      	it	eq
   d6d6c:	4296      	cmpeq	r6, r2
   d6d6e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d6d72:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d6d76:	d202      	bcs.n	d6d7e <__aeabi_ddiv+0x6e>
   d6d78:	085b      	lsrs	r3, r3, #1
   d6d7a:	ea4f 0232 	mov.w	r2, r2, rrx
   d6d7e:	1ab6      	subs	r6, r6, r2
   d6d80:	eb65 0503 	sbc.w	r5, r5, r3
   d6d84:	085b      	lsrs	r3, r3, #1
   d6d86:	ea4f 0232 	mov.w	r2, r2, rrx
   d6d8a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d6d8e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d6d92:	ebb6 0e02 	subs.w	lr, r6, r2
   d6d96:	eb75 0e03 	sbcs.w	lr, r5, r3
   d6d9a:	bf22      	ittt	cs
   d6d9c:	1ab6      	subcs	r6, r6, r2
   d6d9e:	4675      	movcs	r5, lr
   d6da0:	ea40 000c 	orrcs.w	r0, r0, ip
   d6da4:	085b      	lsrs	r3, r3, #1
   d6da6:	ea4f 0232 	mov.w	r2, r2, rrx
   d6daa:	ebb6 0e02 	subs.w	lr, r6, r2
   d6dae:	eb75 0e03 	sbcs.w	lr, r5, r3
   d6db2:	bf22      	ittt	cs
   d6db4:	1ab6      	subcs	r6, r6, r2
   d6db6:	4675      	movcs	r5, lr
   d6db8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d6dbc:	085b      	lsrs	r3, r3, #1
   d6dbe:	ea4f 0232 	mov.w	r2, r2, rrx
   d6dc2:	ebb6 0e02 	subs.w	lr, r6, r2
   d6dc6:	eb75 0e03 	sbcs.w	lr, r5, r3
   d6dca:	bf22      	ittt	cs
   d6dcc:	1ab6      	subcs	r6, r6, r2
   d6dce:	4675      	movcs	r5, lr
   d6dd0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d6dd4:	085b      	lsrs	r3, r3, #1
   d6dd6:	ea4f 0232 	mov.w	r2, r2, rrx
   d6dda:	ebb6 0e02 	subs.w	lr, r6, r2
   d6dde:	eb75 0e03 	sbcs.w	lr, r5, r3
   d6de2:	bf22      	ittt	cs
   d6de4:	1ab6      	subcs	r6, r6, r2
   d6de6:	4675      	movcs	r5, lr
   d6de8:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d6dec:	ea55 0e06 	orrs.w	lr, r5, r6
   d6df0:	d018      	beq.n	d6e24 <__aeabi_ddiv+0x114>
   d6df2:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d6df6:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d6dfa:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d6dfe:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d6e02:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d6e06:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d6e0a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d6e0e:	d1c0      	bne.n	d6d92 <__aeabi_ddiv+0x82>
   d6e10:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d6e14:	d10b      	bne.n	d6e2e <__aeabi_ddiv+0x11e>
   d6e16:	ea41 0100 	orr.w	r1, r1, r0
   d6e1a:	f04f 0000 	mov.w	r0, #0
   d6e1e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d6e22:	e7b6      	b.n	d6d92 <__aeabi_ddiv+0x82>
   d6e24:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d6e28:	bf04      	itt	eq
   d6e2a:	4301      	orreq	r1, r0
   d6e2c:	2000      	moveq	r0, #0
   d6e2e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d6e32:	bf88      	it	hi
   d6e34:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d6e38:	f63f aeaf 	bhi.w	d6b9a <__aeabi_dmul+0xde>
   d6e3c:	ebb5 0c03 	subs.w	ip, r5, r3
   d6e40:	bf04      	itt	eq
   d6e42:	ebb6 0c02 	subseq.w	ip, r6, r2
   d6e46:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d6e4a:	f150 0000 	adcs.w	r0, r0, #0
   d6e4e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d6e52:	bd70      	pop	{r4, r5, r6, pc}
   d6e54:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d6e58:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d6e5c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d6e60:	bfc2      	ittt	gt
   d6e62:	ebd4 050c 	rsbsgt	r5, r4, ip
   d6e66:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d6e6a:	bd70      	popgt	{r4, r5, r6, pc}
   d6e6c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d6e70:	f04f 0e00 	mov.w	lr, #0
   d6e74:	3c01      	subs	r4, #1
   d6e76:	e690      	b.n	d6b9a <__aeabi_dmul+0xde>
   d6e78:	ea45 0e06 	orr.w	lr, r5, r6
   d6e7c:	e68d      	b.n	d6b9a <__aeabi_dmul+0xde>
   d6e7e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d6e82:	ea94 0f0c 	teq	r4, ip
   d6e86:	bf08      	it	eq
   d6e88:	ea95 0f0c 	teqeq	r5, ip
   d6e8c:	f43f af3b 	beq.w	d6d06 <__aeabi_dmul+0x24a>
   d6e90:	ea94 0f0c 	teq	r4, ip
   d6e94:	d10a      	bne.n	d6eac <__aeabi_ddiv+0x19c>
   d6e96:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d6e9a:	f47f af34 	bne.w	d6d06 <__aeabi_dmul+0x24a>
   d6e9e:	ea95 0f0c 	teq	r5, ip
   d6ea2:	f47f af25 	bne.w	d6cf0 <__aeabi_dmul+0x234>
   d6ea6:	4610      	mov	r0, r2
   d6ea8:	4619      	mov	r1, r3
   d6eaa:	e72c      	b.n	d6d06 <__aeabi_dmul+0x24a>
   d6eac:	ea95 0f0c 	teq	r5, ip
   d6eb0:	d106      	bne.n	d6ec0 <__aeabi_ddiv+0x1b0>
   d6eb2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d6eb6:	f43f aefd 	beq.w	d6cb4 <__aeabi_dmul+0x1f8>
   d6eba:	4610      	mov	r0, r2
   d6ebc:	4619      	mov	r1, r3
   d6ebe:	e722      	b.n	d6d06 <__aeabi_dmul+0x24a>
   d6ec0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d6ec4:	bf18      	it	ne
   d6ec6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d6eca:	f47f aec5 	bne.w	d6c58 <__aeabi_dmul+0x19c>
   d6ece:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d6ed2:	f47f af0d 	bne.w	d6cf0 <__aeabi_dmul+0x234>
   d6ed6:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d6eda:	f47f aeeb 	bne.w	d6cb4 <__aeabi_dmul+0x1f8>
   d6ede:	e712      	b.n	d6d06 <__aeabi_dmul+0x24a>

000d6ee0 <__gedf2>:
   d6ee0:	f04f 3cff 	mov.w	ip, #4294967295
   d6ee4:	e006      	b.n	d6ef4 <__cmpdf2+0x4>
   d6ee6:	bf00      	nop

000d6ee8 <__ledf2>:
   d6ee8:	f04f 0c01 	mov.w	ip, #1
   d6eec:	e002      	b.n	d6ef4 <__cmpdf2+0x4>
   d6eee:	bf00      	nop

000d6ef0 <__cmpdf2>:
   d6ef0:	f04f 0c01 	mov.w	ip, #1
   d6ef4:	f84d cd04 	str.w	ip, [sp, #-4]!
   d6ef8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d6efc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d6f00:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d6f04:	bf18      	it	ne
   d6f06:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   d6f0a:	d01b      	beq.n	d6f44 <__cmpdf2+0x54>
   d6f0c:	b001      	add	sp, #4
   d6f0e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   d6f12:	bf0c      	ite	eq
   d6f14:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   d6f18:	ea91 0f03 	teqne	r1, r3
   d6f1c:	bf02      	ittt	eq
   d6f1e:	ea90 0f02 	teqeq	r0, r2
   d6f22:	2000      	moveq	r0, #0
   d6f24:	4770      	bxeq	lr
   d6f26:	f110 0f00 	cmn.w	r0, #0
   d6f2a:	ea91 0f03 	teq	r1, r3
   d6f2e:	bf58      	it	pl
   d6f30:	4299      	cmppl	r1, r3
   d6f32:	bf08      	it	eq
   d6f34:	4290      	cmpeq	r0, r2
   d6f36:	bf2c      	ite	cs
   d6f38:	17d8      	asrcs	r0, r3, #31
   d6f3a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   d6f3e:	f040 0001 	orr.w	r0, r0, #1
   d6f42:	4770      	bx	lr
   d6f44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d6f48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d6f4c:	d102      	bne.n	d6f54 <__cmpdf2+0x64>
   d6f4e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d6f52:	d107      	bne.n	d6f64 <__cmpdf2+0x74>
   d6f54:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d6f58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d6f5c:	d1d6      	bne.n	d6f0c <__cmpdf2+0x1c>
   d6f5e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d6f62:	d0d3      	beq.n	d6f0c <__cmpdf2+0x1c>
   d6f64:	f85d 0b04 	ldr.w	r0, [sp], #4
   d6f68:	4770      	bx	lr
   d6f6a:	bf00      	nop

000d6f6c <__aeabi_cdrcmple>:
   d6f6c:	4684      	mov	ip, r0
   d6f6e:	4610      	mov	r0, r2
   d6f70:	4662      	mov	r2, ip
   d6f72:	468c      	mov	ip, r1
   d6f74:	4619      	mov	r1, r3
   d6f76:	4663      	mov	r3, ip
   d6f78:	e000      	b.n	d6f7c <__aeabi_cdcmpeq>
   d6f7a:	bf00      	nop

000d6f7c <__aeabi_cdcmpeq>:
   d6f7c:	b501      	push	{r0, lr}
   d6f7e:	f7ff ffb7 	bl	d6ef0 <__cmpdf2>
   d6f82:	2800      	cmp	r0, #0
   d6f84:	bf48      	it	mi
   d6f86:	f110 0f00 	cmnmi.w	r0, #0
   d6f8a:	bd01      	pop	{r0, pc}

000d6f8c <__aeabi_dcmpeq>:
   d6f8c:	f84d ed08 	str.w	lr, [sp, #-8]!
   d6f90:	f7ff fff4 	bl	d6f7c <__aeabi_cdcmpeq>
   d6f94:	bf0c      	ite	eq
   d6f96:	2001      	moveq	r0, #1
   d6f98:	2000      	movne	r0, #0
   d6f9a:	f85d fb08 	ldr.w	pc, [sp], #8
   d6f9e:	bf00      	nop

000d6fa0 <__aeabi_dcmplt>:
   d6fa0:	f84d ed08 	str.w	lr, [sp, #-8]!
   d6fa4:	f7ff ffea 	bl	d6f7c <__aeabi_cdcmpeq>
   d6fa8:	bf34      	ite	cc
   d6faa:	2001      	movcc	r0, #1
   d6fac:	2000      	movcs	r0, #0
   d6fae:	f85d fb08 	ldr.w	pc, [sp], #8
   d6fb2:	bf00      	nop

000d6fb4 <__aeabi_dcmple>:
   d6fb4:	f84d ed08 	str.w	lr, [sp, #-8]!
   d6fb8:	f7ff ffe0 	bl	d6f7c <__aeabi_cdcmpeq>
   d6fbc:	bf94      	ite	ls
   d6fbe:	2001      	movls	r0, #1
   d6fc0:	2000      	movhi	r0, #0
   d6fc2:	f85d fb08 	ldr.w	pc, [sp], #8
   d6fc6:	bf00      	nop

000d6fc8 <__aeabi_dcmpge>:
   d6fc8:	f84d ed08 	str.w	lr, [sp, #-8]!
   d6fcc:	f7ff ffce 	bl	d6f6c <__aeabi_cdrcmple>
   d6fd0:	bf94      	ite	ls
   d6fd2:	2001      	movls	r0, #1
   d6fd4:	2000      	movhi	r0, #0
   d6fd6:	f85d fb08 	ldr.w	pc, [sp], #8
   d6fda:	bf00      	nop

000d6fdc <__aeabi_dcmpgt>:
   d6fdc:	f84d ed08 	str.w	lr, [sp, #-8]!
   d6fe0:	f7ff ffc4 	bl	d6f6c <__aeabi_cdrcmple>
   d6fe4:	bf34      	ite	cc
   d6fe6:	2001      	movcc	r0, #1
   d6fe8:	2000      	movcs	r0, #0
   d6fea:	f85d fb08 	ldr.w	pc, [sp], #8
   d6fee:	bf00      	nop

000d6ff0 <__aeabi_dcmpun>:
   d6ff0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d6ff4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d6ff8:	d102      	bne.n	d7000 <__aeabi_dcmpun+0x10>
   d6ffa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d6ffe:	d10a      	bne.n	d7016 <__aeabi_dcmpun+0x26>
   d7000:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d7004:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d7008:	d102      	bne.n	d7010 <__aeabi_dcmpun+0x20>
   d700a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d700e:	d102      	bne.n	d7016 <__aeabi_dcmpun+0x26>
   d7010:	f04f 0000 	mov.w	r0, #0
   d7014:	4770      	bx	lr
   d7016:	f04f 0001 	mov.w	r0, #1
   d701a:	4770      	bx	lr

000d701c <__aeabi_d2iz>:
   d701c:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d7020:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d7024:	d215      	bcs.n	d7052 <__aeabi_d2iz+0x36>
   d7026:	d511      	bpl.n	d704c <__aeabi_d2iz+0x30>
   d7028:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d702c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d7030:	d912      	bls.n	d7058 <__aeabi_d2iz+0x3c>
   d7032:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d7036:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d703a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d703e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d7042:	fa23 f002 	lsr.w	r0, r3, r2
   d7046:	bf18      	it	ne
   d7048:	4240      	negne	r0, r0
   d704a:	4770      	bx	lr
   d704c:	f04f 0000 	mov.w	r0, #0
   d7050:	4770      	bx	lr
   d7052:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d7056:	d105      	bne.n	d7064 <__aeabi_d2iz+0x48>
   d7058:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   d705c:	bf08      	it	eq
   d705e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   d7062:	4770      	bx	lr
   d7064:	f04f 0000 	mov.w	r0, #0
   d7068:	4770      	bx	lr
   d706a:	bf00      	nop

000d706c <__aeabi_d2uiz>:
   d706c:	004a      	lsls	r2, r1, #1
   d706e:	d211      	bcs.n	d7094 <__aeabi_d2uiz+0x28>
   d7070:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d7074:	d211      	bcs.n	d709a <__aeabi_d2uiz+0x2e>
   d7076:	d50d      	bpl.n	d7094 <__aeabi_d2uiz+0x28>
   d7078:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d707c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d7080:	d40e      	bmi.n	d70a0 <__aeabi_d2uiz+0x34>
   d7082:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d7086:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d708a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d708e:	fa23 f002 	lsr.w	r0, r3, r2
   d7092:	4770      	bx	lr
   d7094:	f04f 0000 	mov.w	r0, #0
   d7098:	4770      	bx	lr
   d709a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d709e:	d102      	bne.n	d70a6 <__aeabi_d2uiz+0x3a>
   d70a0:	f04f 30ff 	mov.w	r0, #4294967295
   d70a4:	4770      	bx	lr
   d70a6:	f04f 0000 	mov.w	r0, #0
   d70aa:	4770      	bx	lr

000d70ac <__cxa_atexit>:
   d70ac:	b510      	push	{r4, lr}
   d70ae:	4c05      	ldr	r4, [pc, #20]	; (d70c4 <__cxa_atexit+0x18>)
   d70b0:	4613      	mov	r3, r2
   d70b2:	b12c      	cbz	r4, d70c0 <__cxa_atexit+0x14>
   d70b4:	460a      	mov	r2, r1
   d70b6:	4601      	mov	r1, r0
   d70b8:	2002      	movs	r0, #2
   d70ba:	f3af 8000 	nop.w
   d70be:	bd10      	pop	{r4, pc}
   d70c0:	4620      	mov	r0, r4
   d70c2:	e7fc      	b.n	d70be <__cxa_atexit+0x12>
   d70c4:	00000000 	.word	0x00000000

000d70c8 <memcpy>:
   d70c8:	440a      	add	r2, r1
   d70ca:	4291      	cmp	r1, r2
   d70cc:	f100 33ff 	add.w	r3, r0, #4294967295
   d70d0:	d100      	bne.n	d70d4 <memcpy+0xc>
   d70d2:	4770      	bx	lr
   d70d4:	b510      	push	{r4, lr}
   d70d6:	f811 4b01 	ldrb.w	r4, [r1], #1
   d70da:	f803 4f01 	strb.w	r4, [r3, #1]!
   d70de:	4291      	cmp	r1, r2
   d70e0:	d1f9      	bne.n	d70d6 <memcpy+0xe>
   d70e2:	bd10      	pop	{r4, pc}

000d70e4 <memset>:
   d70e4:	4402      	add	r2, r0
   d70e6:	4603      	mov	r3, r0
   d70e8:	4293      	cmp	r3, r2
   d70ea:	d100      	bne.n	d70ee <memset+0xa>
   d70ec:	4770      	bx	lr
   d70ee:	f803 1b01 	strb.w	r1, [r3], #1
   d70f2:	e7f9      	b.n	d70e8 <memset+0x4>

000d70f4 <srand>:
   d70f4:	b538      	push	{r3, r4, r5, lr}
   d70f6:	4b0d      	ldr	r3, [pc, #52]	; (d712c <srand+0x38>)
   d70f8:	681d      	ldr	r5, [r3, #0]
   d70fa:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d70fc:	4604      	mov	r4, r0
   d70fe:	b97b      	cbnz	r3, d7120 <srand+0x2c>
   d7100:	2018      	movs	r0, #24
   d7102:	f7fe fc15 	bl	d5930 <malloc>
   d7106:	4a0a      	ldr	r2, [pc, #40]	; (d7130 <srand+0x3c>)
   d7108:	4b0a      	ldr	r3, [pc, #40]	; (d7134 <srand+0x40>)
   d710a:	63a8      	str	r0, [r5, #56]	; 0x38
   d710c:	e9c0 2300 	strd	r2, r3, [r0]
   d7110:	4b09      	ldr	r3, [pc, #36]	; (d7138 <srand+0x44>)
   d7112:	6083      	str	r3, [r0, #8]
   d7114:	230b      	movs	r3, #11
   d7116:	8183      	strh	r3, [r0, #12]
   d7118:	2201      	movs	r2, #1
   d711a:	2300      	movs	r3, #0
   d711c:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d7120:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d7122:	2200      	movs	r2, #0
   d7124:	611c      	str	r4, [r3, #16]
   d7126:	615a      	str	r2, [r3, #20]
   d7128:	bd38      	pop	{r3, r4, r5, pc}
   d712a:	bf00      	nop
   d712c:	2003e548 	.word	0x2003e548
   d7130:	abcd330e 	.word	0xabcd330e
   d7134:	e66d1234 	.word	0xe66d1234
   d7138:	0005deec 	.word	0x0005deec

000d713c <strlen>:
   d713c:	4603      	mov	r3, r0
   d713e:	f813 2b01 	ldrb.w	r2, [r3], #1
   d7142:	2a00      	cmp	r2, #0
   d7144:	d1fb      	bne.n	d713e <strlen+0x2>
   d7146:	1a18      	subs	r0, r3, r0
   d7148:	3801      	subs	r0, #1
   d714a:	4770      	bx	lr

000d714c <dynalib_user>:
   d714c:	4021 000d 405d 000d 4085 000d 4089 000d     !@..]@...@...@..
   d715c:	0000 0000 6548 6c6c 2c6f 7720 726f 646c     ....Hello, world
   d716c:	0021 6543 736c 7569 3a73 0020 4320 4600     !.Celsius: . C.F
   d717c:	6861 6572 686e 6965 3a74 0020 4620 0020     ahrenheit: . F .
   d718c:	6564 6166 6c75 2074 4d00 4253 4c00 4253     default .MSB.LSB
   d719c:	3c00 5053 5349 7465 6974 676e 2073 6564     .<SPISettings de
   d71ac:	6166 6c75 3e74 3c00 5053 5349 7465 6974     fault>.<SPISetti
   d71bc:	676e 2073 7325 7525 2520 2073 4f4d 4544     ngs %s%u %s MODE
   d71cc:	7525 003e                                   %u>.

000d71d0 <_ZL4font>:
   d71d0:	0000 0000 3e00 4f5b 3e5b 6b3e 6b4f 1c3e     .....>[O[>>kOk>.
   d71e0:	7c3e 1c3e 3c18 3c7e 1c18 7d57 1c57 5e1c     >|>..<~<..W}W..^
   d71f0:	5e7f 001c 3c18 0018 e7ff e7c3 00ff 2418     .^...<.........$
   d7200:	0018 e7ff e7db 30ff 3a48 0e06 2926 2979     .......0H:..&)y)
   d7210:	4026 057f 0705 7f40 2505 5a3f e73c 5a3c     &@....@..%?Z<.<Z
   d7220:	3e7f 1c1c 0808 1c1c 7f3e 2214 227f 5f14     .>......>.."."._
   d7230:	005f 5f5f 0906 017f 007f 8966 6a95 6060     _.__......f..j``
   d7240:	6060 9460 ffa2 94a2 0408 047e 1008 7e20     ```.......~... ~
   d7250:	1020 0808 1c2a 0808 2a1c 0808 101e 1010      ...*....*......
   d7260:	0c10 0c1e 0c1e 3830 383e 0630 3e0e 060e     ......08>80..>..
   d7270:	0000 0000 0000 5f00 0000 0700 0700 1400     ......._........
   d7280:	147f 147f 2a24 2a7f 2312 0813 6264 4936     ....$*.*.#..db6I
   d7290:	2056 0050 0708 0003 1c00 4122 0000 2241     V P......."A..A"
   d72a0:	001c 1c2a 1c7f 082a 3e08 0808 8000 3070     ..*...*..>....p0
   d72b0:	0800 0808 0808 0000 6060 2000 0810 0204     ........``. ....
   d72c0:	513e 4549 003e 7f42 0040 4972 4949 2146     >QIE>.B.@.rIIIF!
   d72d0:	4941 334d 1418 7f12 2710 4545 3945 4a3c     AIM3.....'EEE9<J
   d72e0:	4949 4131 1121 0709 4936 4949 4636 4949     II1A!...6III6FII
   d72f0:	1e29 0000 0014 0000 3440 0000 0800 2214     ).......@4....."
   d7300:	1441 1414 1414 4100 1422 0208 5901 0609     A......A"....Y..
   d7310:	413e 595d 7c4e 1112 7c12 497f 4949 3e36     >A]YN|...|.III6>
   d7320:	4141 2241 417f 4141 7f3e 4949 4149 097f     AAA".AAA>.IIIA..
   d7330:	0909 3e01 4141 7351 087f 0808 007f 7f41     ...>AAQs......A.
   d7340:	0041 4020 3f41 7f01 1408 4122 407f 4040     A. @A?...."A.@@@
   d7350:	7f40 1c02 7f02 047f 1008 3e7f 4141 3e41     @..........>AAA>
   d7360:	097f 0909 3e06 5141 5e21 097f 2919 2646     .....>AQ!^...)F&
   d7370:	4949 3249 0103 017f 3f03 4040 3f40 201f     III2.....?@@@?. 
   d7380:	2040 3f1f 3840 3f40 1463 1408 0363 7804     @ .?@8@?c...c..x
   d7390:	0304 5961 4d49 0043 417f 4141 0402 1008     ..aYIMC..AAA....
   d73a0:	0020 4141 7f41 0204 0201 4004 4040 4040      .AAA......@@@@@
   d73b0:	0300 0807 2000 5454 4078 287f 4444 3838     ..... TTx@.(DD88
   d73c0:	4444 2844 4438 2844 387f 5454 1854 0800     DDD(8DD(.8TTT...
   d73d0:	097e 1802 a4a4 789c 087f 0404 0078 7d44     ~......x....x.D}
   d73e0:	0040 4020 3d40 7f00 2810 0044 4100 407f     @. @@=...(D..A.@
   d73f0:	7c00 7804 7804 087c 0404 3878 4444 3844     .|.x.x|...x8DDD8
   d7400:	18fc 2424 1818 2424 fc18 087c 0404 4808     ..$$..$$..|....H
   d7410:	5454 2454 0404 443f 3c24 4040 7c20 201c     TTT$..?D$<@@ |. 
   d7420:	2040 3c1c 3040 3c40 2844 2810 4c44 9090     @ .<@0@<D(.(DL..
   d7430:	7c90 6444 4c54 0044 3608 0041 0000 0077     .|DdTLD..6A...w.
   d7440:	0000 3641 0008 0102 0402 3c02 2326 3c26     ..A6.......<&#&<
   d7450:	a11e 61a1 3a12 4040 7a20 5438 5554 2159     ...a.:@@ z8TTUY!
   d7460:	5555 4179 5422 7854 2142 5455 4078 5420     UUyA"TTxB!UTx@ T
   d7470:	7955 0c40 521e 1272 5539 5555 3959 5454     Uy@..Rr.9UUUY9TT
   d7480:	5954 5539 5454 0058 4500 417c 0200 7d45     TY9UTTX..E|A..E}
   d7490:	0042 4501 407c 127d 1211 f07d 2528 f028     B..E|@}...}.(%(.
   d74a0:	547c 4555 2000 5454 547c 0a7c 7f09 3249     |TUE. TT|T|...I2
   d74b0:	4949 3249 443a 4444 323a 484a 3048 413a     III2:DDD:2JHH0:A
   d74c0:	2141 3a7a 4042 7820 9d00 a0a0 3d7d 4242     A!z:B@ x....}=BB
   d74d0:	3d42 403d 4040 3c3d ff24 2424 7e48 4349     B==@@@=<$.$$H~IC
   d74e0:	2b66 fc2f 2b2f 09ff f629 c020 7e88 0309     f+/./+..). ..~..
   d74f0:	5420 7954 0041 4400 417d 4830 4a48 3832      TTyA..D}A0HHJ28
   d7500:	4040 7a22 7a00 0a0a 7d72 190d 7d31 2926     @@"z.z..r}..1}&)
   d7510:	2f29 2628 2929 2629 4830 404d 3820 0808     )/(&)))&0HM@ 8..
   d7520:	0808 0808 0808 2f38 c810 baac 102f 3428     ......8/..../.(4
   d7530:	00fa 7b00 0000 1408 142a 2222 2a14 0814     ...{....*."".*..
   d7540:	0055 0055 aa55 aa55 aa55 55ff 55ff 00ff     U.U.U.U.U..U.U..
   d7550:	0000 00ff 1010 ff10 1400 1414 00ff 1010     ................
   d7560:	00ff 10ff f010 f010 1414 fc14 1400 f714     ................
   d7570:	ff00 0000 00ff 14ff f414 fc04 1414 1017     ................
   d7580:	101f 1f10 1f10 1414 1f14 1000 1010 00f0     ................
   d7590:	0000 1f00 1010 1010 101f 1010 f010 0010     ................
   d75a0:	0000 10ff 1010 1010 1010 1010 10ff 0000     ................
   d75b0:	ff00 0014 ff00 ff00 0000 101f 0017 fc00     ................
   d75c0:	f404 1414 1017 1417 f414 f404 0000 00ff     ................
   d75d0:	14f7 1414 1414 1414 00f7 14f7 1414 1417     ................
   d75e0:	1010 101f 141f 1414 14f4 1010 10f0 00f0     ................
   d75f0:	1f00 1f10 0000 1f00 0014 0000 14fc 0000     ................
   d7600:	10f0 10f0 ff10 ff10 1414 ff14 1014 1010     ................
   d7610:	001f 0000 f000 ff10 ffff ffff f0f0 f0f0     ................
   d7620:	fff0 ffff 0000 0000 ff00 0fff 0f0f 0f0f     ................
   d7630:	4438 3844 fc44 4a4a 344a 027e 0602 0206     8DD8D.JJJ4~.....
   d7640:	027e 027e 5563 4149 3863 4444 043c 7e40     ~.~.cUIAc8DD<.@~
   d7650:	1e20 0620 7e02 0202 a599 a5e7 1c99 492a      . ..~........*I
   d7660:	1c2a 724c 7201 304c 4d4a 304d 4830 4878     *.Lr.rL0JMM00HxH
   d7670:	bc30 5a62 3d46 493e 4949 7e00 0101 7e01     0.bZF=>III.~...~
   d7680:	2a2a 2a2a 442a 5f44 4444 5140 444a 4040     *****DD_DD@QJD@@
   d7690:	4a44 4051 0000 01ff e003 ff80 0000 0808     DJQ@............
   d76a0:	6b6b 3608 3612 3624 0f06 0f09 0006 1800     kk.6.6$6........
   d76b0:	0018 0000 1010 3000 ff40 0101 1f00 0101     .......0@.......
   d76c0:	001e 1d19 1217 3c00 3c3c 003c 0000 0000     .......<<<<.....

000d76d0 <_ZTV12Adafruit_GFX>:
	...
   d76e0:	49b9 000d 5bd1 000d 40a1 000d 43c1 000d     .I...[...@...C..
   d76f0:	43c3 000d 43f5 000d 43d1 000d 43e3 000d     .C...C...C...C..
   d7700:	4305 000d 43c1 000d 45ed 000d 4567 000d     .C...C...E..gE..
   d7710:	440d 000d 444b 000d 4485 000d 44cb 000d     .D..KD...D...D..
   d7720:	4569 000d 44e7 000d                         iE...D..

000d7728 <_ZTV16OledWingAdafruit>:
	...
   d7730:	4ac9 000d 4ae9 000d 49b9 000d 5bd1 000d     .J...J...I...[..
   d7740:	4c19 000d 43c1 000d 43c3 000d 43f5 000d     .L...C...C...C..
   d7750:	43d1 000d 43e3 000d 4305 000d 43c1 000d     .C...C...C...C..
   d7760:	45ed 000d 4dd3 000d 5367 000d 5319 000d     .E...M..gS...S..
   d7770:	4485 000d 44cb 000d 4569 000d 44e7 000d     .D...D..iE...D..

000d7780 <_ZTVN8particle11SPISettingsE>:
	...
   d7788:	42b1 000d 4285 000d 4287 000d               .B...B...B..

000d7794 <_ZL12splash1_data>:
   d7794:	0000 0000 0100 0080 0000 0000 0000 0000     ................
   d77a4:	8003 0000 0000 0000 0000 0700 00c0 0000     ................
   d77b4:	0000 0000 0000 c007 0000 0000 0000 0000     ................
   d77c4:	0f00 00c0 0000 0000 0000 0000 e01f 0000     ................
   d77d4:	0000 0000 0000 1f00 00e0 0000 0000 0000     ................
   d77e4:	0000 e03f 0000 0000 0000 0000 3f00 00f0     ..?..........?..
	...
   d77fc:	f07f 0000 0000 0000 1f00 7ff8 00f0 0000     ................
   d780c:	0000 0000 fe3f f07f 0000 0000 0000 3f00     ....?..........?
   d781c:	7fff 00f0 0000 0000 0000 ff1f e0fb 0000     ................
   d782c:	0000 0000 0f00 f9ff c0ff 0000 0000 0000     ................
   d783c:	ff0f fff9 00f8 0000 0000 0700 f1ff ffff     ................
   d784c:	0000 0000 0000 fc03 ff73 80ff 0000 0000     ........s.......
   d785c:	0100 3ffe ffff 0080 0000 0000 ff00 0f1e     ...?............
   d786c:	00ff 0000 0000 0000 fe7f fc1f 0000 0000     ................
   d787c:	0000 3f00 ffff 00f8 0000 0000 0000 df0f     ...?............
   d788c:	e0ff 0000 0000 0000 1f00 ff19 00c0 0000     ................
   d789c:	0000 0000 3c3f 00ff 0000 0000 0000 7e00     ....?<.........~
   d78ac:	f87c 0000 0000 0000 0000 fe7f 007c 0000     |...........|...
   d78bc:	0000 0000 ff00 fcff 0000 0000 0000 0000     ................
   d78cc:	ffff 00fe 0000 0000 0000 ff00 feff 0000     ................
   d78dc:	0000 0000 0100 efff 00fe 0000 0000 0000     ................
   d78ec:	ff01 fecf 0000 0000 0000 0300 07ff 00fe     ................
   d78fc:	0000 0000 0000 fc03 fe07 0000 0000 0000     ................
   d790c:	0300 03f0 00fe 0000 0000 0000 8001 fe00     ................
	...
   d7924:	0000 007e 0000 0000 0000 0000 3e00 0000     ..~..........>..
	...
   d793c:	000c 0000 0000 0700 0080 00fc 0300 00c0     ................
   d794c:	0000 8007 fc01 0000 c003 0000 0700 0180     ................
   d795c:	00fc 0300 00c0 0000 8007 e001 0000 1e00     ................
   d796c:	0000 0700 0180 00e0 0000 001e e37f 9ff7     ................
   d797c:	fdf9 78e7 df7b ffc0 fff7 fdbf fffd 7b78     ...x{.........x{
   d798c:	c0df f7ff bfff fdfd 78ff df7b f0c0 87f7     .........x{.....
   d799c:	3dbc ffe1 7b78 00de f7f0 bc87 e13d 78f0     .=..x{......=..x
   d79ac:	de7b 0000 87f7 3d80 e0e1 7b78 00de f77f     {......=..x{....
   d79bc:	9f87 e1fd 78e0 de7b ff00 87f7 fdbf e0e1     .....x{.........
   d79cc:	7b78 00de f7f0 bc87 e13d 78e0 de7b f000     x{......=..x{...
   d79dc:	87f7 3dbc e0e1 7b78 00de f7f0 bc87 e13d     ...=..x{......=.
   d79ec:	78e0 de7b ff00 fff7 fdbf e0e1 fb7f c0df     .x{.............
   d79fc:	f7ff bfff e1fd 7fe0 dffb 7cc0 f3f3 3d9f     ...........|...=
   d7a0c:	e0e1 7b3e c0cf 0000 0000 0000 0000 0000     ..>{............
   d7a1c:	ff00 ffff ffff ffff ffff c0ff ffff ffff     ................
   d7a2c:	68fd 11db 311a ffc0 ffff fdff 5a2b 6afb     .h...1......+Z.j
   d7a3c:	c0ef ffff ffff 4bfd 3b5b 331a ffc0 ffff     .......K[;.3....
   d7a4c:	fdff 5b6b 6adb c0fd                         ..k[.j..

000d7a54 <_ZL12splash2_data>:
   d7a54:	0000 0060 0000 0000 0000 0000 0000 0000     ..`.............
   d7a64:	e000 0000 0000 0000 0000 0000 0000 0100     ................
   d7a74:	00e0 0000 0000 0000 0000 0000 0000 f001     ................
	...
   d7a90:	0300 00f0 0000 0000 0000 0000 0000 0000     ................
   d7aa0:	f007 0000 0000 0000 0000 0000 0000 0700     ................
   d7ab0:	00f8 0000 0000 0000 0000 0000 0000 f80f     ................
   d7ac0:	0000 0300 00c0 007e 0100 00e0 0f7f 00f8     ......~.........
   d7ad0:	0000 c003 fe00 0000 e001 ff00 f8ef 0000     ................
   d7ae0:	0300 00c0 00fe 0100 00e0 ffff 00f8 0000     ................
   d7af0:	c003 f000 0000 0f00 7f00 7ffe 00c0 0300     ................
   d7b00:	00c0 00f0 0000 000f fe3f f87f f13f cffb     ........?...?...
   d7b10:	fefc bcf3 ef3d 1fe0 7ffe 7fff fffb fedf     ....=...........
   d7b20:	fffe 3dbc e0ef c61f ffff fb7f dfff fefe     ...=............
   d7b30:	bcff ef3d 0fe0 c7e3 78fe c37b 1ede fff0     ..=......x{.....
   d7b40:	3dbc 00ef ff07 fc87 7b78 dec3 f01e 3cf8     .=......x{.....<
   d7b50:	ef3d 0100 ffff 00f0 c37b 1ec0 f0f0 3d3c     =.......{.....<=
   d7b60:	00ef f301 e07f fb3f cfc3 f0fe 3cf0 ef3d     ......?......<=.
   d7b70:	0300 3fe3 7f80 c3fb fedf f0f0 3d3c 00ef     ...?........<=..
   d7b80:	e707 003c 7b78 dec3 f01e 3cf0 ef3d 0700     ..<.x{.....<=...
   d7b90:	beff 7800 c37b 1ede f0f0 3d3c 00ef ff07     ...x{.....<=....
   d7ba0:	00fe 7b78 dec3 f01e 3cf0 ef3d 0f00 feff     ..x{.....<=.....
   d7bb0:	7f00 fffb fedf f0f0 fd3f e0ef ff0f 00ff     ........?.......
   d7bc0:	fb7f dfff f0fe 3ff0 effd 0fe0 fff9 3e00     .......?.......>
   d7bd0:	f979 9ecf f0f0 3d1f e0e7 f11f 00ff 0000     y......=........
	...
   d7be8:	1f00 ff80 7f00 ffff ffff ffff ffff e0ff     ................
   d7bf8:	001c 007f ff7f ffff b4fe 886d 188d 00e0     ..........m.....
   d7c08:	1f00 7f00 ffff feff ad95 b57d e077 0000     ..........}.w...
   d7c18:	000f ff7f ffff a5fe 9dad 198d 00e0 0600     ................
   d7c28:	7f00 ffff feff adb5 b5ed e07e               ..........~.

000d7c34 <_ZTV16Adafruit_SSD1306>:
	...
   d7c3c:	4bed 000d 4c05 000d 49b9 000d 5bd1 000d     .K...L...I...[..
   d7c4c:	4c19 000d 43c1 000d 43c3 000d 43f5 000d     .L...C...C...C..
   d7c5c:	43d1 000d 43e3 000d 4305 000d 43c1 000d     .C...C...C...C..
   d7c6c:	45ed 000d 4dd3 000d 5367 000d 5319 000d     .E...M..gS...S..
   d7c7c:	4485 000d 44cb 000d 4569 000d 44e7 000d     .D...D..iE...D..

000d7c8c <_ZZN16Adafruit_SSD130621drawFastVLineInternalEssstE7premask>:
   d7c8c:	8000 e0c0 f8f0 fefc                         ........

000d7c94 <_ZZN16Adafruit_SSD130621drawFastVLineInternalEssstE8postmask>:
   d7c94:	0100 0703 1f0f 7f3f                         ......?.

000d7c9c <_ZZN16Adafruit_SSD13065beginEhhbbE5init1>:
   d7c9c:	d5ae a880                                   ....

000d7ca0 <_ZZN16Adafruit_SSD13065beginEhhbbE5init2>:
   d7ca0:	00d3 8d40                                   ..@.

000d7ca4 <_ZZN16Adafruit_SSD13065beginEhhbbE5init3>:
   d7ca4:	0020 c8a1                                    ...

000d7ca8 <_ZZN16Adafruit_SSD13065beginEhhbbE5init5>:
   d7ca8:	40db a6a4 af2e                              .@....

000d7cae <_ZZN16Adafruit_SSD13065beginEhhbbE6init4a>:
   d7cae:	02da 8f81                                   ....

000d7cb2 <_ZZN16Adafruit_SSD13065beginEhhbbE6init4b>:
   d7cb2:	12da                                         ...

000d7cb5 <_ZZN16Adafruit_SSD13065beginEhhbbE6init4c>:
   d7cb5:	02da                                         ...

000d7cb8 <_ZZN16Adafruit_SSD13067displayEvE6dlist1>:
   d7cb8:	0022 21ff 0000 0000                         "..!....

000d7cc0 <_ZTVN5spark13EthernetClassE>:
	...
   d7cc8:	59cf 000d 59c5 000d 59bb 000d 59b1 000d     .Y...Y...Y...Y..
   d7cd8:	59a5 000d 5999 000d 6461 000d 6469 000d     .Y...Y..ad..id..
   d7ce8:	598d 000d 5985 000d 597b 000d 5971 000d     .Y...Y..{Y..qY..
   d7cf8:	6499 000d                                   .d..

000d7cfc <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   d7cfc:	0800 1810 2820 3830 616e 006e 6e69 0066     .... (08nan.inf.
   d7d0c:	766f 0066 002e 7061 0070 5925 252d 2d6d     ovf...app.%Y-%m-
   d7d1c:	6425 2554 3a48 4d25 253a 2553 007a 7361     %dT%H:%M:%S%z.as
   d7d2c:	7463 6d69 0065 0000                         ctime...

000d7d34 <_ZTV9IPAddress>:
	...
   d7d3c:	6025 000d 6015 000d 6017 000d               %`...`...`..

000d7d48 <_ZTV9USBSerial>:
	...
   d7d50:	6105 000d 616d 000d 6143 000d 5bd1 000d     .a..ma..Ca...[..
   d7d60:	6135 000d 6107 000d 6117 000d 6167 000d     5a...a...a..ga..
   d7d70:	6127 000d 6101 000d                         'a...a..

000d7d78 <_ZTV11USARTSerial>:
	...
   d7d80:	6209 000d 6275 000d 624d 000d 5bd1 000d     .b..ub..Mb...[..
   d7d90:	621d 000d 6239 000d 622b 000d 6247 000d     .b..9b..+b..Gb..
   d7da0:	620b 000d 620f 000d                         .b...b..

000d7da8 <_ZTV7TwoWire>:
	...
   d7db0:	6305 000d 634f 000d 6327 000d 6307 000d     .c..Oc..'c...c..
   d7dc0:	632f 000d 6337 000d 633f 000d 6347 000d     /c..7c..?c..Gc..

000d7dd0 <_ZTVN5spark9WiFiClassE>:
	...
   d7dd8:	6403 000d 63f9 000d 63ef 000d 63b1 000d     .d...c...c...c..
   d7de8:	5e91 000d 63e3 000d 6461 000d 6469 000d     .^...c..ad..id..
   d7df8:	63d7 000d 63cf 000d 63c5 000d 63bb 000d     .c...c...c...c..
   d7e08:	6499 000d                                   .d..

000d7e0c <_ZTVN5spark12NetworkClassE>:
	...
   d7e14:	6421 000d 642b 000d 6435 000d 643f 000d     !d..+d..5d..?d..
   d7e24:	6449 000d 6455 000d 6461 000d 6469 000d     Id..Ud..ad..id..
   d7e34:	6471 000d 647d 000d 6485 000d 648f 000d     qd..}d...d...d..
   d7e44:	6499 000d                                   .d..

000d7e48 <_ZSt7nothrow>:
	...

000d7e49 <link_const_variable_data_end>:
   d7e49:	00          	.byte	0x00
	...

000d7e4c <link_constructors_location>:
   d7e4c:	000d422d 	.word	0x000d422d
   d7e50:	000d59d9 	.word	0x000d59d9
   d7e54:	000d5b49 	.word	0x000d5b49
   d7e58:	000d5ba9 	.word	0x000d5ba9
   d7e5c:	000d5e9d 	.word	0x000d5e9d
   d7e60:	000d5ead 	.word	0x000d5ead
   d7e64:	000d5ed5 	.word	0x000d5ed5
   d7e68:	000d640d 	.word	0x000d640d
   d7e6c:	000d6579 	.word	0x000d6579
